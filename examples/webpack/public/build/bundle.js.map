{"version":3,"sources":["webpack://ddd-viewer-examples-webpack/../src/DDDViewerConfig.ts","webpack://ddd-viewer-examples-webpack/../src/ScenePosition.ts","webpack://ddd-viewer-examples-webpack/../src/layers/LayerManager.ts","webpack://ddd-viewer-examples-webpack/../src/loading/QueueLoader.ts","webpack://ddd-viewer-examples-webpack/../src/process/ViewerProcessManager.ts","webpack://ddd-viewer-examples-webpack/../src/render/TerrainMaterial.ts","webpack://ddd-viewer-examples-webpack/../src/process/ViewerProcess.ts","webpack://ddd-viewer-examples-webpack/../src/process/anim/AnimationProcess.ts","webpack://ddd-viewer-examples-webpack/../src/process/anim/CameraMoveAnimationProcess.ts","webpack://ddd-viewer-examples-webpack/../src/process/anim/DateTimeAnimationProcess.ts","webpack://ddd-viewer-examples-webpack/../src/process/anim/TextAnimationProcess.ts","webpack://ddd-viewer-examples-webpack/../src/process/sequencer/ViewerSequencer.ts","webpack://ddd-viewer-examples-webpack/../src/SceneViewer.ts","webpack://ddd-viewer-examples-webpack/../src/ViewerState.ts","webpack://ddd-viewer-examples-webpack/../src/layers/Base3DLayer.ts","webpack://ddd-viewer-examples-webpack/../src/layers/GeoTile3DLayer.ts","webpack://ddd-viewer-examples-webpack/../src/render/SkyboxMaterial.ts","webpack://ddd-viewer-examples-webpack/./styles/main.css","webpack://ddd-viewer-examples-webpack/../../node_modules/@babylonjs/core/index.js","webpack://ddd-viewer-examples-webpack/../../node_modules/@babylonjs/loaders/glTF/index.js","webpack://ddd-viewer-examples-webpack/../../node_modules/@babylonjs/materials/index.js","webpack://ddd-viewer-examples-webpack/../../node_modules/mgrs/mgrs.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/AssertionError.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/TileRange.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/array.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/asserts.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/coordinate.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/extent.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/extent/Corner.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/extent/Relationship.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/geom/GeometryType.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/math.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/obj.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/proj.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/proj/Projection.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/proj/Units.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/proj/epsg3857.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/proj/epsg4326.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/proj/projections.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/proj/transforms.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/size.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/sphere.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/string.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/tilecoord.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/tilegrid.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/tilegrid/TileGrid.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/tilegrid/common.js","webpack://ddd-viewer-examples-webpack/../../node_modules/ol/util.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/Point.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/Proj.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/adjust_axis.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/checkSanity.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/adjust_lat.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/adjust_lon.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/adjust_zone.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/asinhy.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/asinz.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/clens.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/clens_cmplx.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/cosh.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/e0fn.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/e1fn.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/e2fn.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/e3fn.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/gN.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/gatg.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/hypot.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/imlfn.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/iqsfnz.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/log1py.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/mlfn.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/msfnz.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/phi2z.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/pj_enfn.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/pj_inv_mlfn.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/pj_mlfn.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/qsfnz.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/sign.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/sinh.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/srat.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/toPoint.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/common/tsfnz.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/constants/Datum.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/constants/Ellipsoid.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/constants/PrimeMeridian.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/constants/units.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/constants/values.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/core.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/datum.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/datumUtils.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/datum_transform.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/defs.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/deriveConstants.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/extend.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/global.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/index.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/match.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/nadgrid.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/parseCode.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projString.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/aea.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/aeqd.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/cass.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/cea.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/eqc.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/eqdc.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/etmerc.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/gauss.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/geocent.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/gnom.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/krovak.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/laea.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/lcc.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/longlat.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/merc.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/mill.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/moll.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/nzmg.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/omerc.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/ortho.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/poly.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/qsc.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/robin.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/sinu.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/somerc.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/stere.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/sterea.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/tmerc.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/tpers.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/utm.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/projections/vandg.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/lib/transform.js","webpack://ddd-viewer-examples-webpack/../../node_modules/proj4/projs.js","webpack://ddd-viewer-examples-webpack/../../node_modules/wkt-parser/index.js","webpack://ddd-viewer-examples-webpack/../../node_modules/wkt-parser/parser.js","webpack://ddd-viewer-examples-webpack/../../node_modules/wkt-parser/process.js","webpack://ddd-viewer-examples-webpack/webpack/bootstrap","webpack://ddd-viewer-examples-webpack/webpack/runtime/define property getters","webpack://ddd-viewer-examples-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://ddd-viewer-examples-webpack/webpack/runtime/make namespace object","webpack://ddd-viewer-examples-webpack/./src/index.js"],"names":["DDDViewerConfig","DDDMaterialsConfig","ScenePosition","LayerManager","update","addLayer","layer","QueueLoader","processNext","task","enqueueLoadModel","onFailure","processTask","url","SceneLoader","ViewerProcessManager","proc","item","add","process","remove","TerrainMaterialWrapper","initSplatMaterial","defScale","options","numTilesHorizontal","numTilesVertical","numSplatTilesHorizontal","numSplatTilesVertical","splatInfos","layers","positions","scales","displScales","dedupScales","v","h","i","tpos","Math","atlasnormals","ViewerProcess","AnimationProcess","animTime","factor","CameraMovementAnimationProcess","move_start","move_end","sceneViewer","Scalar","startHeading","targetHeading","newPositionHeading","positionScene","position","rotation","DateTimeAnimationProcess","console","interpTime","TextAnimationProcess","textCompleteTime","interpChars","interpText","ViewerSequencer","step","runStep","command","posString","moveAnimationProcess","dtStart","dtEnd","parseInt","text","play","SceneViewer","proj4","createXYZ","extent","extentFromProjection","useGeometryIdsMap","initialize","coords","water","hdrTexture","CubeTexture","lensFlareEmitter","flareScale","loadSkybox","baseUrl","skybox","size","skyboxMaterial","Texture","showFullScreen","showDebugView","overlay","loadCatalog","newMeshes","processDepends","dependsCopy","dep","loadCatalogFromMesh","mesh","metadata","loadMaterials","child","addMaterialToCatalog","force","dontFreeze","uvScale","addMeshToCatalog","processMesh","rootmd","root","tileUrlBase","splatmapUrl","splatmapTexture","matwrapper","bounds","key","mat","mmat","newMesh","showText","sideOrientation","Mesh","updatable","Vector3","Space","texture","width","height","font","material","ignored_keys","AbstractMesh","children","instanceAsThinInstance","instance","meshes","instanceRootKey","meshInstanceRoot","cloneMat","scaleMatrix","Matrix","nodeMatrix","node","meshInstanceRootMatrix","matrix","instanceAsThinInstanceBuffers","metadataNode","bufferMatrices","bufferMatricesArray","instanceAsNode","dispose","positionWGS84","terrainElevation","heading","tilt","yaw","updateInterval","maxUpdateElapsed","currentDateUpdate","updateElapsed","scaledElapsed","sceneToWGS84","point","wgs84ToScene","scenePos","wgs84Pos","parsePositionString","result","href","regexp","matches","parseFloat","match","value","code","positionString","groundHeight","updateElevation","ray","pickResult","registerProjectionForCoords","coordsUtm","transform","tileCoords","tileExtent","tileCenter","tileCenterWGS84","deselectMesh","findMeshById","nodeUrlId","selectMeshById","selectMesh","highlightClone","setHighlightRecursively","submesh","mc","getBoundsRecursively","Number","minWorld","maxWorld","nc","findNode","criteria","name","sn","updateRenderPipeline","initRenderPipeline","defaultPipeline","lensRenderingPipeline","edge_blur","chromatic_aberration","distortion","dof_focus_distance","dof_aperture","grain_amount","dof_pentagon","dof_gain","dof_threshold","dof_darken","selectCameraFree","camera","selectCameraWalk","selectCameraOrbit","targetCoords","boundingBox","distance","updateRenderTargets","setMoveSpeed","cycleMoveSpeed","sceneShadowsSetEnabled","localStorage","JSON","alert","sceneTextsSetEnabled","scenePostprocessingSetEnabled","loadTextures","texturesConfig","atlasTextureUrl","atlasNormalsTextureUrl","sceneTextureSet","textureSet","ViewerState","isMobile","shadowsEnabled","textsEnabled","Base3DLayer","Tile3D","GeoTile3D","GeoTile3DLayer","testConeSphere","V","sphereCenter","VlenSq","V1len","distanceClosestPoint","angleCull","frontCull","sphereRadius","backCull","updateTilesDynamic","coordsWGS84","olProj","frustrumOrigin","frustrumForward","frustrumSize","frustrumAngle","tiledistWalk","tiledistDraw","j","tileCenterScene","disableTile","z","x","y","tileKey","tile","getTileMetadata","md","loadTile","tileExtentMinScene","tileExtentMaxScene","sizeWidth","sizeHeight","tileUrl","pivot","marker","Color3","minHeight","heightMin","heightMax","tileMetadata","sceneSelectedMeshId","foundMesh","ex","color","loadQuadMarker","DOUBLESIDE","materialPlane","loadQuadTile","replaceTileCoordsUrl","SkyMaterialWrapper","initMaterial","Effect","shaderMaterial","vertex","fragment","attributes","uniforms","mainTexture","initViewer","dddConfig","canvas","document","getElementById","viewerState","dddviewer","layerDddOsm3d","layerManager","window","addEventListener"],"mappings":"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CM;AACP;AACG;AACV;AACS;AACD;AACD;AACF;AACF;AACH;AACxB,iC;;;;;;;;;;;;;;;;;;;AC3CiC;AACA;AACF;AACA;AACP;AACxB,iC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLuB;AACE;AACF;AACD;AACK;AACJ;AACA;AACD;AACG;AACI;AACJ;AACH;AACI;AACE;AACJ;AACxB,iC;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA,IAAI,IAAI;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,OAAO;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,OAAO;AACX;AACA;;AAEA,WAAW;AACX,WAAW;AACX,WAAW;AACX,WAAW;AACX,WAAW;AACX,iEAAe;AACf;AACA;AACA;AACA,CAAC,EAAC;AACF;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,IAAI;AACf;AACA,YAAY,OAAO;AACnB;AACO;AACP,2BAA2B;AAC3B;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,MAAM;AAClB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8CAA8C;AAC9C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,8BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB;AACpB,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA,8CAA8C;AAC9C;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB;AACA,YAAY,OAAO;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACzuBA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,8EAA8E;AAC3G;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,mBAAmB,6CAAO,gBAAgB,6CAAO,SAAS,mDAAa;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,iEAAe,cAAc,EAAC;AAC9B,0C;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,eAAe,mCAAmC;AAClD,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,YAAY,UAAU;AACtB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;AACzB,qC;;;;;;;;;;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,WAAW,UAAU;AACrB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,oBAAoB;AAC/B;AACA;AACO;AACP;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,MAAM;AACjB;AACA,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,qCAAqC;AAChD;AACA,YAAY,WAAW;AACvB;AACO;AACP;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC,WAAW,wBAAwB;AACnC,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,wBAAwB;AACnC;AACA;AACO;AACP;AACA;AACA;AACA,eAAe,YAAY;AAC3B,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;AACL,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,UAAU;AACrB,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iC;;;;;;;;;;;;;;;ACrOA;AACA;AACA;AACiD;AACjD;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB;AACO;AACP;AACA,kBAAkB,uDAAc;AAChC;AACA;AACA,mC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACuC;AACJ;AACK;AACxC;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA,4BAA4B,sCAAsC;AAClE,0BAA0B,OAAO;AACjC;AACA,aAAa,yCAAyC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB,YAAY,WAAW;AACvB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,mCAAmC;AAC9C,YAAY,WAAW;AACvB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,kBAAkB;AAC7B;AACA,YAAY,WAAW;AACvB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,4CAA4C;AAC1D;AACA,MAAM,WAAW;AACjB;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,iBAAiB;AAC7B;AACA;AACO;AACP;AACA;AACA,eAAe,WAAW;AAC1B,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA,YAAY,OAAO;AACnB;AACO;AACP,4BAA4B,gDAAM;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAS;AACjB;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sCAAsC;AAC/D,kDAAkD,EAAE,QAAQ,EAAE;AAC9D;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,uCAAuC,EAAE,EAAE,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,uCAAuC,EAAE,EAAE,EAAE;AAC7C;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO,mCAAmC,EAAE,QAAQ,EAAE;AACjE;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB,YAAY,QAAQ;AACpB;AACO;AACP;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,kBAAkB;AAC7B;AACA,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,QAAQ;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,QAAQ;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACO;AACP,gCAAgC,EAAE,GAAG,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,uCAAuC;AAClD,YAAY,WAAW;AACvB;AACO;AACP;AACA,yBAAyB,oDAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,uCAAuC;AAClD,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA,yDAAyD,oDAAQ;AACjE;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3ZA;AACA;AACA;AACwC;AACY;AACd;AACtC;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA,WAAW,4CAA4C;AACvD,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,qCAAqC;AAChD,YAAY,QAAQ;AACpB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,qCAAqC;AAChD,YAAY,2CAA2C;AACvD;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oEAAoB;AAC3C;AACA,sCAAsC,iEAAiB;AACvD;AACA;AACA,sCAAsC,kEAAkB;AACxD;AACA;AACA,sCAAsC,kEAAkB;AACxD;AACA;AACA,sCAAsC,kEAAkB;AACxD;AACA,yBAAyB,oEAAoB;AAC7C,uBAAuB,yEAAyB;AAChD;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA,WAAW,qCAAqC;AAChD,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,4CAA4C;AACvD,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,mDAAmD;AAC9D,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,qCAAqC;AAChD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,4CAA4C;AACvD,YAAY,OAAO;AACnB;AACO;AACP,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP,UAAU,cAAc;AACxB;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,mDAAmD;AAC9D,YAAY,OAAO;AACnB;AACO;AACP,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kDAAkD;AAC7D,YAAY,UAAU;AACtB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,qCAAqC;AACjD;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,qCAAqC;AACjD;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,qCAAqC;AACjD;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,qCAAqC;AAChD,YAAY,qCAAqC;AACjD;AACO;AACP;AACA,mBAAmB,kEAAkB;AACrC;AACA;AACA,wBAAwB,mEAAmB;AAC3C;AACA;AACA,wBAAwB,+DAAe;AACvC;AACA;AACA,wBAAwB,gEAAgB;AACxC;AACA;AACA;AACA,QAAQ,mDAAM,YAAY;AAC1B;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qCAAqC;AAChD,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,yBAAyB;AACpC,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,yBAAyB;AACrC;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,qCAAqC;AACjD;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,qCAAqC;AACjD;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,qCAAqC;AAChD,WAAW,qCAAqC;AAChD,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA,qBAAqB,yEAAyB;AAC9C,mBAAmB,yEAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAkB,kBAAkB,kEAAkB;AAC9E;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAkB;AAC1C,yBAAyB,kEAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAkB;AAC1C,yBAAyB,kEAAkB;AAC3C;AACA;AACA;AACA;AACA;AACA,wBAAwB,iEAAiB;AACzC,yBAAyB,iEAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,sCAAsC;AACjD;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,uCAAuC;AAClD,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;;;AC5wBA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;AACF,kC;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;AACF,wC;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;AACF,wC;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA,YAAY,cAAc;AAC1B;AACO;AACP;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA,gC;;;;;;;;;;;;;;;;;ACnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,YAAY,UAAU;AACtB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6CAA6C;AACjD,MAAM,gCAAgC;AACtC,IAAI,mCAAmC;AACvC,mBAAmB,6CAA6C;AAChE;AACA;AACA;AACA,2BAA2B,gCAAgC;AAC3D,IAAI,mCAAmC;AACvC;AACA;AAC8C;AACW;AAC2C;AAC3B;AACmB;AAC2B;AAChE;AACb;AACA;AACM;AAChD;AACA,oBAAoB,gCAAgC;AACpD;AACA,aAAa,4BAA4B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAgE;AAC7E;AACA;AAC2B;AACL;AACtB;AACA,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,YAAY,cAAc;AAC1B;AACA;AACO;AACP;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,YAAY,cAAc;AAC1B;AACO;AACP;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB;AACA;AACO;AACP,IAAI,yDAAO;AACX,IAAI,wDAAgB;AACpB;AACA;AACA,WAAW,kBAAkB;AAC7B;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACO;AACP;AACA,UAAU,yDAAO,YAAY,OAAO;AACpC,qBAAqB,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,2CAA2C;AAC/C,IAAI,iEAAiE;AACrE;AACA,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB,WAAW,qCAAqC;AAChD,WAAW,mCAAmC;AAC9C;AACA,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,2DAAe;AACvE;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAAa,gCAAgC,2DAAa;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,2DAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAW;AACvC,6BAA6B,uDAAW;AACxC;AACA;AACA;AACA,kBAAkB,2DAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B;AACA;AACO;AACP;AACA;AACA;AACA;AACA,gBAAgB,wDAAgB;AAChC;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B;AACA,WAAW,kBAAkB;AAC7B;AACA,WAAW,kBAAkB;AAC7B;AACA,WAAW,kBAAkB;AAC7B;AACA;AACO;AACP;AACA;AACA,YAAY,wDAAgB;AAC5B,YAAY,wDAAgB;AAC5B,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACO;AACP,IAAI,2DAAS;AACb,IAAI,0DAAmB;AACvB;AACA;AACA,WAAW,4BAA4B;AACvC,WAAW,OAAO;AAClB,YAAY,WAAW;AACvB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA,cAAc,uCAAuC;AACrD;AACA,WAAW,qFAAqF;AAChG;AACA,YAAY,kBAAkB;AAC9B;AACO;AACP;AACA;AACA,eAAe,cAAc;AAC7B,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,WAAW,qFAAqF;AAChG;AACA,iCAAiC,sCAAsC;AACvE,wBAAwB,sCAAsC;AAC9D,WAAW,qFAAqF;AAChG;AACA,iCAAiC,sCAAsC;AACvE,wBAAwB,sCAAsC;AAC9D;AACA;AACO;AACP;AACA;AACA,IAAI,wDAAgB;AACpB,IAAI,wDAAgB;AACpB;AACA;AACA;AACA,WAAW,qCAAqC;AAChD;AACA,WAAW,gBAAgB;AAC3B;AACA,YAAY,qCAAqC;AACjD;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,qCAAqC;AAChD,WAAW,gBAAgB;AAC3B;AACA,YAAY,qCAAqC;AACjD;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB,gDAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB,YAAY,QAAQ;AACpB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB;AACA,YAAY,kBAAkB;AAC9B;AACO;AACP;AACA;AACA,wBAAwB,wDAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,YAAY,kBAAkB;AAC9B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qCAAqC;AAC7C,gCAAgC,uCAAuC;AACvE;AACA;AACA,WAAW,qCAAqC;AAChD,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,YAAY,qCAAqC;AACjD;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB;AACA,YAAY,6BAA6B;AACzC;AACA;AACO;AACP;AACA,WAAW,0DAAc;AACzB;AACA;AACA;AACA;AACA,WAAW,qCAAqC;AAChD,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB,YAAY,qCAAqC;AACjD;AACO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,aAAa,cAAc;AAC3B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,aAAa,cAAc;AAC3B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,WAAW,eAAe;AAC1B,aAAa,6BAA6B;AAC1C;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,WAAW,eAAe;AAC1B,aAAa,6BAA6B;AAC1C;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,WAAW;AACtB,WAAW,qFAAqF;AAChG,YAAY,qFAAqF;AACjG;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oDAAQ;AAC5C,yBAAyB,6DAAa;AACtC;AACA;AACA;AACA;AACA,sBAAsB,+CAAK;AAC3B,sBAAsB,+CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oDAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,6BAA6B,0DAAoB;AACjD,6BAA6B,0DAAoB;AACjD;AACA;AACA,4BAA4B,0DAAoB,EAAE,0DAAoB,EAAE,2DAAY,EAAE,yDAAU;AAChG;AACA;AACA,gC;;;;;;;;;;;;;;;AClmBA;AACA;AACA;AAC6C;AAC7C;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB,cAAc,oCAAoC;AAClD;AACA,cAAc,8BAA8B;AAC5C,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,OAAO;AACrB,8EAA8E;AAC9E;AACA,cAAc,8BAA8B;AAC5C,cAAc,+DAA+D;AAC7E;AACA,KAAK,OAAO,2BAA2B,sCAAsC;AAC7E,SAAS,OAAO;AAChB,gBAAgB,wCAAwC;AACxD;AACA;AACA;AACA;AACA,mDAAmD,qBAAqB;AACxE;AACA,oBAAoB,oCAAoC;AACxD;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,oCAAoC;AACxD;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,iCAAiC,6BAA6B;AAC9D;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8BAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA,sCAAsC,sDAAe;AACrD;AACA;AACA;AACA,gBAAgB,8BAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0CAA0C;AAC1D;AACA;AACA;AACA;AACA;AACA,eAAe,0CAA0C;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,eAAe,+DAA+D;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yEAAyE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,iEAAe,UAAU,EAAC;AAC1B,sC;;;;;;;;;;;;;;;ACrPA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;AACrB,iC;;;;;;;;;;;;;;;;;;;;;;;;ACrDA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,8EAA8E;AAC3G;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACyC;AACV;AACG;AAClC;AACA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,mBAAmB,qDAAY;AAC/B;AACA;AACA;AACA;AACA,oCAAoC,8CAAI;AACxC,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC,CAAC,mDAAU;AACZ;AACA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,YAAY,cAAc;AAC1B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,YAAY,cAAc;AAC1B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;;;;;;;;ACjJA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA;AACA,cAAc,gBAAgB,sCAAsC,iBAAiB,EAAE;AACvF,6BAA6B,8EAA8E;AAC3G;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACyC;AACV;AAC/B;AACA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,mBAAmB,sDAAa;AAChC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC,CAAC,mDAAU;AACZ;AACA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;;;;;AC7EA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,kCAAkC;AAC9C;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,kCAAkC;AAC7C;AACO;AACP;AACA;AACA,uC;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACoC;AACpC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kCAAkC;AAC7C,WAAW,kCAAkC;AAC7C,WAAW,uCAAuC;AAClD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kCAAkC;AAC7C,WAAW,kCAAkC;AAC7C,YAAY,uCAAuC;AACnD;AACO;AACP;AACA;AACA;AACA;AACA,QAAQ,gDAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,iDAAiD;AAC7D;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,YAAY,KAAK;AACjB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,MAAM;AACjB,YAAY,KAAK;AACjB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;;;;;;;;;ACtEA;AACA;AACA;AACkD;AACD;AACjD;AACA,wCAAwC,gBAAgB,KAAK;AAC7D;AACA,aAAa,OAAO;AACpB,cAAc,mCAAmC;AACjD;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;AACA,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA,eAAe,mDAAS;AACxB,eAAe,mDAAS;AACxB;AACA,sBAAsB,mDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA,4CAA4C,YAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qCAAqC;AAChD,WAAW,qBAAqB;AAChC;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB,8EAAgC;AACjD;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAkB;AAC/B,aAAa,sEAAwB;AACrC;AACA;AACA,aAAa,sEAAwB;AACrC,aAAa,sEAAwB;AACrC,qCAAqC,2CAA2C;AAChF;AACA;AACA;AACA,aAAa,4EAA8B;AAC3C,aAAa,kEAAoB;AACjC,qCAAqC,2CAA2C;AAChF,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA,aAAa,wEAA0B;AACvC,qCAAqC,2CAA2C;AAChF,gDAAgD,QAAQ;AACxD;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAgC;AAC7C,wCAAwC,+CAA+C;AACvF,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,4CAA4C;AACvD;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA,YAAY,mDAAS;AACrB,8BAA8B,mDAAS,iBAAiB,mDAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qCAAqC;AAChD,WAAW,qBAAqB;AAChC;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB,8EAAgC;AACjD;AACA;AACA;AACA;AACA;AACA,aAAa,gEAAkB;AAC/B,aAAa,sEAAwB;AACrC,aAAa,sEAAwB;AACrC,aAAa,4EAA8B;AAC3C,aAAa,sEAAwB;AACrC;AACA;AACA,aAAa,kEAAoB;AACjC,qCAAqC,oCAAoC;AACzE;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA,aAAa,wEAA0B;AACvC,qCAAqC,2CAA2C;AAChF,gDAAgD,QAAQ;AACxD;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA,aAAa,8EAAgC;AAC7C,wCAAwC,+CAA+C;AACvF,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,qCAAqC;AAChD,WAAW,OAAO;AAClB;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB;AACA,YAAY,qCAAqC;AACjD;AACO;AACP;AACA,eAAe,mDAAS;AACxB,eAAe,mDAAS;AACxB;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAS,OAAO,mDAAS;AACrC;AACA,kC;;;;;;;;;;;;;;;ACzOA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACO;AACP;AACA;AACA,mBAAmB,oCAAoC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,WAAW;AACtB,YAAY,UAAU;AACtB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,UAAU;AACtB;AACO;AACP;AACA;AACA;AACA,WAAW,UAAU;AACrB,YAAY,OAAO;AACnB;AACO;AACP;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,0CAA0C;AACrD,YAAY,QAAQ;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACwC;AACM;AACV;AACuC;AACT;AACgC;AAC/D;AACnC;AACA,WAAW,uCAAuC;AAClD,YAAY,UAAU;AACtB;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,mCAAmC;AAC9C,WAAW,uCAAuC;AAClD,YAAY,mCAAmC;AAC/C;AACO;AACP;AACA;AACA;AACA,SAAS,8DAAkB;AAC3B,yBAAyB,oDAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,WAAW,QAAQ;AACnB;AACA,WAAW,iCAAiC;AAC5C;AACA,WAAW,sCAAsC;AACjD,YAAY,UAAU;AACtB;AACO;AACP,yDAAyD,+DAAe;AACxE;AACA,eAAe,0DAAQ;AACvB;AACA,gBAAgB,qDAAS;AACzB;AACA;AACA,KAAK;AACL;AACA;AACA,aAAa,OAAO;AACpB,cAAc,6BAA6B;AAC3C;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA,cAAc,OAAO;AACrB,cAAc,gCAAgC;AAC9C;AACA;AACA;AACA,WAAW,YAAY;AACvB,YAAY,UAAU;AACtB;AACA;AACO;AACP;AACA,sCAAsC,6CAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAQ;AACvB;AACA;AACA;AACA,WAAW,6BAA6B;AACxC,WAAW,QAAQ;AACnB;AACA,WAAW,iCAAiC;AAC5C;AACA,WAAW,QAAQ;AACnB,YAAY,eAAe;AAC3B;AACA;AACA,4DAA4D,iEAAgB;AAC5E,iBAAiB,qDAAS;AAC1B,gBAAgB,oDAAQ;AACxB,mBAAmB,gDAAM,6CAA6C,kEAAiB;AACvF;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA,WAAW,mCAAmC;AAC9C,WAAW,QAAQ;AACnB;AACA,WAAW,iCAAiC;AAC5C;AACA,WAAW,sCAAsC;AACjD,YAAY,UAAU;AACtB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mCAAmC;AAC9C,YAAY,6BAA6B;AACzC;AACO;AACP,iBAAiB,6CAAa;AAC9B;AACA;AACA,0BAA0B,qDAAe,CAAC,2DAAa;AACvD,iBAAiB,0DAAc;AAC/B;AACA;AACA;AACA,oC;;;;;;;;;;;;;;;;;;;;;;AC/IA;AACA;AACA;AACwF;AACxC;AACT;AACJ;AACuB;AACkB;AAClB;AACtB;AACpC;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,8BAA8B;AAC5C,gCAAgC,4BAA4B;AAC5D;AACA,cAAc,OAAO;AACrB,cAAc,sCAAsC;AACpD;AACA;AACA,cAAc,6CAA6C;AAC3D;AACA;AACA;AACA;AACA,cAAc,eAAe;AAC7B;AACA;AACA,cAAc,iCAAiC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iCAAiC;AAC/C;AACA,cAAc,iCAAiC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,QAAQ,mDAAM,CAAC,mDAAQ;AACvB;AACA,SAAS,aAAa;AACtB;AACA;AACA;AACA,8DAA8D,QAAQ;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,YAAY,mDAAM,uDAAuD;AACzE;AACA;AACA;AACA,2BAA2B,sDAAU;AACrC;AACA,QAAQ,mDAAM,2EAA2E;AACzF;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,YAAY,mDAAM,yDAAyD;AAC3E;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,sBAAsB,yDAAiB;AACvC;AACA,QAAQ,mDAAM;AACd,sDAAsD;AACtD;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,oCAAoC,kDAAS;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C,eAAe,OAAO;AACtB,eAAe,oDAAoD;AACnE;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE,6DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD,eAAe,6DAA6D;AAC5E,eAAe,mCAAmC;AAClD,eAAe,+BAA+B;AAC9C,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,6DAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8BAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,sCAAsC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD,eAAe,mCAAmC;AAClD,eAAe,+BAA+B;AAC9C,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,kCAAkC;AACjD,eAAe,+BAA+B;AAC9C,gBAAgB,8BAA8B;AAC9C;AACA;AACA;AACA;AACA,uBAAuB,gDAAM;AAC7B;AACA;AACA;AACA;AACA,eAAe,0DAAc;AAC7B;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C,eAAe,OAAO;AACtB,eAAe,mCAAmC;AAClD,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAuB;AACtC;AACA;AACA,eAAe,oCAAoC;AACnD,gBAAgB,sCAAsC;AACtD;AACA;AACA;AACA;AACA,uBAAuB,gDAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD,eAAe,+BAA+B;AAC9C,gBAAgB,8BAA8B;AAC9C;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAM;AAC7B;AACA;AACA;AACA;AACA,eAAe,0DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sCAAsC;AACrD,eAAe,OAAO;AACtB,eAAe,qCAAqC;AACpD,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA,eAAe,qCAAqC;AACpD,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAuB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA,eAAe,qCAAqC;AACpD,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA;AACA;AACA,uBAAuB,gDAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAuB;AACtC;AACA;AACA;AACA,eAAe,sCAAsC;AACrD,eAAe,OAAO;AACtB,eAAe,qCAAqC;AACpD,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,iCAAiC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,gBAAgB,4DAAiB;AACjC,eAAe,+CAAK;AACpB;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,iEAAe,QAAQ,EAAC;AACxB,oC;;;;;;;;;;;;;;;AC/fA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP;AACA;AACA,UAAU;AACV;AACO;AACP,kC;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA,YAAY,EAAE;AACd;AACO;AACP,sBAAsB,EAAE;AACxB;AACA,KAAK;AACL;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,UAAU;AACV;AACO;AACP,gC;;;;;;;;;;;;;;;AClCsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,6CAAO;AAC1B;AACA;AACA,SAAS,6CAAO;AAChB;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;;;;;;;;ACjCe;AACN;AACU;AAC+C;AACjD;AACV;AACA;AACU;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mDAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAK,CAAC,qDAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;;AAErC,gBAAgB,wDAAS;AACzB,YAAY,8DAAe;AAC3B,iBAAiB,qDAAW;AAC5B,+BAA+B,+CAAK;AACpC;;AAEA,EAAE,gDAAM,aAAa;AACrB,EAAE,gDAAM,gBAAgB;;AAExB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB,iDAAW;AACpC;AACA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;ACzE1B,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5DA,6BAAe,oCAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACd4C;AAClB;;AAE1B,6BAAe,oCAAS;AACxB,wBAAwB,sDAAO,cAAc,8CAAI;AACjD;;;;;;;;;;;;;;;;;;ACJgD;AACtB;;AAE1B,6BAAe,oCAAS;AACxB,yBAAyB,kDAAG,cAAc,8CAAI,MAAM,qDAAM;AAC1D;;;;;;;;;;;;;;;;ACNsC;;AAEtC,6BAAe,oCAAS;AACxB;AACA,uBAAuB,oDAAU;;AAEjC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACb4B;AACE;;AAE9B,6BAAe,oCAAS;AACxB;AACA,MAAM,gDAAM,eAAe,+CAAK;;AAEhC;AACA;;;;;;;;;;;;;;;ACRA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACLA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACd0B;AACA;;AAE1B,6BAAe,oCAAS;AACxB;AACA;AACA,mBAAmB,8CAAI;AACvB,mBAAmB,8CAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;AC/BA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACJA,6BAAe,oCAAS;AACxB;AACA,C;;;;;;;;;;;;;;ACFA,6BAAe,oCAAS;AACxB;AACA,C;;;;;;;;;;;;;;ACFA,6BAAe,oCAAS;AACxB;AACA,C;;;;;;;;;;;;;;ACFA,6BAAe,oCAAS;AACxB;AACA,C;;;;;;;;;;;;;;ACFA,6BAAe,oCAAS;AACxB;AACA;AACA,C;;;;;;;;;;;;;;ACHA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACdA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACPA,6BAAe,oCAAS;AACxB;AACA;;AAEA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;;;;ACf4C;;AAE5C,6BAAe,oCAAS;AACxB;AACA;AACA;AACA,mBAAmB,sDAAO;AAC1B;AACA;AACA,aAAa,sDAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;AC/BA,6BAAe,oCAAS;AACxB;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACLA,6BAAe,oCAAS;AACxB;AACA,C;;;;;;;;;;;;;;ACFA,6BAAe,oCAAS;AACxB;AACA;AACA,C;;;;;;;;;;;;;;;ACH4C;;AAE5C,6BAAe,oCAAS;AACxB;AACA;AACA,YAAY,sDAAO;AACnB,iBAAiB,SAAS;AAC1B;AACA,WAAW,sDAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;ACvBgC;AACU;;AAE1C;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA,wBAAwB,GAAG,OAAO;AAClC;AACA;AACA;AACA;AACA,SAAS,iDAAO;AAChB;AACA,sBAAsB,oDAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrBA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACJA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACTA,6BAAe,oCAAS;AACxB;AACA,C;;;;;;;;;;;;;;ACFA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACJA,6BAAe,oCAAS;AACxB;AACA,C;;;;;;;;;;;;;;ACFA,6BAAe,oCAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACZ4C;;AAE5C,6BAAe,oCAAS;AACxB;AACA;AACA;AACA,0BAA0B,sDAAO;AACjC;;;;;;;;;;;;;;;ACPA;AAC4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtGA;AAC4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClQA;AAC4B;;AAE5B,wBAAwB;AACxB,iCAAiC;AACjC,+BAA+B;AAC/B,kCAAkC;AAClC,iCAAiC;AACjC,+BAA+B;AAC/B,8BAA8B;AAC9B,mCAAmC;AACnC,iCAAiC;AACjC,4BAA4B;AAC5B,oCAAoC;AACpC,4BAA4B;AAC5B,+BAA+B;;;;;;;;;;;;;;;ACf/B,iEAAe;AACf,OAAO,iBAAiB;AACxB,YAAY;AACZ,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHK;AACA;AACA;AACA,kBAAkB;AAClB,oBAAoB;AACpB,oCAAoC;AACpC,sCAAsC;AACtC,+CAA+C;AAC/C;AACA;AACP;AACO;AACP;AACO;AACP;AACO;AACA;AACP;AACA;;AAEO;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACO;;;;;;;;;;;;;;;;;AC5BmB;AACU;AACpC,YAAY,8CAAI;;AAEhB;AACA;AACA;AACA,uBAAuB,mDAAS,uBAAuB;AACvD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH,UAAU,mDAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,sBAAsB,0CAAI;AAC1B;AACA;AACA;AACA;AACA;AACA,SAAS,8CAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,E;;;;;;;;;;;;;;;ACrFyF;;AAE7G;AACA;;AAEA;AACA,qBAAqB,0DAAW;AAChC,GAAG;AACH,qBAAqB,wDAAS;AAC9B;;AAEA;AACA;AACA;AACA,uBAAuB,yDAAU;AACjC;AACA;AACA;AACA,yBAAyB,yDAAU;AACnC,+BAA+B,yDAAU;AACzC,+BAA+B,yDAAU;AACzC,+BAA+B,yDAAU;AACzC;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,4DAAa;AAClC;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;;;;;ACtCR;AACsD;AAC5D;AACP;AACA,iBAAiB;AACjB,GAAG;AACH;AACA;AACA;AACA,GAAG,gCAAgC,yDAAU;AAC7C;AACA,GAAG,gCAAgC,yDAAU;AAC7C;AACA,GAAG;AACH,gBAAgB;AAChB;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,6BAA6B;;AAE7B,SAAS;AACT,cAAc;AACd,eAAe;AACf,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA,kBAAkB,sDAAO,wBAAwB,sDAAO;AACxD,gBAAgB,sDAAO;AACvB,GAAG,qBAAqB,sDAAO,uBAAuB,sDAAO;AAC7D,eAAe,sDAAO;AACtB,GAAG,sBAAsB,sDAAO;AAChC;AACA;AACA,YAAY;AACZ,GAAG,qBAAqB,sDAAO;AAC/B;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEM;AACP;AACA;AACA;AACA;AACA;;AAEA,QAAQ;AACR,SAAS;AACT,SAAS;AACT,SAAS;AACT;AACA;AACA,SAAS;AACT,YAAY;AACZ,YAAY;AACZ,WAAW;AACX,WAAW;AACX,YAAY;AACZ,WAAW;;AAEX;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,sDAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACO;;AAEP,qBAAqB,yDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,yBAAyB,yDAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACO;;AAEP,qBAAqB,yDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG,yBAAyB,yDAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;;AC5O4B;;AAEmG;AAClF;AAC7C;AACA,mBAAmB,yDAAU,aAAa,yDAAU;AACpD;;AAEA,6BAAe,oCAAS;AACxB;AACA,MAAM,0DAAa;AACnB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,4BAA4B,0DAAW,wBAAwB,0DAAW;AAC1E;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,4DAAa;AACzC;AACA;AACA;AACA;AACA,eAAe,kEAAmB;AAClC,gBAAgB,iEAAkB;AAClC;;AAEA;AACA;AACA;AACA,0BAA0B,4DAAa;AACvC,aAAa,kEAAmB;AAChC,aAAa,kEAAmB;AAChC,cAAc,iEAAkB;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,iEAAoB;AAC9B;AACA;AACA,YAAY,8DAAiB;AAC7B;AACA;AACA,YAAY,gEAAmB;AAC/B;AACA,UAAU,iEAAoB;;AAE9B,0BAA0B,4DAAa;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,eAAe;AACf,gBAAgB;AAChB;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kDAAG,mBAAmB,kDAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb,qBAAqB,YAAY;AACjC,YAAY;AACZ;AACA;AACA,SAAS,2DAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,YAAY,2DAAU;AACtB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX,cAAc;AACd,cAAc;AACd,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY;AACZ;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC/L+B;AACM;AACR;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oDAAS;AAC9B;AACA;AACA,qBAAqB,mDAAG;AACxB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,gDAAO;AACP,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;;;;;ACtDsC;AACQ;AACtC;;AAErB;AACP,iBAAiB;AACjB,iBAAiB;AACjB,0BAA0B;AAC1B;AACA;AACA,mBAAmB,oDAAK,SAAS,kDAAG,QAAQ,kDAAG;AAC/C;AACA;AACA,GAAG;AACH,sBAAsB;AACtB;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW;AACX,kBAAkB,+CAAK,CAAC,yDAAS;AACjC;AACA,gBAAgB,uDAAK;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,oDAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/CA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACbA,6BAAe,oCAAS;AACxB;AACA;AACA;;AAEA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACV2B;AACD;AACE;AACU;AACZ;AACM;AACI;AACZ;AACmB;;AAE3C,uDAAkB,WAAW;AAC7B,+CAAU,GAAG,0CAAI;AACjB,gDAAW,OAAO,+CAAU;AAC5B,gDAAW,GAAG,2CAAK;AACnB,kDAAa,GAAG,oDAAM;AACtB,+CAAU,GAAG,0CAAI;AACjB,kDAAa,GAAG,6CAAO;AACvB,oDAAe,GAAG,+CAAS;AAC3B,+CAAU,GAAG,yCAAI;AACjB,kDAAa;AACb,+CAAmB,CAAC,0CAAK;AACzB,iEAAe,0CAAK,EAAC;;;;;;;;;;;;;;;ACrBrB;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,iCAAiC,gFAAgF;AACjH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7I0B;AACG;AACM;AACP;AAC5B;AACA;AACA;AACA;AACA,iBAAiB,0CAAI;AACrB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,aAAa,+CAAK;AAClB;AACA;AACA;AACA,aAAa,+CAAK;AAClB;AACA;AACA;AACA,YAAY,+CAAK;AACjB;AACA;AACA;AACA,SAAS,+CAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0CAAI;AACjB;AACA;AACA,gBAAgB,mDAAG;AACnB;AACA;AACA,eAAe,uDAAiB;AAChC;AACA;AACA;AACA,eAAe,oDAAO;AACtB;AACA;AACA;AACA;AACA,aAAa,oDAAO;AACpB;AACA,GAAG;AACH;AACA;AACA;;AAEA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;;;;;AC7DkB;AACe;AAChB;AACV;;AAE5B,6BAAe,oCAAS;AACxB;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG,IAAI;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB,kDAAG;AACzB,KAAK;AACL;AACA,sBAAsB,kDAAG;AACzB,KAAK;AACL;AACA,sBAAsB,kDAAG;AACzB,KAAK;AACL;AACA,wBAAwB,kDAAG;AAC3B,KAAK;AACL;AACA,uBAAuB,kDAAG;AAC1B,KAAK;AACL;AACA,uBAAuB,kDAAG;AAC1B,KAAK;AACL;AACA,uBAAuB,kDAAG;AAC1B,KAAK;AACL;AACA,mCAAmC,kDAAG;AACtC,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,uBAAuB,kDAAG;AAC1B,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,+CAAK,CAAC,qDAAK;AAC5B;AACA;AACA;AACA,KAAK;AACL;AACA,gCAAgC,kDAAG;AACnC,KAAK;AACL;AACA,eAAe,+CAAK,CAAC,6DAAa;AAClC,wDAAwD,kDAAG;AAC3D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC5IsC;AACM;AAC5C,aAAa,sDAAI,EAAE,yDAAO;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEa;;AAEN;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,iEAAe;AACf;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACtCkC;AACA;AACU;AACV;AACM;;AAEnC;;AAEP,wCAAwC,oDAAK;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,sDAAK;AAClB,aAAa,sDAAK;;AAElB;AACA;AACA;AACA,aAAa,sDAAK;AAClB,aAAa,sDAAK;;AAElB;AACA;AACA;AACA,aAAa,sDAAK;;AAElB,wCAAwC,oDAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;;AAEP;AACA;;AAEA;AACA;;AAEA,WAAW,sDAAK;AAChB;AACA,yBAAyB,2DAAU;AACnC;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,2DAAU;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA,YAAY,sDAAK;AACjB,eAAe,oDAAK;AACpB;AACA;;AAEA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChI4C;AACK;;AAEjB;AACA;AACA;AACA;AACA;AACJ;AACM;AACA;;;;AAI7B;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,aAAa,2DAAU;AACvB;AACA;AACA,sCAAsC,oDAAK;AAC3C;AACA,gCAAgC,sDAAO;AACvC,gCAAgC,sDAAO;AACvC;AACA;AACA,2CAA2C,oDAAK;AAChD;AACA,gCAAgC,sDAAO;AACvC,gCAAgC,sDAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,qDAAI;AACb,SAAS,qDAAI;AACb,SAAS,qDAAI;AACb,SAAS,qDAAI;AACb,sCAAsC,oDAAK;AAC3C;AACA,qBAAqB,qDAAI,iBAAiB,sDAAO;AACjD,oBAAoB,qDAAI;AACxB;AACA;AACA;AACA;AACA,2CAA2C,oDAAK;AAChD;AACA,qBAAqB,qDAAI,iBAAiB,sDAAO;AACjD,oBAAoB,qDAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAE;AACd,WAAW,mDAAE;AACb;AACA;AACA;AACA;AACA;AACA,mDAAmD,oDAAK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,kBAAkB,sDAAO;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,oDAAK;AAC7B;AACA;AACA;AACA,YAAY,sDAAK;AACjB,kCAAkC,sDAAO;AACzC,2BAA2B,oDAAK;AAChC;AACA,gBAAgB,2DAAU;AAC1B;AACA;AACA,gBAAgB,2DAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,cAAc,2DAAU;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS,qDAAI;AACb,SAAS,qDAAI;AACb,SAAS,qDAAI;AACb,SAAS,qDAAI;AACb,sCAAsC,oDAAK;AAC3C;AACA,qBAAqB,qDAAI,iBAAiB,sDAAO;AACjD;AACA;AACA,YAAY,sDAAK;AACjB,YAAY,2DAAU;AACtB;AACA;AACA;AACA;AACA,2CAA2C,oDAAK;AAChD;AACA,qBAAqB,qDAAI,iBAAiB,sDAAO;AACjD;AACA;;AAEA,YAAY,sDAAK;AACjB,YAAY,2DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mDAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/MgC;AACA;AACA;AACA;AACA;AACJ;AACgB;AACA;AACV;AACe;;AAE5C;AACP;AACA,cAAc,qDAAI;AAClB,cAAc,qDAAI;AAClB,cAAc,qDAAI;AAClB,cAAc,qDAAI;AAClB,wBAAwB,qDAAI;AAC5B;AACA;;AAEA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAU;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mDAAE;AACf;AACA;AACA;AACA;AACA,sBAAsB,qDAAI;;AAE1B;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAK;AACpB,kCAAkC,sDAAO,KAAK,oDAAK;AACnD;AACA,YAAY,sDAAO;AACnB;AACA;AACA;AACA;AACA;AACA,cAAc,mDAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,QAAQ,2DAAU;AAClB,QAAQ,2DAAU;AAClB;;AAEA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;AC3G4C;AACV;AACA;AACE;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,cAAc,sDAAK;AACnB;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,aAAa,2DAAU;AACvB;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;;AAEA;AACA,UAAU,2DAAU;AACpB;AACA;AACA;AACA,UAAU,uDAAM;AAChB,UAAU,2DAAU;AACpB;;AAEA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;ACrE4C;AACA;;AAEvC;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACO;;AAEP;AACA;;AAEA,aAAa,2DAAU;AACvB,aAAa,2DAAU;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACO;;AAEP;AACA;;AAEA,QAAQ,2DAAU;AAClB,QAAQ,2DAAU;AAClB;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CgC;AACA;AACA;AACA;AACE;AACF;AACY;AACA;AACV;AACM;;AAEnC;;AAEP;AACA;AACA;AACA,wCAAwC,oDAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAI;AAChB,YAAY,qDAAI;AAChB,YAAY,qDAAI;AAChB,YAAY,qDAAI;;AAEhB;AACA;;AAEA,aAAa,sDAAK;AAClB,aAAa,qDAAI;;AAEjB,wCAAwC,oDAAK;AAC7C;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAK;AACpB,eAAe,qDAAI;AACnB;AACA;AACA;AACA,aAAa,qDAAI;AACjB;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qDAAI;AACjB;AACA;AACA,wBAAwB,2DAAU;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,2DAAU;AACpB,UAAU,2DAAU;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,sDAAK;AACf,UAAU,2DAAU;AACpB;AACA;AACA;AACA;;AAEA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHF;AACA;;AAEyC;AACP;AACE;AACE;AACJ;AACE;AACY;AACF;;AAEvC;AACP;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAgB;AACpB,mBAAmB,+DAAa;AAChC,mBAAmB,+DAAa;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,UAAU,qDAAI;AACd,4BAA4B,sDAAK;AACjC;;AAEO;AACP,WAAW,2DAAU;AACrB;;AAEA,OAAO,qDAAI;AACX;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,sDAAK;AACxC,OAAO,uDAAM;;AAEb,YAAY,4DAAW;;AAEvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc,4DAAW;;AAEzB;AACA;AACA,mBAAmB,qDAAI;;AAEvB;AACA;AACA;AACA;;AAEA,qCAAqC,sDAAK;AAC1C;;AAEA,UAAU,2DAAU;AACpB,UAAU,qDAAI;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;AC3KgC;AAClC;AACoD;;AAE7C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,qDAAM,yCAAyC,qDAAM,aAAa,qDAAI;AAC7G;;AAEO;AACP;AACA;;AAEA,6DAA6D,qDAAM,aAAa,qDAAI,yCAAyC,sDAAO;AACpI;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,0CAA0C,qDAAM;AAChD,wBAAwB,OAAO;AAC/B,8BAA8B,qDAAI,4CAA4C,sDAAO;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;AChDqB;;AAEhB;AACP;;AAEA;;AAEO;AACP,gBAAgB,iEAAoB;AACpC;AACA;;AAEO;AACP,gBAAgB,iEAAoB;AACpC;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;;;;;;;;;;;;;;;AC1B6C;AACV;AACM;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP,qBAAqB;AACrB,WAAW;AACX,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2DAAU;;AAEnB;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,oDAAK;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,UAAU,sDAAK;AACf;AACA,UAAU,2DAAU;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;ACvG4C;;AAEvC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,kBAAkB,2DAAU;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGyD;;AAEvB;AACU;;AAE9C;AACA;AACA;AACA;AACA;;AAEO;;AAEA;AACA;AACA;;AAEP;AACA;AACO;AACP;AACA,mBAAmB,sDAAO,IAAI,oDAAK;AACnC;AACA;AACA,yBAAyB,oDAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,sDAAK;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;;AAEA,QAAQ,2DAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oDAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oDAAK;AAC3C;AACA;AACA,UAAU,qDAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,sDAAO;AACjB;AACA;AACA;AACA,gBAAgB,sDAAO;AACvB;AACA;AACA;AACA,sBAAsB,oDAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oDAAK;AAClC;AACA;AACA;AACA;AACA,6BAA6B,oDAAK;AAClC;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAO;AACnB;AACA;AACA,aAAa,sDAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oDAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,2DAAU;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACzSkC;AACA;AACF;AACY;AACV;AACe;AAC5C;;AAEP;AACA,iBAAiB;AACjB,iBAAiB;AACjB,gBAAgB;AAChB,gBAAgB;AAChB,iBAAiB;AACjB,iBAAiB;AACjB,sBAAsB;AACtB,uBAAuB;;AAEvB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oDAAK;AAC7C;AACA;;AAEA;AACA;;AAEA;AACA;AACA,YAAY,sDAAK;AACjB,YAAY,sDAAK;;AAEjB;AACA;AACA,YAAY,sDAAK;AACjB,YAAY,sDAAK;;AAEjB,YAAY,sDAAK;;AAEjB,wCAAwC,oDAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;;AAEP;AACA;;AAEA;AACA,+CAA+C,oDAAK;AACpD,UAAU,qDAAI,SAAS,sDAAO,OAAO,oDAAK;AAC1C;;AAEA,qCAAqC,sDAAO;AAC5C;AACA,YAAY,oDAAK;AACjB,SAAS,sDAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAU;AAClC;AACA;;AAEA;AACA;;AAEA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,sDAAK;AACf;AACA;AACA;AACA;AACA;AACA,WAAW,sDAAO;AAClB;AACA,QAAQ,2DAAU;;AAElB;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;ACjJK;AACP;AACA;;AAEA;AACA;AACA;AAC6B;AACA;AACtB;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;ACfkC;;AAEU;AACV;AACA;AAC4B;AACzD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA,YAAY,kDAAG,eAAe,kDAAG,gBAAgB,kDAAG,gBAAgB,kDAAG;AACvE;AACA;;AAEA;AACA,+BAA+B,sDAAO,KAAK,oDAAK;AAChD;AACA;AACA;AACA;AACA,uCAAuC,2DAAU;AACjD,yDAAyD,qDAAM;AAC/D;AACA;AACA;AACA,eAAe,sDAAK;AACpB,uCAAuC,2DAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;;AAEP;AACA;AACA;;AAEA;AACA,UAAU,sDAAO;AACjB;AACA;AACA;AACA,UAAU,sDAAK;AACf;AACA;AACA;AACA;AACA,QAAQ,2DAAU;;AAElB;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;ACnG4C;;AAE9C;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACO;AACP;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,aAAa,2DAAU;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;;AAEA,YAAY,2DAAU;AACtB;;AAEA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;ACnD4C;AACvC;AACmC;AAC1C;AACA;AACO;;AAEP;AACA;AACA;AACA;;AAEA,kBAAkB,2DAAU;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oDAAK;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,oDAAK;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;AClF6C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO;;AAEA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0BAA0B,yDAAU;AACpC;AACA,kBAAkB;;AAElB;AACA,aAAa,SAAS;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,yDAAU;AAC3C;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;ACjOkC;AACU;AACV;AACsC;;AAE1E;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACO,iB;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC,kDAAG;AAC5C;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,sDAAO,2CAA2C,sDAAO;AAChF,kCAAkC,sDAAO;AACzC;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,oDAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,sDAAK;AAC5B,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH,iBAAiB,sDAAK;AACtB,iBAAiB,sDAAK;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,qDAAM;AACnB,KAAK;AACL,cAAc,qDAAM;AACpB;;AAEA,gBAAgB,2DAAU;AAC1B,6CAA6C,2DAAU;AACvD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,K;AACA;;AAEA;AACA,+CAA+C,qDAAM;AACrD,+CAA+C,qDAAM;AACrD;;;AAGA;AACA;AACO;AACP;AACA;AACA;;AAEA,+BAA+B,sDAAO,IAAI,oDAAK;AAC/C,0BAA0B,sDAAK;;AAE/B;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,oDAAK;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,K;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC,oDAAK;AACxC;AACA,yBAAyB,sDAAO,GAAG,sDAAO;AAC1C,GAAG;AACH;AACA,eAAe,sDAAK;;AAEpB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;AChP4C;AACV;AACe;;AAE5C;AACP,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP,qBAAqB;AACrB,WAAW;AACX,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,SAAS,2DAAU;;AAEnB;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,oDAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,SAAS;AACT,QAAQ;AACR,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,sDAAK;;AAEX;AACA;;AAEA;AACA,sBAAsB,oDAAK;AAC3B;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAK;AACb,8BAA8B,sDAAO;AACrC,uBAAuB,oDAAK;AAC5B;AACA,YAAY,2DAAU;AACtB;AACA;AACA,YAAY,2DAAU;AACtB;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAU;AAClB;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FgC;AACA;AACA;AACA;AACY;AACA;AACZ;AACQ;;AAEZ;AAC9B;;AAEO;AACP;AACA;AACA;AACA,uCAAuC;AACvC;AACA,YAAY,qDAAI;AAChB,YAAY,qDAAI;AAChB,YAAY,qDAAI;AAChB,YAAY,qDAAI;AAChB,sBAAsB,qDAAI,gDAAgD;AAC1E;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA,aAAa,2DAAU;AACvB;AACA;AACA,yBAAyB,oDAAK;AAC9B;AACA;AACA;AACA;AACA;AACA,oBAAoB,2DAAU;AAC9B;AACA;AACA;AACA,yBAAyB,oDAAK;AAC9B;AACA;AACA;AACA;AACA,eAAe,mDAAE;AACjB;AACA,mBAAmB,qDAAI;AACvB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C,oDAAK;AACjD,YAAY,2DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,GAAG;AAC3B;AACA;AACA;AACA,8BAA8B,oDAAK;AACnC;AACA;AACA;AACA;AACA,YAAY,2DAAU;AACtB;AACA;AACA;AACA,kCAAkC,oDAAK;AACvC;AACA,YAAY,2DAAU;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,GAAG;AAC3B;AACA;AACA,uBAAuB,qDAAI;AAC3B;AACA;AACA;AACA;AACA,8BAA8B,oDAAK;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,2DAAU;AACtB;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;ACtIF;AACA;;AAEwE;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,sDAAO,GAAG,qDAAM;AACnC;AACA,GAAG,yBAAyB,sDAAO,GAAG,qDAAM;AAC5C;AACA,GAAG,kCAAkC,qDAAM;AAC3C;AACA,GAAG,kCAAkC,sDAAO,GAAG,qDAAM;AACrD;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP,YAAY;AACZ;AACA;AACA;AACA,QAAQ;AACR,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,UAAU,sDAAO;AACjB,eAAe,qDAAM,WAAW,sDAAO,GAAG,qDAAM;AAChD;AACA,oBAAoB,sDAAO;AAC3B,KAAK,gBAAgB,sDAAO,GAAG,qDAAM,aAAa,sDAAO,GAAG,qDAAM;AAClE;AACA,iCAAiC,kDAAG,SAAS,kDAAG;AAChD,KAAK,kBAAkB,sDAAO,GAAG,qDAAM,aAAa,qDAAM;AAC1D;AACA,oBAAoB,sDAAO;AAC3B,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH,UAAU,sDAAO;AACjB,eAAe,qDAAM,WAAW,sDAAO,GAAG,qDAAM;AAChD;AACA,qBAAqB,sDAAO;AAC5B,KAAK,gBAAgB,qDAAM,YAAY,qDAAM;AAC7C;AACA;AACA,KAAK,iBAAiB,qDAAM,aAAa,sDAAO,GAAG,qDAAM;AACzD;AACA,qBAAqB,sDAAO;AAC5B,KAAK;AACL;AACA,kCAAkC,kDAAG,UAAU,kDAAG;AAClD;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA,uCAAuC,sDAAO;AAC9C,KAAK;AACL,uCAAuC,kDAAG;AAC1C,KAAK;AACL,uCAAuC,sDAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,kDAAG,kDAAkD,qDAAM,KAAK,sDAAO;AAC9F;;AAEA;AACA;AACA,UAAU,sDAAO;AACjB,GAAG;AACH,UAAU,kDAAG;AACb,GAAG;AACH,gBAAgB,kDAAG;AACnB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP,YAAY;AACZ;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,UAAU,sDAAO;AACjB,GAAG;AACH;AACA,0BAA0B,kDAAG,QAAQ,kDAAG;AACxC,GAAG;AACH;AACA,UAAU,sDAAO;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,kDAAG;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAO;AACpB;AACA,uBAAuB,sDAAO;AAC9B,KAAK;AACL,sCAAsC,kDAAG,WAAW,kDAAG;AACvD,KAAK;AACL,uBAAuB,sDAAO;AAC9B,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA,mBAAmB,sDAAO;AAC1B;AACA,wBAAwB,sDAAO;AAC/B,KAAK;AACL;AACA,KAAK;AACL,wBAAwB,sDAAO;AAC/B,KAAK;AACL,uCAAuC,kDAAG,YAAY,kDAAG;AACzD;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,6BAA6B,sDAAO;AACpC;AACA;AACA,6CAA6C,sDAAO;AACpD,KAAK;AACL,6CAA6C,kDAAG;AAChD,KAAK;AACL,6CAA6C,sDAAO;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,oDAAK;AACjB;AACA;AACA,GAAG;AACH;AACA,2BAA2B,qDAAM;AACjC;AACA,KAAK,kBAAkB,qDAAM,aAAa,sDAAO,GAAG,qDAAM;AAC1D;AACA,eAAe,sDAAO;AACtB,KAAK,kBAAkB,sDAAO,GAAG,qDAAM,eAAe,sDAAO,GAAG,qDAAM;AACtE;AACA,sCAAsC,kDAAG,WAAW,kDAAG;AACvD,KAAK;AACL;AACA,eAAe,sDAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,kDAAG;AACjB,YAAY,qDAAM;AAClB,GAAG,kBAAkB,kDAAG;AACxB,YAAY,qDAAM;AAClB;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;AC9WF;AACA;AACA;;AAE6D;AACf;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS,kDAAG,GAAG;AACf;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,cAAc,2DAAU;;AAExB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW,kDAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA,2BAA2B,sDAAO,GAAG,sDAAO;AAC5C,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,KAAK,oDAAK;;AAEnB;AACA,6BAA6B,kDAAG;AAChC;AACA;AACA;AACA;;AAEA,WAAW,2DAAU;AACrB;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AChK4C;AACA;AACN;AACxC;AACwC;AACQ;AACG;;AAEf;;;AAG7B;AACP;AACA;;;AAGA;AACA,cAAc,wDAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAU;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,GAAG;AAC/B;AACA;AACA,0BAA0B,oDAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,wDAAO;AACxB;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,sDAAK;AACjB;AACA;AACA,YAAY,sDAAK;AACjB;AACA,UAAU,2DAAU;AACpB,UAAU,2DAAU;AACpB;AACA;AACA,UAAU,4DAAW;AACrB;AACA,YAAY,sDAAO;AACnB;AACA;AACA;AACA,YAAY,2DAAU;AACtB;AACA,kBAAkB,oDAAK,IAAI,sDAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;AClHF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFiD;;AAEjB;AACE;AACA;AACA;AACU;;AAEvC;AACP;AACA,0BAA0B,sDAAO;AACjC;;AAEO;AACP;AACA;AACA;AACA,0EAA0E,oDAAK;AAC/E,2BAA2B,qDAAI;AAC/B;AACA;AACA;AACA,kCAAkC,oDAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,oDAAK;AAC/E,kCAAkC,sDAAK,yDAAyD,sDAAK;AACrG;AACA,eAAe,sDAAK;AACpB,2EAA2E,sDAAO;AAClF;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,aAAa,2DAAU;;AAEvB,wDAAwD,oDAAK,iCAAiC,oDAAK;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,sDAAO;AAChE;AACA;AACA,kCAAkC,oDAAK;AACvC,WAAW,sDAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oDAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oDAAK;AACnB;AACA;AACA;AACA;AACA;AACA,iCAAiC,oDAAK;AACtC;AACA,cAAc,2DAAU;AACxB;AACA;AACA,cAAc,2DAAU;AACxB;AACA;AACA;AACA,YAAY,2DAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oDAAK;AACvC,gBAAgB,oDAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sDAAK;AAC5B,uBAAuB,2DAAU;AACjC;AACA;AACA;AACA;AACA,gBAAgB,oDAAK;AACrB;AACA;AACA;AACA;AACA,cAAc,2DAAU;AACxB;AACA,iBAAiB,sDAAK,yBAAyB,sDAAO;AACtD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;AC7K0B;AACkB;;AAEvC;AACP,EAAE,sDAAgB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,QAAQ,2DAAU;AAClB,EAAE,yDAAmB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE,yDAAmB;AACrB,QAAQ,2DAAU;AAClB;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;AC/DF;AACA;;AAEwC;AACA;AACQ;AACF;;AAEK;AACjB;;AAE3B;AACP;AACA;AACA;AACA;;AAEA;AACA,cAAc,wDAAO;AACrB,eAAe,wDAAO;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;AACA;;AAEA,kBAAkB,2DAAU;AAC5B;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sCAAsC,oDAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,oDAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oDAAK;AACtC;AACA;AACA;AACA;AACA,aAAa,wDAAO;;AAEpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,2DAAU;AACtB;AACA;AACA,QAAQ;AACR;AACA,UAAU,4DAAW;;AAErB,wBAAwB,sDAAO;AAC/B;AACA;AACA,wCAAwC,oDAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,YAAY,2DAAU;AACtB;AACA;AACA;AACA;AACA;AACA,YAAY,sDAAO,GAAG,qDAAI;AAC1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;AC3KF;AACA;AACA;AACA;AACA;AACA;;AAE0D;AACtB;;AAEpC;AACA,UAAU,yBAAyB;AACnC,UAAU,mCAAmC;AAC7C,UAAU,mCAAmC;AAC7C,UAAU,oBAAoB;AAC9B,UAAU,oBAAoB;AAC9B;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,0BAA0B,kDAAG;AAC7B;AACA,GAAG;;AAEH,sCAAsC,sDAAO,KAAK,oDAAK;AACvD;AACA,GAAG,gCAAgC,oDAAK;AACxC;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA,6BAA6B;;AAE7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,sDAAK;AAChB,qBAAqB,oDAAK;AAC1B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;ACxK8C;AAClB;AACvB;AACiC;;;AAGjC;AACP,aAAa,4DAAW;AACxB;AACA;AACA;AACA;AACA,+CAA+C,kDAAG;AAClD;AACA;AACA;;AAEA,EAAE,uDAAiB;AACnB,iBAAiB,oDAAc;AAC/B,iBAAiB,oDAAc;AAC/B;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;AC3B4C;;AAEK;;AAEf;;AAEpC;AACA;AACO;AACP,qBAAqB;AACrB;AACA;;AAEO;;AAEP;AACA;;AAEA;AACA;AACA,aAAa,2DAAU;AACvB;;AAEA,uBAAuB,oDAAK;AAC5B;AACA;AACA;AACA,cAAc,sDAAK;AACnB,yBAAyB,oDAAK,+BAA+B,sDAAO,KAAK,oDAAK;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,oDAAK;AAC1B;AACA;AACA;AACA,UAAU,2DAAU;AACpB;;AAEA;AACA;AACA;AACA;;AAEO;AACP,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;AChIkE;AACpB;AACR;AACd;AACa;AACC;;AAExC;AACA,uCAAuC,yDAAU,gCAAgC,yDAAU,gEAAgE,yDAAU,8BAA8B,yDAAU;AAC7M;;AAEe;AACf;AACA;AACA,YAAY,wDAAO;AACnB;AACA,EAAE,qDAAW;AACb;AACA;AACA,gBAAgB,0CAAI;AACpB;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAW;AACvB;AACA;AACA;AACA;AACA,mBAAmB,kDAAG;AACtB,mBAAmB,kDAAG;AACtB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,yDAAe;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kDAAG;AACtB,mBAAmB,kDAAG;AACtB;AACA;AACA,GAAG,OAAO;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,qDAAW;AACtB;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3F4C;AACE;AACN;AACM;AACF;AACE;AACF;AACJ;AACM;AACJ;AACA;AACF;AACE;AACF;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACE;AACF;AACE;AACJ;AACI;AACI;AACJ;AAC5C,6BAAe,oCAAS;AACxB,6BAA6B,2DAAK;AAClC,6BAA6B,4DAAM;AACnC,6BAA6B,yDAAG;AAChC,6BAA6B,4DAAM;AACnC,6BAA6B,2DAAK;AAClC,6BAA6B,4DAAM;AACnC,6BAA6B,2DAAK;AAClC,6BAA6B,yDAAG;AAChC,6BAA6B,4DAAM;AACnC,6BAA6B,0DAAI;AACjC,6BAA6B,2DAAI;AACjC,6BAA6B,0DAAG;AAChC,6BAA6B,2DAAI;AACjC,6BAA6B,0DAAG;AAChC,6BAA6B,0DAAG;AAChC,6BAA6B,2DAAI;AACjC,6BAA6B,2DAAI;AACjC,6BAA6B,2DAAI;AACjC,6BAA6B,2DAAI;AACjC,6BAA6B,2DAAI;AACjC,6BAA6B,2DAAI;AACjC,6BAA6B,4DAAK;AAClC,6BAA6B,2DAAI;AACjC,6BAA6B,4DAAK;AAClC,6BAA6B,0DAAG;AAChC,6BAA6B,4DAAK;AAClC,6BAA6B,8DAAO;AACpC,6BAA6B,4DAAK;AAClC,C;;;;;;;;;;;;;;;;ACzDA;AAC8B;AACE;;;;AAIhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAAe,oCAAS;AACxB,aAAa,gDAAM;AACnB;AACA;AACA;AACA;AACA;AACA,EAAE,+CAAK;AACP;AACA;AACA;;;;;;;;;;;;;;;AChMA,iEAAe,WAAW,EAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtKA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UChHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;ACNA;AAEA;;AAGA,SAASS,UAAT,GAAsB;AAElB,MAAMC,SAAS,GAAG;AAEd,qBAAiB,KAFH;AAGd,mBAAe,qCAHD;AAId,sBAAkB,IAJJ;AAKd,oBAAgB,IALF;AAMd,yBAAqB,EANP;AAOd,sBAAkB,CACd;AAAE,eAAS,iBAAX;AAA8B,cAAQ,qCAAtC;AAA6E,kBAAY,YAAzF;AAAuG,kBAAY;AAAnH,KADc,EAEd;AAAE,eAAS,iBAAX;AAA8B,cAAQ,qCAAtC;AAA6E,kBAAY,YAAzF;AAAuG,kBAAY;AAAnH,KAFc,EAGd;AAAE,eAAS,YAAX;AAAyB,cAAQ,uBAAjC;AAA0D,kBAAY,YAAtE;AAAoF,kBAAY;AAAhG,KAHc,EAId;AAAE,eAAS,YAAX;AAAyB,cAAQ,uBAAjC;AAA0D,kBAAY,YAAtE;AAAoF,kBAAY;AAAhG,KAJc,EAKd;AAAE,eAAS,SAAX;AAAsB,cAAQ,aAA9B;AAA6C,kBAAY,SAAzD;AAAoE,kBAAY;AAAhF,KALc,EAMd;AAAE,eAAS,IAAX;AAAiB,cAAQ,MAAzB;AAAiC,kBAAY,IAA7C;AAAmD,kBAAY;AAA/D,KANc,CAPJ;AAgBd,qBAAiB,CAAE,CAAC,KAAH,EAAU,MAAV,CAhBH;AAkBd,yBAAqB,gCAlBP;AAoBd,mBAAe;AApBD,GAAlB;AAwBA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAf;AAEA,MAAMC,WAAW,GAAG,IAAIC,qEAAJ,EAApB,CA5BkB,CA4B+B;;AACjDD,aAAW,CAACnK,aAAZ,GAA4B,CAAE,CAAC,KAAH,EAAU,MAAV,EAAkB,CAAlB,CAA5B;AACAmK,aAAW,CAACJ,SAAZ,GAAwBA,SAAxB;AAEA,MAAM1Q,WAAW,GAAG,IAAI+Q,qEAAJ,CAA0BJ,MAA1B,EAAkCG,WAAlC,CAApB;AAEA,MAAME,aAAa,GAAG,IAAID,wEAAJ,EAAtB;AACA/Q,aAAW,CAACiR,YAAZ,CAAyB5T,QAAzB,CAAkC,YAAlC,EAAgD2T,aAAhD;AACH;;AAEDE,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAM;AAClCV,YAAU;AACb,CAFD,E","file":"bundle.js","sourcesContent":["/* \n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\n* Copyright 2021 Jose Juan Montes and contributors\n* MIT License (see LICENSE file)\n*/\n\n\nclass DDDViewerConfig {\n\n    tileUrlBase: string = \"/data/tiles/\";\n\n    sceneGroundLayers: any;\n\n    sceneMaterials: DDDMaterialsConfig[] = [];\n\n}\n\nclass DDDMaterialsConfig {\n    \n    value!: string;\n\n    textures!: string;\n    \n    splatmap!: string;\n}\n\n\nexport { DDDViewerConfig };\nexport { DDDMaterialsConfig };\n","/* \n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\n* Copyright 2021 Jose Juan Montes and contributors\n* MIT License (see LICENSE file)\n*/\n\n\n/**\n * ScenePosition represents\n */\nclass ScenePosition {\n\n    positionWGS84: number[] = [ 0, 0, 0 ];\n\n    positionTileZoomLevel: number = 0;\n\n    positionGroundHeight: number = 0;\n\n    positionHeading: number = 0;\n\n    positionTilt: number = 0;\n\n}\n\nexport { ScenePosition };","import { SceneViewer } from \"../SceneViewer\";\nimport { Base3DLayer } from \"./Base3DLayer\";\nimport { GeoTile3DLayer } from \"./GeoTile3DLayer\";\n\n\nclass LayerManager {\n    sceneViewer: SceneViewer;\n    layers: { [ key: string ]: Base3DLayer };\n\n    constructor( sceneViewer: SceneViewer ) {\n        this.sceneViewer = sceneViewer;\n        this.layers = {};\n    }\n\n    update( deltaTime: number ): void {\n        for ( const key in this.layers ) {\n            // Load tiles dynamically as needed\n            this.layers[key].update( deltaTime );\n        }\n    }\n\n    addLayer( key: string, layer: GeoTile3DLayer ): void {\n        layer.layerManager = this;\n        this.layers[key] = layer;\n    }\n}\n\nexport { LayerManager };\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { SceneLoader } from \"@babylonjs/core\";\nimport { SceneViewer } from \"../SceneViewer\";\n//import \"babylonjs-loaders\";\n\n\nclass QueueLoaderTask {\n    url?: string; \n    onSuccess?: any;\n    onFailure?: any;\n}\n\nclass QueueLoader {\n\n    sceneViewer: SceneViewer;\n    \n    queue: any[];\n\n    current: any[];\n\n    concurrentTasks: number = 2;  // 1 on mobile? 2 on PC?\n\n\n    constructor( sceneViewer: SceneViewer ) {\n        this.sceneViewer = sceneViewer;\n        this.queue = [];\n        this.current = [];\n    }\n\n    update(): void {\n        //loadNext();\n    }\n\n    processNext(): void {\n        if ( this.queue.length < 1 ) {\n            return;\n        }\n\n        const task: any = this.queue.pop();\n        this.processTask( task );\n    }\n\n    enqueueLoadModel( url: string, onSuccess: any, onFailure: any ): void {\n        const task = <QueueLoaderTask> { \"url\": url, \"onSuccess\": onSuccess, \"onFailure\": onFailure };\n        this.queue.push(task);\n        if ( this.current.length < this.concurrentTasks ) {\n            this.processNext();\n        }\n    }\n\n    processTask( task: {[key: string]: any} ): void {\n        const url: string = <string> task[\"url\"];\n        SceneLoader.ImportMesh( null, \"\", url, this.sceneViewer.scene,\n            ( newMeshes, particleSystems, skeletons ) => {\n                this.processNext();\n                task.onSuccess( newMeshes, particleSystems, skeletons );\n            },\n            () => {\n            },\n            ( scene, msg, ex ) => {\n                task.onFailure( scene, msg, ex );\n                this.processNext();\n            }\n        );\n    }\n\n    //loadResource() {\n    //}\n\n}\n\nexport { QueueLoader };","/* \n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\n* Copyright 2021 Jose Juan Montes and contributors\n* MIT License (see LICENSE file)\n*/\n\nimport { SceneViewer } from \"../SceneViewer\";\nimport { ViewerProcess } from \"./ViewerProcess\";\n\n\nclass ViewerProcessManager {\n\n    sceneViewer: SceneViewer;\n    currentProcesses: any[];\n\n    playing = true;\n    currentTasks = [];\n    time = 0.0;\n\n    constructor( sceneViewer: SceneViewer ) {\n\n        this.sceneViewer = sceneViewer;\n        this.currentProcesses = [];\n    }\n\n    update( deltaTime: number ): void {\n\n        if ( !( this.playing )) { return; }\n\n        this.time += deltaTime;\n\n        // Update all current tasks\n        for ( const proc of this.currentProcesses ) {\n            proc.update( deltaTime );\n        }\n\n        // Remove finished steps\n        this.currentProcesses = this.currentProcesses.filter( ( item ) => { return ( item.finished ); } );\n\n    }\n\n    add( process: ViewerProcess ): void {\n        //console.debug(\"Adding process: \", process);\n\n        // Sanity check\n        if (process.sceneViewer != this.sceneViewer) {\n            throw new Error(\"\");\n        }\n\n        this.currentProcesses.push( process );\n    }\n\n    remove( process: ViewerProcess ): void {\n        //console.debug(\"Removing process: \", process);\n        this.currentProcesses = this.currentProcesses.filter(( item ) => { return ( item !== process ); });\n    }\n\n\n}\n\nexport { ViewerProcessManager };\n\n","/* eslint-disable object-curly-spacing */\n/* eslint-disable array-bracket-spacing */\n/* eslint-disable indent */\n\n//import * as BABYLON from \"babylonjs\";\n//import * as BABYLONMAT from \"babylonjs-materials\";\n\n//import \"babylonjs-loaders\";\nimport { PBRCustomMaterial } from \"@babylonjs/materials\";\nimport { Color3, Scene, Texture, Vector2 } from \"@babylonjs/core\";\nimport { SceneViewer } from \"../SceneViewer\";\n\n/* eslint-disable no-unused-vars, no-var, no-undef, no-debugger, no-console,  */\n\n/**\n * From: https://forum.babylonjs.com/t/pbr-texture-splatting-up-to-64-textures/1994/28\n *  and: https://www.babylonjs-playground.com/#LIVRIY#58\n */\nclass TerrainMaterialWrapper {\n\n    sceneViewer: SceneViewer;\n    material: PBRCustomMaterial;\n    dedupDouble: boolean;\n\n    options: any;\n\n    tileIndexes = [];\n    shaderinjectpoint1 = \"\";\n    shaderinjectpoint2 = \"\";\n    shaderinjectpoint3 = \"\";\n    shaderinjectpoint4 = \"\";\n\n    numTilesHorizontal: number = 0;\n    numTilesVertical: number = 0;\n    totalTiles: number = 0;\n    tileScale: Vector2 = new Vector2(1, 1);\n\n    numSplatTilesHorizontal: number = 0;\n    numSplatTilesVertical: number = 0;\n    totalSplatTiles: number = 0;\n    splatScale: Vector2 = new Vector2(1, 1);\n\n    splatMap: Texture | null = null;\n    atlasBumpTexture: Texture | null = null;\n\n\n    constructor(sceneViewer: SceneViewer, splatmapTexture: Texture, atlasTexture: Texture, atlasNormalTexture: Texture, options: any) {\n        this.sceneViewer = sceneViewer;\n        this.dedupDouble = false;\n        this.material = this.initSplatMaterial( <Scene> this.sceneViewer.scene, splatmapTexture, atlasTexture, atlasNormalTexture, options );\n        //this.testSplatMaterial(scene);\n    }\n\n    initSplatMaterial(scene: Scene, splatMap: Texture, atlas: Texture, atlasnormals: Texture, options: any): PBRCustomMaterial {\n\n        //var that = this;\n        var defScale = 100.0;\n        if (!options){\n            options = {\n                numTilesHorizontal: 4,\n                numTilesVertical: 4,\n                numSplatTilesHorizontal:2,\n                numSplatTilesVertical:2,\n                //tileScale:[[20.0,20.0],[20.0,20.0],[20.0,20.0]],\n                splatInfos: {  // Positions is X / Y, Y grows upwards\n                    layers: [\n                        {\"name\": \"Ground\", \"position\": [0, 3], \"scale\": [defScale, defScale], \"displScales\": 1.0 },\n                        // ...\n                    ],\n                    positions:[\n                               [0.0, 3.0], [1.0, 3.0], [2.0, 3.0], [3.0, 3.0], // encoded by first splat (top left), first row (index 3 from bottom)\n                               [0.0, 2.0], [1.0, 2.0], [2.0, 2.0], [3.0, 2.0], // encoded by splat (top right), second row (index 2 from bottom)\n                               [0.0, 1.0], [1.0, 1.0], [2.0, 1.0], [3.0, 1.0], // encoded by third splat (down left), third row (index 1 starting from bottom)\n                               [0.0, 0.0], [1.0, 0.0], [2.0, 0.0], [3.0, 0.0], // encoded by splat (down right), last row (index 0 from bottom)\n                              ],\n                    scales:[[defScale * 0.75, defScale * 0.75], [defScale,defScale], [defScale,defScale], [defScale * 0.5, defScale * 0.5],\n                             [defScale * 0.5, defScale * 0.5], [defScale * 0.5, defScale * 0.5], [defScale,defScale], [defScale,defScale],\n                             [defScale * 1.5, defScale * 1.5], [defScale * 1.6, defScale * 1.6], [defScale,defScale], [defScale,defScale],  // Grass\n                             [defScale,defScale], [defScale * 0.25, defScale * 0.25], [defScale * 0.25, defScale * 0.25], [defScale,defScale]], // Sand, rock, rock orange\n                    displScales: [0.0, 0, 0.0, 0,\n                                  0, 0, 0, 0,\n                                  0, 0, 0, 0,\n                                  0.0, 0.0, 0.0, 0.0,],\n                    dedupScales: [1.0, 1.0, 1.0, 0.0,\n                                  0.0, 0.0, 1.0, 1.0,\n                                  1.5, 1.5, 1.5, 1.5,\n                                  1.5, 1.5, 0.5, 1.5]\n                }\n            };\n        }\n\n        this.options = options;\n        this.tileIndexes = [];\n        this.shaderinjectpoint1 = \"\";\n        this.shaderinjectpoint2 = \"\";\n        this.shaderinjectpoint3 = \"\";\n        this.shaderinjectpoint4 = \"\";\n\n        // 4x4 = 16\n        this.numTilesHorizontal = options.numTilesHorizontal;\n        this.numTilesVertical = options.numTilesVertical;\n        this.totalTiles = this.numTilesVertical*this.numTilesHorizontal;\n        this.tileScale = new Vector2(1.0/this.numTilesHorizontal,1.0/this.numTilesVertical);\n\n        // 2x2 = 4\n        this.numSplatTilesHorizontal = options.numSplatTilesHorizontal;\n        this.numSplatTilesVertical = options.numSplatTilesVertical;\n        this.totalSplatTiles = this.numSplatTilesVertical * this.numSplatTilesHorizontal;\n        this.splatScale = new Vector2(1.0/this.numSplatTilesHorizontal,1.0/this.numSplatTilesVertical);\n\n        this.shaderinjectpoint1 += \"vec2 splatScale = vec2(\"+this.splatScale.x+\",\"+this.splatScale.y+\");\\r\\n\";\n        this.shaderinjectpoint1 += \"vec2 scale = vec2(\"+this.tileScale.x+\",\"+this.tileScale.y+\");\\r\\n\";\n\n        //this.shaderinjectpoint3 += 'normalW = vec3(0.0, 1.0, 0.0);\\r\\n';\n\n        this.shaderinjectpoint3 += \"vec4 finalColor1 = baseColor1;\\r\\n\";\n        this.shaderinjectpoint3 += \"vec3 finalNormal1 = baseNormal1;\\r\\n\";\n        //this.shaderinjectpoint3 += 'finalColor1.a = 0.05;\\r\\n';\n\n        this.shaderinjectpoint4 += \"vec4 finalColor1 = baseColor1;\\r\\n\";\n        this.shaderinjectpoint4 += \"float finalRough1 = baseRough1;\\r\\n\";\n        //this.shaderinjectpoint4 += 'finalColor1.a = 0.05;\\r\\n';\n\n        var v = 0.0, h = 0.0;\n        for (let i=0; i < this.totalTiles; i++){\n\n            var tpos = Math.floor(i / 4);\n            h = tpos % this.numSplatTilesHorizontal;\n            v = (this.numSplatTilesHorizontal - 1) - Math.floor(tpos / this.numSplatTilesHorizontal);\n\n            if (i < this.totalTiles-1) {\n                 this.shaderinjectpoint3 += (`\n                     `+ \"//vec4 finalColor\" + (i + 2) + \" = finalColor\" + (i + 1) + \".a >= baseColor\" + (i + 2) + \".a ? finalColor\" + (i + 1) + \" : baseColor\" + (i + 2) + `;\n                     `+ \"//vec4 finalColor\" + (i + 2) + \" = finalColor\" + (i + 1) + \" * (1.0 - baseColor\" + (i + 2) + \".a) + baseColor\" + (i + 2) + \" * baseColor\" + (i + 2) + `.a;\n                     `+ \"vec4 finalColor\" + (i + 2) + \" = blend(finalColor\" + (i + 1) + \", \" + this.options.splatInfos.displScales[i].toFixed(5) + \", baseColor\" + (i + 2) + \", \" + this.options.splatInfos.displScales[i + 1].toFixed(5) + \"); \" + `\n                     //finalColor` + (i + 2) + `.a *= 0.95;\n\n                     //vec3 finalNormal` + (i + 2) + \" = finalColor\" + (i + 1) + \".a >= baseColor\" + (i + 2) + \".a ? finalNormal\" + (i + 1) + \" : baseNormal\" + (i + 2) + `;\n                     vec3 finalNormal` + (i + 2) + \" = blendNormal(finalColor\" + (i + 1) + \", \" + this.options.splatInfos.displScales[i].toFixed(5) + \", baseColor\" + (i + 2) + \", \" + this.options.splatInfos.displScales[i + 1].toFixed(5) + \", finalNormal\" + (i + 1) + \", baseNormal\" + (i + 2) + \"); \" + `\n                 `);\n\n                 this.shaderinjectpoint4 += (`\n                     `+ \"vec4 finalColor\" + (i + 2) + \" = blend(finalColor\" + (i + 1) + \", \" + this.options.splatInfos.displScales[i].toFixed(5) + \", baseColor\" + (i + 2) + \", \" + this.options.splatInfos.displScales[i + 1].toFixed(5) + \"); \" + `\n                     float finalRough` + (i + 2) + \" = finalColor\" + (i + 1) + \".a >= baseColor\" + (i + 2) + \".a ? finalRough\" + (i + 1) + \" : baseRough\" + (i + 2) + `;\n                 `);\n\n            }\n\n            // Get basecolors from tiles\n            this.shaderinjectpoint2 += \"vec2 uv\" + (i + 1) + \" = vec2((vAlbedoUV.x + \"+h+\".0) * splatScale.x, (vAlbedoUV.y + \"+v+\".0) * splatScale.y);\\r\\n\";\n            this.shaderinjectpoint2 += \"mat4 chanInfo\" + (i + 1) +\" = colInfo(vAlbedoUV, uv\" + (i + 1) + \", \" + this.options.splatInfos.dedupScales[i].toFixed(5) + \", vec2(\"+this.options.splatInfos.scales[i][0]+\",\"+this.options.splatInfos.scales[i][1]+\"), vec2(\"+this.options.splatInfos.positions[i][0] + \",\"+this.options.splatInfos.positions[i][1]+\"), \" + (i % 4) + \", scale, splatmap, albedoSampler, atlasNormalsSampler);\\r\\n\";\n            //this.shaderinjectpoint2 += 'vec4 baseColor' + (i + 1) +' = col(vAlbedoUV, uv' + (i + 1) + ', vec2('+this.options.splatInfos.scales[i][0]+','+this.options.splatInfos.scales[i][1]+'), vec2('+this.options.splatInfos.positions[i][0] + ','+this.options.splatInfos.positions[i][1]+'), ' + (i % 4) + ', scale, splatmap, albedoSampler, bumpSampler);\\r\\n';\n            this.shaderinjectpoint2 += \"vec4 baseColor\" + (i + 1) +\" = chanInfo\" + (i + 1) + \"[0];\\r\\n\";\n            this.shaderinjectpoint2 += \"vec3 baseNormal\" + (i + 1) +\" = vec3(chanInfo\" + (i + 1) + \"[1].x, chanInfo\" + (i + 1) + \"[1].y, chanInfo\" + (i + 1) + \"[1].z);\\r\\n\";\n            this.shaderinjectpoint2 += \"float baseRough\" + (i + 1) +\" = chanInfo\" + (i + 1) + \"[1].a;\\r\\n\";\n\n        }\n\n        //this.shaderinjectpoint3 += 'finalColor16 = col(vAlbedoUV, uv16, vec2(20.0, 20.0), vec2(1.0, 2.0), 0, scale, splatmap, albedoSampler);';\n\n        //this.shaderinjectpoint3 += 'normalW = perturbNormal(cotangentFrame, finalNormal' + (this.totalTiles) + ', 1.0);';\n        this.shaderinjectpoint3 += \"normalW = normalize(normalW * 0.75 + 0.25 * finalNormal\" + (this.totalTiles) + \");\";  // TODO: adding these vectors is incorrect\n        //this.shaderinjectpoint3 += 'normalW = normalW;';\n        //this.shaderinjectpoint3 += 'normalW.y *= -1.0;';\n        //this.shaderinjectpoint3 += 'result = finalNormal' + (this.totalTiles) + ';';\n        this.shaderinjectpoint3 += \"result = finalColor\" + (this.totalTiles) + \".rgb;\";\n\n        //this.shaderinjectpoint4 += 'normalW = normalW + finalNormal' + (this.totalTiles) + ';';  // TODO: adding these vectors is incorrect\n        this.shaderinjectpoint4 += \"reflectivityOut.roughness = finalRough\" + (this.totalTiles) + \";\";\n\n        this.splatMap = splatMap;\n        //this.needsUpdating = true;\n\n        \n        this.material = new PBRCustomMaterial(\"splatMaterial\", scene);\n        this.material.metallic = 0.0;\n        this.material.roughness = 0.95;\n        //this.material.twoSidedLighting = true;\n        //this.material.disableLighting = false;\n        this.material.ambientColor = new Color3(1.0, 1.0, 1.0); // Color3.Black();\n        //this.material.disableBumpMap = true;\n        //this.material.specularColor = new Color3(0.15, 0.15, 0.15); // Color3.Black();\n        //this.material.emissiveColor = new Color3(0.0, 0.0, 0.0); // Color3.Black();\n        //this.material.emissiveIntensity = 0.0;\n        //this.material.usePhysicalLightFalloff= false;\n\n        this.material.environmentIntensity = 1.0;  // This one is needed to avoid saturation due to env\n\n\n\n        this.material.albedoTexture = atlas;\n        if (atlasnormals !== null) {\n            //this.material.bumpTexture = atlasnormals;\n            this.atlasBumpTexture = atlasnormals;\n        }\n        this.material.AddUniform(\"splatmap\",\"sampler2D\", {});\n        this.material.AddUniform(\"atlasNormalsSampler\",\"sampler2D\",  {});\n\n\n        this.material.Fragment_Begin(\n             \"precision highp float;\\r\\n\"\n            +\"precision highp int;\\r\\n\"\n\n            +this.shaderinjectpoint1\n\n            +`\n            // Functions\n\n            float heightval(vec4 col) {\n                //return ((col.r + col.g + col.b) / 3.0);\n                return col.a;\n            }\n\n            /*\n            vec4 blend(vec4 texture1, float displScale1, vec4 texture2, float displScale2) {\n                return ((texture1.a * displScale1) > (texture2.a * displScale2) ? texture1 : texture2);\n            }\n            */\n\n            vec4 blend(vec4 texture1, float displScale1, vec4 texture2, float displScale2) {\n                if (texture2.a == 0.) return texture1;\n                if (texture1.a == 0.) return texture2;\n                float a1 = texture1.a + displScale1;\n                float a2 = texture2.a + displScale2;\n                float depth = 0.2;\n                float ma = max(texture1.a + a1, texture2.a + a2) - depth;\n\n                float b1 = max(texture1.a + a1 - ma, 0.0);\n                float b2 = max(texture2.a + a2 - ma, 0.0);\n\n                vec4 result = (texture1 * b1 + texture2 * b2) / (b1 + b2);\n                result.a = (texture1.a > 0. && texture2.a > 0.) ? (a1 + a2) / (2.0 * (b1 + b2)) : result.a;\n                return result;\n            }\n\n            vec3 blendNormal(vec4 texture1, float displScale1, vec4 texture2, float displScale2, vec3 normal1,  vec3 normal2) {\n                float a1 = texture1.a + displScale1;\n                float a2 = texture2.a + displScale2;\n                float depth = 0.2;\n                float ma = max(texture1.a + a1, texture2.a + a2) - depth;\n\n                float b1 = max(texture1.a + a1 - ma, 0.0);\n                float b2 = max(texture2.a + a2 - ma, 0.0);\n\n                vec3 result = (normal1 * b1 + normal2 * b2) / (b1 + b2);\n                result = normalize(result);\n\n                return result;\n            }\n\n\n            vec2 hash22(vec2 p)\n            {\n                p = p * mat2(127.1, 311.7, 269.5, 183.3);\n                p = -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n                return sin(p * 6.283);  // + timeScale\n            }\n\n            float interpolationNoise(vec2 p)\n            {\n                vec2 pi = floor(p);\n                vec2 pf = p-pi;\n\n                vec2 w = pf * pf * (3.-2. * pf);\n\n                float f00 = dot(hash22(pi + vec2(.0,.0)), pf-vec2(.0,.0));\n                float f01 = dot(hash22(pi + vec2(.0,1.)), pf-vec2(.0,1.));\n                float f10 = dot(hash22(pi + vec2(1.0,0.)), pf-vec2(1.0,0.));\n                float f11 = dot(hash22(pi + vec2(1.0,1.)), pf-vec2(1.0,1.));\n\n                float xm1 = mix(f00,f10,w.x);\n                float xm2 = mix(f01,f11,w.x);\n\n                float ym = mix(xm1,xm2,w.y);\n                return ym;\n\n            }\n\n            float perlinNoise2D(float x,float y)\n            {\n                int OCTAVES = 3;\n                float persistence = 0.5;\n                float sum = 0.0;\n                float frequency = 0.0;\n                float amplitude = 0.0;\n                for(int i = 0; i < OCTAVES; i++)\n                {\n                    frequency = pow(2.0, float(i));\n                    amplitude = pow(persistence, float(i));\n                    sum = sum + interpolationNoise(vec2(x * frequency, y * frequency)) * amplitude;\n                }\n\n                return sum;\n            }\n            `\n\n            //+\"vec4 col(vec2 vAlbedoUV, vec2 uvT, vec2 tile1Scale, vec2 tile1Position, int chanIdx, vec2 scale, sampler2D splatmap, sampler2D atlas, sampler2D atlasNormals) {\"\n            +\"mat4 colInfo(vec2 vAlbedoUV, vec2 uvT, float dedupScale, vec2 tile1Scale, vec2 tile1Position, int chanIdx, vec2 scale, sampler2D splatmap, sampler2D atlas, sampler2D atlasNormals) {\"\n\n                + `\n                float offsetInputScale = 2.0;\n                float offsetBaseScale = 0.25;\n                vec2 offset = vec2(perlinNoise2D(offsetInputScale * (uvT.x + 0.01 * tile1Position.x), offsetInputScale * (uvT.y + 0.1 * tile1Position.y)),\n                                   perlinNoise2D(offsetInputScale * (uvT.x + 0.07 * tile1Position.y), offsetInputScale * (-uvT.y + 0.13 * tile1Position.x)));\n                offset = offset * offsetBaseScale * dedupScale;\n                `\n\n                // if this.dedupDouble...\n                /*\n                + `\n                vec2 offset2 = vec2(perlinNoise2D(uvT.y - 0.08 * tile1Position.x, uvT.x + 0.04 * tile1Position.y),\n                                    perlinNoise2D(uvT.y + 0.05 * tile1Position.y, -uvT.x + 0.19 * tile1Position.x));\n                offset2 = offset * offsetBaseScale * dedupScale;\n                `\n                */\n\n                +\"vec2 scaledUv1 = fract((vAlbedoUV + offset) * tile1Scale);\"  // Curvy antitiling factor\n                +\"scaledUv1 = scaledUv1 * (254.0/256.0) + vec2(1.0 / 256.0, 1.0 / 256.0);\"\n                +\"vec2 uv1 = vec2((scaledUv1.x + tile1Position.x) * scale.x, (scaledUv1.y + tile1Position.y) * scale.y);\"\n\n                /*\n                +'vec2 scaledUv2 = fract((vAlbedoUV + offset2) * tile1Scale).yx;'  // Curvy antitiling factor\n                +'scaledUv2 = scaledUv2 * (254.0/256.0) + vec2(1.0 / 256.0, 1.0 / 256.0);'\n                +'vec2 uv2 = vec2((scaledUv2.x + tile1Position.x) * scale.x, (scaledUv2.y + tile1Position.y) * scale.y);'\n                */\n\n                + `\n                vec4 splatColor1 = texture2D(splatmap, uvT);\n                `\n\n                + `\n                float dedupMix = perlinNoise2D(100.0 * uvT.x, 100.0 * uvT.y);\n                dedupMix = dedupScale > 0.0 ? smoothstep(-0.02, 0.02, dedupMix) : 0.0;\n\n                //vec4 diffuse1Color = texture2DLodEXT(atlas, uv1, -1.0);\n                vec4 diffuseColorA = texture2D(atlas, uv1);\n\n                //vec4 diffuseColorB = texture2D(atlas, uv2);\n\n                //vec4 diffuse1Color = vec4(dedupMix, 0.0, 0.0, 1.0);  // Debug dedup mix factor\n                //vec4 diffuse1Color = diffuseColorA * dedupMix + diffuseColorB * (1.0 - dedupMix);\n                vec4 diffuse1Color = diffuseColorA;\n\n                vec4 diffuseNormalA = texture2D(atlasNormals, uv1);\n                diffuseNormalA.rgb = (diffuseNormalA.rgb * 2.0 - 1.0);\n                //vec4 diffuseNormalB = texture2D(atlasNormals, uv2);\n                //diffuseNormalB.rgb = (diffuseNormalB.rgb * 2.0 - 1.0);\n\n                /*\n                vec3 diffuse1NormalVec = normalize(diffuseNormalA.xyz * dedupMix + diffuseNormalB.xyz * (1.0 - dedupMix));\n                float diffuse1NormalAlpha = diffuseNormalA.a * dedupMix + diffuseNormalB.a * (1.0 - dedupMix);\n                vec4 diffuse1Normal = vec4(diffuse1NormalVec.x, diffuse1NormalVec.y, diffuse1NormalVec.z, diffuse1NormalAlpha);\n                */\n\n                vec4 diffuse1Normal = diffuseNormalA;\n                `\n\n                + (`\n                float blend = (chanIdx == 0 ? splatColor1.r : (chanIdx == 1 ? splatColor1.g : (chanIdx == 2 ? splatColor1.b : splatColor1.a)));\n                //blend = 1.0;\n\n                //diffuse1Color.rgb = splatColor1.rgb;\n                //diffuse1Color.a = blend;\n\n                 //diffuse1Color.a = ((blend > 0.0) ? (heightval(diffuse1Color) * blend) : 0.0);\n                 diffuse1Color.a = ((blend > 0.0) ? (diffuse1Color.a * blend) : 0.0);\n\n                 mat4 chanInfo = mat4(diffuse1Color, vec4(diffuse1Normal.x, diffuse1Normal.y, diffuse1Normal.z, diffuse1Normal.a), vec4(0.0), vec4(0.0));\n\n                `)\n\n                //+\"return diffuse1Color;\"\n                +\"return chanInfo;\"\n            +\"}\"\n        );\n\n        this.material.Fragment_MainBegin(\n            this.shaderinjectpoint2\n        );\n\n        this.material.Fragment_Custom_Albedo(\n            this.shaderinjectpoint3\n        );\n\n        this.material.Fragment_Custom_MetallicRoughness(\n            this.shaderinjectpoint4\n        );\n\n        this.material.onBindObservable.add(() => {\n            this.update();\n        });\n\n        return this.material;\n    }\n\n    update(): void {\n        this.material.getEffect().setTexture( \"splatmap\", this.splatMap );\n        this.material.getEffect().setTexture( \"atlasNormalsSampler\", this.atlasBumpTexture );\n        //this.material.reflectionTexture = this.envReflectionProbe.cubeTexture;\n        //this.material.reflectionTexture = this.scene.environmentTexture;\n        //this.sceneViewer.scene.environmentTexture = this.sceneViewer.envReflectionProbe.cubeTexture;\n        //this.scene.environmentTexture = this.envReflectionProbe.cubeTexture;\n    }\n\n}\n\nexport { TerrainMaterialWrapper };\n","/* \r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { SceneViewer } from \"../SceneViewer\";\r\n\r\n/**\r\n * A process that can be running in a DDDViewer instance.\r\n * Processes are updated every frame before drawing the scene.\r\n */\r\nabstract class ViewerProcess {\r\n\r\n    sceneViewer: SceneViewer;\r\n    finished: boolean;\r\n    time: number = 0;\r\n\r\n    constructor( sceneViewer: SceneViewer ) {\r\n        this.sceneViewer = sceneViewer;\r\n        this.finished = false;\r\n    }\r\n    \r\n    update( deltaTime: number ): void {\r\n        // TODO: Consider providing an (optional) initialize() lifecycle method for processes (to be run before the first frame)\r\n        //if (this.time == 0) initialize();\r\n        this.time += deltaTime;\r\n    }\r\n\r\n}\r\n\r\nexport { ViewerProcess }; \r\n\r\n\r\n\r\n","/* \r\n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\r\n* Copyright 2021 Jose Juan Montes and contributors\r\n* MIT License (see LICENSE file)\r\n*/\r\n\r\nimport { SceneViewer } from \"../../SceneViewer\";\r\nimport { ViewerProcess } from \"../ViewerProcess\";\r\n\r\nabstract class AnimationProcess extends ViewerProcess {\r\n\r\n    sceneViewer: SceneViewer;\r\n\r\n    animTime: number;\r\n    time: number;\r\n    interpFactor: number;\r\n\r\n    constructor( sceneViewer: SceneViewer, animTime?: number ) {\r\n        \r\n        super(sceneViewer);\r\n        \r\n        this.sceneViewer = sceneViewer;\r\n\r\n        this.time = 0.0;\r\n\r\n        this.animTime = animTime || 0;\r\n        this.interpFactor = 0.0;\r\n    }\r\n\r\n    update( deltaTime: number, factor: number = 0 ): void {\r\n        \r\n        // Avoid calling parent just to update deltaTime, do it here for performance\r\n        this.time += deltaTime;\r\n\r\n        this.interpFactor = ( this.animTime > 0 ) ? (( this.time ) / ( this.animTime - factor )) : 1.0;\r\n        if ( this.interpFactor > 1.0 ) this.interpFactor = 1.0;\r\n\r\n        if ( this.time >= this.animTime ) {\r\n            this.finished = true;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport { AnimationProcess };","/* \n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\n* Copyright 2021 Jose Juan Montes and contributors\n* MIT License (see LICENSE file)\n*/\n\n\nimport { ArcRotateCamera, Scalar, Vector3 } from \"@babylonjs/core\";\nimport { ScenePosition } from \"../../ScenePosition\";\nimport { SceneViewer } from \"../../SceneViewer\";\nimport { AnimationProcess } from \"./AnimationProcess\";\n\nclass CameraMovementAnimationProcess extends AnimationProcess {\n\n    moveStart: ScenePosition;\n    moveEnd: ScenePosition;\n\n    constructor( sceneViewer: SceneViewer, moveStart: ScenePosition, moveEnd: ScenePosition, animTime: number ) {\n\n        super(sceneViewer, animTime);\n\n        this.moveStart = moveStart;\n        this.moveEnd = moveEnd;\n    }\n\n    update( deltaTime: number ): void {\n        // Update camera interpolating between last pos and current\n        const move_start = this.moveStart;\n        const move_end = this.moveEnd;\n\n        const sceneViewer = this.sceneViewer;\n\n        AnimationProcess.prototype.update.call( this, deltaTime );\n        \n        // let interp_factor = ( this.animTime > 0 ) ? (( this.time ) / this.animTime ) : 1.0;\n        // if ( interp_factor > 1.0 ) {\n        //     interp_factor = 1.0;\n        // }\n\n        sceneViewer.viewerState.positionWGS84 = [ \n            Scalar.Lerp( move_start.positionWGS84[0], move_end.positionWGS84[0], this.interpFactor ),\n            Scalar.Lerp(move_start.positionWGS84[1], move_end.positionWGS84[1], this.interpFactor) ];\n        \n        \n        sceneViewer.viewerState.positionGroundHeight = Scalar.Lerp( move_start.positionGroundHeight, move_end.positionGroundHeight, this.interpFactor );\n        sceneViewer.viewerState.positionTilt = Scalar.Lerp( move_start.positionTilt, move_end.positionTilt, this.interpFactor );\n\n        let startHeading = move_start.positionHeading;\n        const targetHeading = move_end.positionHeading;\n        if ( Math.abs( move_end.positionHeading - move_start.positionHeading ) > 180.0 ) {\n            if ( move_end.positionHeading - move_start.positionHeading > 0 ) {\n                startHeading += 360;\n            } else{\n                startHeading -= 360;\n            }\n        }\n        const newPositionHeading = Scalar.Lerp( startHeading, targetHeading, this.interpFactor );\n        sceneViewer.viewerState.positionHeading = (( newPositionHeading % 360 ) + 360 ) % 360;\n        //sceneViewer.viewerState.positionHeading = 180 / Math.PI * Scalar.LerpAngle(move_start.positionHeading * Math.PI / 180.0, move_end.positionHeading * Math.PI / 180.0, interp_factor);\n\n        const positionScene = sceneViewer.wgs84ToScene( sceneViewer.viewerState.positionWGS84 );\n        const position = new Vector3( positionScene[0], sceneViewer.viewerState.positionGroundHeight + sceneViewer.viewerState.positionTerrainElevation + 1, positionScene[2]);\n        const rotation = new Vector3(( 90.0 - sceneViewer.viewerState.positionTilt ) * ( Math.PI / 180.0 ), sceneViewer.viewerState.positionHeading * ( Math.PI / 180.0 ), 0.0 );\n\n        sceneViewer.camera!.position = position;\n        if (sceneViewer.camera instanceof ArcRotateCamera) {\n            (<ArcRotateCamera> sceneViewer.camera!).rotation = rotation;\n        }\n\n    }\n\n}\n\nexport { CameraMovementAnimationProcess };\n","/* \n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\n* Copyright 2021 Jose Juan Montes and contributors\n* MIT License (see LICENSE file)\n*/\n\n\nimport { SceneViewer } from \"../../SceneViewer\";\nimport { AnimationProcess } from \"./AnimationProcess\";\n\nclass DateTimeAnimationProcess extends AnimationProcess {\n\n    dtStart: Date;\n    dtEnd: Date;\n\n    constructor( sceneViewer: SceneViewer, dtStart: Date, dtEnd: Date, animTime: number ) {\n        \n        super(sceneViewer, animTime);\n\n        this.dtStart = dtStart;\n        this.dtEnd = dtEnd;\n        \n        //console.debug(\"Datetime anim from \" + dtStart + \" to \" + dtEnd);\n        console.debug(\"TODO: Restore missing call sceneViewer.lightSetupFromDatePos();\"); \n    }\n\n    update( deltaTime: number ): void {\n\n        const sceneViewer = this.sceneViewer;\n\n        AnimationProcess.prototype.update.call( this, deltaTime );\n\n        const interpTime = ( this.dtEnd.getTime() / 1000 - this.dtStart.getTime() / 1000 ) * this.interpFactor;\n\n        sceneViewer.viewerState.positionDate = new Date( this.dtStart.getTime() + interpTime * 1000 );\n        \n        console.debug(\"TODO: Restore light setup from date position.\");\n        //sceneViewer.lightSetupFromDatePos();\n\n    }\n\n}\n\nexport { DateTimeAnimationProcess };\n","/* \n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\n* Copyright 2021 Jose Juan Montes and contributors\n* MIT License (see LICENSE file)\n*/\n\n\nimport { SceneViewer } from \"../../SceneViewer\";\nimport { AnimationProcess } from \"./AnimationProcess\";\n\n/**\n * \n */\nclass TextAnimationProcess extends AnimationProcess {\n\n    text: string;\n\n    /**\n     * \n     * @param text Text to animate.\n     * @param animTime Animation duration in seconds.\n     */\n    constructor( sceneViewer: SceneViewer, text: string, animTime: number ) {\n        super( sceneViewer, animTime );\n        this.text = text;\n    }\n\n    update( deltaTime: number ): void {\n        \n        super.update( deltaTime );\n\n        const sceneViewer = this.sceneViewer;\n        const textCompleteTime = 2.0;\n\n        AnimationProcess.prototype.update.call( this, deltaTime, textCompleteTime );\n\n        // let interp_factor = ( this.animTime > 0 )\n        //     ? (( this.time ) / ( this.animTime - textCompleteTime ))\n        //     : 1.0;\n\n        // if ( interp_factor > 1.0 ) {\n        //     interp_factor = 1.0;\n        // }\n\n        const interpChars = Math.ceil(( this.text.length ) * this.interpFactor );\n        const interpText = this.text.substr( 0, interpChars );\n        \n        sceneViewer.viewerState.sceneTitleText = interpText;\n        if ( this.finished ) {\n            sceneViewer.viewerState.sceneTitleText = null;\n        }\n    }\n}\n\nexport { TextAnimationProcess };\n","/* \n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\n* Copyright 2021 Jose Juan Montes and contributors\n* MIT License (see LICENSE file)\n*/\n\n\nimport { CameraMovementAnimationProcess } from \"../anim/CameraMoveAnimationProcess\";\nimport { DateTimeAnimationProcess } from \"../anim/DateTimeAnimationProcess\";\nimport { TextAnimationProcess } from \"../anim/TextAnimationProcess\";\n\nimport { SceneViewer } from \"../../SceneViewer\";\n// import ScenePosition from \"../ScenePosition\";\n/* eslint-disable no-console,  */\n\ntype Step = (string | number)[];\ntype Sequence = Step[];\n\nclass ViewerSequencer {\n\n    sceneViewer: SceneViewer;\n    seq: Sequence | null;\n    time: number;\n    index: number;\n    playing: boolean;\n\n    waitTime: number;\n\n    constructor( sceneViewer: SceneViewer ) {\n\n        this.sceneViewer = sceneViewer;\n\n        this.seq = null;\n        this.playing = false;\n        this.time = 0.0;\n        this.index = 0;\n        this.waitTime = 0.0;\n    }\n\n    update( deltaTime: number ): void {\n\n        if ( !( this.playing )) { return; }\n\n        this.time += deltaTime;\n\n        if ( this.waitTime > 0.0 ) {\n            this.waitTime -= deltaTime;\n            return;\n        }\n\n        // Run all possible steps\n        while ( this.index < this.seq!.length && this.waitTime <= 0.0 ) {\n            const step = this.seq![this.index];\n            this.index++;\n            this.runStep( step );\n        }\n\n    }\n\n    runStep( step: Step ): void {\n\n        console.debug( \"Running step: \", step );\n\n        const command: string | number = step[0];\n        //if ( ! ((command instanceof String )) throw new Error( \"No command specified.\" );\n\n        if ( command === \"m\" ) {\n            const posString: string | null = this.sceneViewer.positionString();\n\n            if ( posString ) {\n                const move_start = this.sceneViewer.parsePositionString( posString );\n                const move_end = this.sceneViewer.parsePositionString( posString );\n                const animTime = <number> step[2];\n                const moveAnimationProcess = new CameraMovementAnimationProcess( this.sceneViewer, move_start, move_end, animTime );\n                this.sceneViewer.processes.add( moveAnimationProcess );\n            }\n\n        } else if ( command === \"dt\" ) {\n            const dtStart = this.sceneViewer.viewerState.positionDate;\n            console.debug( dtStart );\n            const dtEnd = new Date( dtStart );\n            console.debug( dtEnd );\n            dtEnd.setHours( parseInt( (<string> step[1]).split( \":\" )[0]));\n            dtEnd.setMinutes( parseInt( (<string> step[1]).split( \":\" )[1]));\n            console.debug( dtEnd );\n            const animTime = <number> step[2];\n            const process = new DateTimeAnimationProcess( this.sceneViewer, dtStart, dtEnd, animTime );\n            this.sceneViewer.processes.add( process );\n\n        } else if ( command === \"t\" ) {\n            const text = <string> step[1];\n            const animTime = <number> step[2];\n            const process = new TextAnimationProcess( this.sceneViewer, text, animTime );\n            this.sceneViewer.processes.add( process );\n\n        } else if ( command === \"s\" ) {\n            this.waitTime = <number> step[1];\n\n\n            /*} else if ( command === \"u\" ) {\n            const url = step[1];\n            // Do not change URL if in settings\n            if ( this.sceneViewer.app.$route.name !== \"sceneTools\" ) {\n                this.sceneViewer.app.$router.push( url );\n            }*/\n\n\n\n        } else if ( command === \"goto\" ) {\n            this.index = <number> step[1];\n\n        } else if ( (<string>command).startsWith( \"#\" )) {\n            // Command is a comment. Ignore.\n        } else {\n            // Unknown step type\n            console.debug( \"Invalid sequence step: \", step );\n        }\n    }\n\n    play( seq: Sequence ): void {\n        console.debug( \"Playing sequence: \", seq );\n\n        this.sceneViewer.camera!.detachControl();\n        this.sceneViewer.viewerState.sceneViewModeShow = false;\n        this.seq = seq;\n        this.playing = true;\n        this.time = 0.0;\n        this.index = 0;\n    }\n}\n\nexport { ViewerSequencer };\n","/* \n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D models\n* Copyright 2021 Jose Juan Montes and contributors\n* MIT License (see LICENSE file)\n*/\n\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n//import { GLTF2 } from \"@babylonjs/loaders/glTF\";\nimport \"@babylonjs/loaders/glTF\"; \n\nimport { AbstractMesh, ArcRotateCamera, BaseTexture, BoundingInfo, Camera, CascadedShadowGenerator, Color3, CubeTexture, DefaultRenderingPipeline, DirectionalLight, DynamicTexture, Engine, LensFlare, LensFlareSystem, LensRenderingPipeline, Material, Matrix, Mesh, MeshBuilder, PBRBaseMaterial, PBRMaterial, Quaternion, Ray, ReflectionProbe, Scene, SceneInstrumentation, SceneLoader, SceneOptions, Space, StandardMaterial, TargetCamera, Texture, TransformNode, UniversalCamera, Vector2, Vector3 } from \"@babylonjs/core\";\nimport { WaterMaterial } from \"@babylonjs/materials\";\nimport { Coordinate } from \"ol/coordinate\";\nimport * as extent from \"ol/extent\";\n//import {register} from 'ol/proj/proj4';\nimport { createXYZ, extentFromProjection } from \"ol/tilegrid\";\nimport TileGrid from \"ol/tilegrid/TileGrid\";\nimport { DDDMaterialsConfig } from \"./DDDViewerConfig\";\n// import * as SunCalc from \"suncalc\";\n// <reference types=\"suncalc\" />\nimport { LayerManager } from \"./layers/LayerManager\";\nimport { QueueLoader } from \"./loading/QueueLoader\";\nimport { ViewerProcessManager } from \"./process/ViewerProcessManager\";\n//import SkyMaterialWrapper from \"./render/SkyboxMaterial\";\nimport { TerrainMaterialWrapper } from \"./render/TerrainMaterial\";\nimport { ScenePosition } from \"./ScenePosition\";\nimport { ViewerSequencer } from \"./process/sequencer/ViewerSequencer\";\nimport { ViewerState } from \"./ViewerState\";\nimport { transform } from \"ol/proj\";\n//import { Proj } from \"proj4\";\nimport * as proj4 from \"proj4\";\n\n\nclass SceneViewer {\n    camera: Camera | null = null;\n    viewerState: ViewerState;\n\n    engine: Engine;\n    scene: Scene;\n    sceneInstru: SceneInstrumentation | null = null;\n\n    sequencer: ViewerSequencer;\n    processes: ViewerProcessManager;\n\n    highlightMeshes: Mesh[] = [];\n    //materialHighlight: Material | null = null;\n    materialHighlight: StandardMaterial | null = null;\n\n    walkMode: boolean = false;\n    useSplatMap: boolean = true;\n\n    layerManager: LayerManager;\n    queueLoader: QueueLoader;\n\n    originShiftWGS84: number[];\n    //projection: proj4.InterfaceProjection;\n    projection: proj4.Converter;\n\n    tileGrid: TileGrid;\n\n    catalog: { [key: string]: Mesh }\n    catalog_materials: { [key: string]: Material }\n    instanceRoots: { [key: string]: any }\n    depends: Mesh[];\n\n    ambientColorNight: Color3 = new Color3( 0, 0, 0.3 );\n    ambientColorDay: Color3 = new Color3( 0.70, 0.70, 0.7 );\n\n    colorLightLamp: Color3 = new Color3( 250 / 255, 244 / 255, 192 / 255 );\n    colorLightRed: Color3 = new Color3( 512 / 255, 0 / 255, 0 / 255 );\n    colorLightGreen: Color3 = new Color3( 50 / 255, 512 / 255, 50 / 255 );\n    colorLightOrange: Color3 = new Color3( 255 / 255, 157 / 255, 0 / 255 );\n\n    lastDateUpdate: number = new Date().getTime();\n\n    selectedMesh: Mesh | null = null;\n    sceneSelectedMeshId: string | null = null;\n\n    materialWater: WaterMaterial | null = null;\n    envReflectionProbe: ReflectionProbe | null = null;\n    light: DirectionalLight | null = null;\n    shadowGenerator: CascadedShadowGenerator | null = null;\n    lensFlareSystem: LensFlareSystem | null = null;\n    textureDetailSurfaceImp: Texture | null = null;\n    skybox: Mesh | null = null;\n\n    splatmapAtlasTexture: Texture | null = null;\n    splatmapAtlasNormalsTexture: Texture | null = null;\n    \n    _previousLampPatOn: boolean | null = null;\n    _geolocationWatchId: string | null = null;\n\n\n    constructor( canvas: HTMLCanvasElement, viewerState: ViewerState ) {\n        this.viewerState = viewerState;\n        \n        this.layerManager = new LayerManager( this );\n        this.queueLoader = new QueueLoader( this );\n\n        this.originShiftWGS84 = [ 0, 0 ];\n        this.projection = proj4.default( \"EPSG:4326\" );\n\n        this.tileGrid = createXYZ({\n            extent: extentFromProjection( \"EPSG:3857\" ),\n            //maxResolution: options.maxResolution,\n            //maxZoom: options.maxZoom,\n            //minZoom: options.minZoom,\n            //tileSize: options.tileSize,\n        });\n\n        this.catalog = {};\n        this.catalog_materials = {};\n        this.instanceRoots = {};\n\n        // Dependencies to not yet loaded objects, in order to process them\n        this.depends = [];\n\n        this.lastDateUpdate = new Date().getTime();\n\n        this.processes = new ViewerProcessManager( this );\n        this.sequencer = new ViewerSequencer( this );\n\n        // Associate a Babylon Engine to it (engine:  canvas, antialiasing, options, adaptToDeviceRatio)\n        this.engine = new Engine( canvas, true ); // , null, true); // , { stencil: true });\n\n        console.warn( \"Scene option 'useGeometryIdsMap' is disabled.\" );\n        this.scene = new Scene( this.engine, { useGeometryIdsMap: true } as SceneOptions );\n\n        //that.scene = createScene(engine, canvas);\n        //this.scene.freezeActiveMeshes(true);  // affects too many things, causes wrong behavior (skybox, etc)\n        //this.octree = null;\n\n        this.initialize();\n\n    }\n\n    private initialize(): void {\n\n        //const that = this;\n\n        // Get the canvas element from the DOM.\n        //const canvas = that.$el.querySelector('.ddd-scene');\n        //const canvas = document.getElementById(\"renderCanvas\");\n\n        //console.debug(that.viewerState);\n        const coords = this.viewerState.positionWGS84;\n        this.registerProjectionForCoords( coords );\n\n\n        this.scene.pointerMovePredicate = function() { return false; };\n        this.scene.pointerDownPredicate = function() { return false; };\n\n        //this.sceneInstru = null;\n        this.sceneInstru = new SceneInstrumentation( this.scene );\n\n        //that.highlightLayer = new HighlightLayer(\"hl1\", that.scene);\n\n\n        const water = new WaterMaterial( \"water\", this.scene, new Vector2( 512, 512 ));\n        //water.backFaceCulling = true;\n        //water.bumpTexture = new Texture(\"/textures/waterbump.png\", that.scene);\n        water.windForce = 5;\n        water.waveHeight = 0.1;\n        water.waveSpeed = 100.0;\n        water.bumpHeight = 0.05;\n        water.waveLength = 10.0;\n        //water.alpha = 0.8;\n        //water.useSpecularOverAlpha = true;\n        //water.useReflectionOverAlpha = true;\n        //water.transparencyMode = 2;  // 2  ALPHA_BLEND  3;  // ALPHA_TEST_AND_BLEND\n        //water.renderingGroupId = 3;\n        water.colorBlendFactor = 0.2;\n        this.scene.setRenderingAutoClearDepthStencil( 3, false, false, false );\n        //water.addToRenderList(ground);\n        //let waterOcean = createOceanMaterial(this.scene);\n        this.materialWater = water;\n\n        /*\n        that.materialGrass = new StandardMaterial(\"bawl\", that.scene);\n        that.textureGrass = new GrassProceduralTexture(\"textbawl\", 256, that.scene);\n        that.materialGrass.ambientTexture = that.textureGrass;\n        */\n\n\n        // Environment\n        this.envReflectionProbe = null;\n        if ( this.viewerState.sceneEnvironmentProbe !== null ) {\n            this.envReflectionProbe = new ReflectionProbe( \"envReflectionProbe\", this.viewerState.sceneEnvironmentProbe, this.scene, true, true );\n            this.envReflectionProbe.refreshRate = 6;\n            this.envReflectionProbe.position = new Vector3( 0, 0, 0 );\n\n            // Assign to a material to see it\n            //var pbr = new PBRMaterial('envReflectionTestMaterial', this.scene);\n            //pbr.reflectionTexture = this.envReflectionProbe.cubeTexture;\n\n            // Force PBR material udpate and show for debugging\n            //var sphere = Mesh.CreateSphere(\"envReflectionTestSphere\", 16, 5, this.scene);\n            //sphere.position.y = 150;\n            //sphere.material = pbr;\n\n            // Note that material needs to be added to the camera custom render targets to be updated\n\n            this.scene.environmentTexture = this.envReflectionProbe.cubeTexture;\n\n        } else {\n            //this.scene.createDefaultEnvironment();\n            //var hdrTexture = new CubeTexture.CreateFromPrefilteredData(\"/textures/environment.env\", this.scene);\n            const hdrTexture = CubeTexture.CreateFromPrefilteredData( \"/textures/country.env\", this.scene );\n            this.scene.environmentTexture = hdrTexture;\n        }\n\n        // Skybox\n        this.loadSkybox( this.viewerState.sceneSkybox );\n\n\n        /*\n        const camera = new ArcRotateCamera(\"Camera\", -Math.PI / 2, Math.PI / 2-0.5, 500, Vector3.Zero(), that.scene);\n        camera.attachControl(canvas, true);\n        camera.minZ = 1;\n        //camera.maxZ = 2500;  // Automatic? see focusOn()\n        camera.lowerRadiusLimit = 30;\n        camera.upperRadiusLimit = 1000;\n        camera.upperBetaLimit = Math.PI/2;\n        camera.panningSensibility = 2;\n        */\n\n        // Camera\n        this.selectCameraFree();\n        //this.selectCameraWalk();\n        //this.selectCameraOrbit();\n\n        // Render Pipeline config and Postprocessing\n        //this.initRenderPipeline();\n        //this.updateRenderPipeline();\n\n\n        // Lighting\n\n        //this.scene.ambientColor = this.ambientColorDay.clone();\n        //this.scene.ambientColor = new Color3(0, 0, 0);\n        this.scene.ambientColor = new Color3( 0.3, 0.3, 0.3 );\n        /*\n        that.lightHemi = new HemisphericLight(\"lightHemi\", new Vector3(-0.5, 1, -1), that.scene);\n        that.lightHemi.intensity = 1.15;\n        that.lightHemi.diffuse = new Color3(0.95, 0.95, 1);\n        that.lightHemi.specular = new Color3(1, 1, 0.95);\n        that.lightHemi.groundColor = new Color3(0.95, 1, 0.95);\n        */\n        this.light = new DirectionalLight( \"light\", new Vector3( 0.3, -0.5, 0.5 ).normalizeToNew(), this.scene );\n        this.light.diffuse = new Color3( 0.95, 0.95, 1.00 );\n        this.light.specular = new Color3( 1, 1, 0.95 );\n        this.light.intensity = 2.5;\n\n        /*\n        that.light2 = new DirectionalLight(\"light2\", new Vector3(-0.3, -0.5, -0.5).normalizeToNew(), that.scene);\n        that.light.diffuse = new Color3(223 / 255, 242 / 255, 196 / 255);\n        that.light.specular = new Color3(1, 1, 0.95);\n        that.light2.intensity = 1.5;\n        */\n\n\n        this.shadowGenerator = null;\n        if ( this.viewerState.sceneShadowsEnabled ) {\n            this.shadowGenerator = new CascadedShadowGenerator( 1024, this.light );\n            //that.shadowGenerator.debug = true;\n            this.shadowGenerator.shadowMaxZ = 500;\n            this.shadowGenerator.autoCalcDepthBounds = true;\n            this.shadowGenerator.penumbraDarkness = 0.8;\n            this.shadowGenerator.lambda = 0.5;\n            //that.shadowGenerator.depthClamp = false;\n            //that.shadowGenerator.freezeShadowCastersBoundingInfo = true;\n            this.shadowGenerator.splitFrustum();\n        }\n\n\n        const lensFlareEmitter: Mesh = new Mesh( \"lensFlareEmitter\", this.scene );\n        this.lensFlareSystem = new LensFlareSystem( \"lensFlareSystem\", lensFlareEmitter, this.scene );\n        const flareScale = 0.5;\n        new LensFlare( flareScale * 0.2, 0, new Color3( 1, 1, 1 ), \"/textures/Flare2.png\", this.lensFlareSystem );\n        new LensFlare( flareScale * 0.5, 0.2, new Color3( 0.5, 0.5, 1 ), \"/textures/flare3.png\", this.lensFlareSystem );\n        new LensFlare( flareScale * 0.2, 1.0, new Color3( 1, 1, 1 ), \"/textures/flare3.png\", this.lensFlareSystem );\n        new LensFlare( flareScale * 0.4, 0.4, new Color3( 1, 0.5, 1 ), \"/textures/flare.png\", this.lensFlareSystem );\n        new LensFlare( flareScale * 0.1, 0.6, new Color3( 1, 1, 1 ), \"/textures/flare3.png\", this.lensFlareSystem );\n        new LensFlare( flareScale * 0.3, 0.8, new Color3( 1, 1, 1 ), \"/textures/Flare2.png\", this.lensFlareSystem );\n\n        // Setup lighting, flares, etc.\n        //this.lightSetupFromDatePos();\n\n        //var ssao = new SSAORenderingPipeline('ssaopipeline', that.scene, 0.75);\n\n        this.materialHighlight = new StandardMaterial( \"materialHighlight\", this.scene );\n        this.materialHighlight.diffuseColor = new Color3( 1, 1, 1 );\n        //that.materialHighlight.specularColor = new Color3(1, 1, 1);\n        this.materialHighlight.emissiveColor = new Color3( 1.0, 1.0, 1. );\n        this.materialHighlight.wireframe = true;\n        this.materialHighlight.disableLighting = true;\n        this.materialHighlight.backFaceCulling = true;\n\n        // The first parameter can be used to specify which mesh to import. Here we import all meshes\n        //SceneLoader.ImportMesh('', '', https://models.babylonjs.com/', 'alien.glb', that.scene, function (newMeshes) {\n        //    console.debug(\"Preparing model.\");\n        //    that.scene.createDefaultCameraOrLight(true);\n        //    that.scene.activeCamera.attachControl(canvas, false);\n        //    that.scene.activeCamera.alpha += Math.PI; // camera +180°\n        //});\n\n        this.textureDetailSurfaceImp = new Texture( \"/textures/SurfaceImperfections12_ddd.png\", this.scene );\n\n        this.loadCatalog( \"/assets/catalog.glb\", false );\n\n        this.loadTextures();\n\n        // Render every frame\n        this.engine.runRenderLoop(() => {\n            if ( ! this.scene ) { return; }\n            this.update( this.engine!.getDeltaTime() / 1000.0 );\n            this.scene.render();\n        });\n\n        // Shaders\n        /*\n        Effect.ShadersStore[\"customVertexShader\"]= `\n            precision highp float;\n\n            // Attributes\n            attribute vec3 position;\n            attribute vec3 normal;\n            attribute vec2 uv;\n\n            // Uniforms\n            uniform mat4 worldViewProjection;\n            uniform float time;\n\n            // Varying\n            //varying vec2 vUV;\n\n            void main(void) {\n                vec3 p = position;\n                p.x = p.x + sin(2.0 * position.y + time);\n                p.y = p.y + sin(time + 4.0);\n                gl_Position = worldViewProjection * vec4(p, 1.0);\n\n                //vUV = uv;\n        }`;\n        */\n\n        // Performance\n        // Avoid clear calls, as there's always a skybox\n        this.scene.autoClear = false; // Color buffer\n        this.scene.autoClearDepthAndStencil = false; // Depth and stencil\n        this.scene.blockMaterialDirtyMechanism = true;\n\n        this.scene.setRenderingAutoClearDepthStencil( 1, false, false, false );  // For objects in front of layer 0 (buildings and instances)\n\n    }\n\n    loadSkybox( baseUrl: string ): void {\n        // Remove skybox\n        if ( this.skybox ) {\n\n            this.materialWater!.getRenderList()!.length = 0;\n            if ( this.viewerState.sceneEnvironmentProbe ) {\n                this.envReflectionProbe!.renderList!.length = 0;\n            }\n\n            this.skybox.dispose();\n            this.skybox = null;\n        }\n\n        // Set skybox\n        if ( baseUrl === \"@dynamic\" )  {\n            /*\n            const skybox = Mesh.CreateSphere( \"skyBox\", 30, 3000, <Scene> this.scene );\n            \n            const skyboxMaterial = new SkyMaterialWrapper( this.scene ).material;\n            skyboxMaterial.disableDepthWrite = true;\n\n            skybox.material = skyboxMaterial;\n            skybox.infiniteDistance = true;\n            skybox.applyFog = false;\n            this.skybox = skybox;\n            */\n\n        } else if ( baseUrl !== null ) {\n\n            const skybox = MeshBuilder.CreateBox( \"skyBox\", { size:3000.0 }, this.scene );\n            const skyboxMaterial = new StandardMaterial( \"skyBox\", <Scene> this.scene );\n            skyboxMaterial.backFaceCulling = false;\n            skyboxMaterial.reflectionTexture = new CubeTexture( baseUrl, <Scene> this.scene );\n            skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n            skyboxMaterial.diffuseColor = new Color3( 0, 0, 0 );\n            skyboxMaterial.specularColor = new Color3( 0, 0, 0 );\n            skyboxMaterial.disableDepthWrite = true;\n\n            skybox.material = skyboxMaterial;\n            skybox.infiniteDistance = true;\n            skybox.applyFog = false;\n            this.skybox = skybox;\n        }\n\n        if ( this.skybox ) {\n            this.skybox.renderingGroupId = 0;  // Seems needs to be rendered in group 0 for it to be applied to the reflections on water\n            //this.scene.setRenderingAutoClearDepthStencil(2, false, false, false);\n            this.envReflectionProbe!.renderList!.push( this.skybox );\n            this.materialWater!.addToRenderList( this.skybox );\n        }\n\n    }\n\n    showFullScreen(): void {\n        if ( this.engine ) {\n            this.engine.switchFullscreen( true );\n        }\n    }\n\n    showDebugView(): void {\n        // Show BabylonJS Inspector\n        this.scene!.debugLayer.show({ overlay: true });\n    }\n\n    loadCatalog( filename: string, loadMaterials: boolean ): void {\n        console.debug( \"Loading catalog: \" + filename );\n        SceneLoader.ImportMesh( null, filename, \"\", this.scene, //this.scene,\n            // onSuccess\n            ( newMeshes: AbstractMesh[], _particleSystems: any, _skeletons: any ) => { \n                //console.log(\"GLB loaded\", newMeshes);\n                this.loadCatalogFromMesh( <Mesh>newMeshes[0], loadMaterials );\n                newMeshes[0].setParent( null );\n                newMeshes[0].setEnabled( false );\n                //newMeshes[0].isVisible = false;\n                //newMeshes[0].dispose();\n\n                this.processDepends();\n            },\n            ( _event ) => { },\n            ( _scene, _msg, ex ) => {\n                console.debug( \"Could not load scene catalog: \" + filename, ex );\n            }\n        );\n    }\n\n    processDepends(): void {\n        console.debug( \"Processing dependencies\" );\n        const dependsCopy = [ ...this.depends ];\n        for ( const dep of dependsCopy ) {\n            this.depends = this.depends.filter( item => item !== dep );\n            this.processMesh( dep, dep );\n        }\n    }\n\n    loadCatalogFromMesh( mesh: Mesh, loadMaterials: boolean ): void {\n\n        if ( mesh && mesh.metadata && mesh.metadata.gltf && mesh.metadata.gltf.extras ) {\n            const metadata = mesh.metadata.gltf.extras;\n\n            // Add color material\n            /*\n            let key = metadata['ddd:material'];\n            let mat = this.catalog_materials[key];\n            if (key && key.startsWith(\"Color\") && mesh.material && !mat) {\n                console.debug(\"Adding color material \" + mesh.material + \" to catalog: \" + key);\n                mat = mesh.material;\n                mat.name = key;\n                this.catalog_materials[key] = mat;\n                //mesh.material = mat;\n            } else if (key && mat) {\n                //mesh.material.dispose();\n                //mesh.material = mat;\n            }\n            */\n\n            if ( metadata[\"ddd:instance:key\"]) {\n                //this.processMesh(mesh, mesh);\n                this.addMeshToCatalog( metadata[\"ddd:instance:key\"], mesh );\n            }\n\n            if ( metadata[\"ddd:material\"] && ( loadMaterials || ( !( metadata[\"ddd:material\"] in this.catalog_materials )))) {\n                try {\n                    this.addMaterialToCatalog( metadata[\"ddd:material\"], mesh, true );\n                } catch ( e ) {\n                    console.debug( \"Error adding material to catalog: \", mesh, e );\n                }\n            }\n        }\n\n        for ( const child of mesh.getChildren()) {\n            this.loadCatalogFromMesh( <Mesh> child, loadMaterials );\n        }\n    }\n\n    addMaterialToCatalog( key: string, mesh: Mesh, force: boolean = false ): void {\n        if ( mesh.material ) {\n            //console.debug(mesh.material);\n            //mesh.material.id = key;\n            mesh.material.name = key;\n\n            if ( this.catalog_materials[key] && !force ) {\n                console.debug( \"Material already in catalog: \" + key );\n            } else {\n\n                //console.debug(\"Adding material to catalog: \" + key);\n                this.catalog_materials[key] = mesh.material;\n                const metadata = mesh.metadata.gltf.extras;\n\n                let dontFreeze = false;\n\n                if ( metadata[\"ddd:material\"] === \"WaterBasicDaytime\" ) {\n                    /*\n                    mesh.material.alpha = 0.7;\n                    mesh.material.transparencyMode = 2;  // ALPHA_BLEND\n                    mesh.material.useSpecularOverAlpha = true;\n                    mesh.material.useReflectionOverAlpha = true;\n                    mesh.material.bumpTexture = new Texture(\"/textures/waterbump.png\", this.scene);\n                    */\n\n                    // This \"WaterInstanced\" is to avoid WaterMaterial from being used in instances (seems to fail, causing the material to disappear).\n                    this.catalog_materials[\"WaterInstanced\"] = mesh.material;\n                    this.catalog_materials[\"WaterInstanced\"].alpha = 0.7;\n                    this.catalog_materials[\"WaterInstanced\"].transparencyMode = 2;\n                    this.catalog_materials[\"WaterInstanced\"].freeze();\n                    \n                    console.debug(\"NOT ADDING WATERMATERIAL TO CATALOG\");\n                    //this.catalog_materials[key] = <WaterMaterial> this.materialWater;\n                    \n                    dontFreeze = true;\n\n                } else if ( metadata[\"ddd:material\"] === \"Water4Advanced\" ) {\n                    /*\n                    mesh.material.alpha = 0.8;\n                    mesh.material.transparencyMode = 2;  // ALPHA_BLEND\n                    mesh.material.useSpecularOverAlpha = true;\n                    mesh.material.useReflectionOverAlpha = true;\n                    mesh.material.bumpTexture = new Texture(\"/textures/waterbump.png\", this.scene);\n                    */\n                    console.debug(\"NOT ADDING WATERMATERIAL TO CATALOG\");\n                    //this.catalog_materials[key] = <Material> this.materialWater;\n                    dontFreeze = true;\n\n                } else if ( mesh.material instanceof PBRMaterial ) {\n\n                    //mesh.material.specularColor = Color3.Lerp(mesh.material.albedoColor, Color3.White(), 0.2);\n                    //mesh.material.albedoColor = Color3.Lerp(mesh.material.albedoColor, Color3.White(), 0.5);\n                    //mesh.material.albedoColor = Color3.FromHexString(mesh.metadata.gltf.extras['ddd:material:color']).toLinearSpace();\n                    //mesh.material.albedoColor = Color3.FromHexString(mesh.material.albedoColor).toLinearSpace();\n\n                    let uvScale = 0.25;\n\n                    if (( metadata[\"ddd:material\"] === \"Roadline\" ) ||\n                        ( metadata[\"ddd:material\"] === \"Roadmarks\" ) ||\n                        ( metadata[\"ddd:material\"] === \"Fence\" ) ||\n                        ( metadata[\"ddd:material\"] === \"TrafficSigns\" ) ||\n                        ( metadata[\"ddd:material\"] === \"RoadRailway\" ) ||\n                        ( metadata[\"ddd:material\"] === \"Flowers Blue\" ) ||\n                        ( metadata[\"ddd:material\"] === \"Flowers Roses\" ) ||\n                        ( metadata[\"ddd:material\"] === \"Grass Blade\" ) ||\n                        ( metadata[\"ddd:material\"] === \"Grass Blade Dry\" )) {\n                        uvScale = 1.0;\n                    }\n                    if (( metadata[\"ddd:material\"] === \"Fence\" )) {\n                        uvScale = 0.5;\n                        mesh.material.backFaceCulling = false;\n                        if ( mesh.material.albedoTexture && mesh.material instanceof PBRBaseMaterial ) {\n                            ( <Texture> mesh.material.albedoTexture ).vOffset = 0.0725;\n                        }\n                        if ( mesh.material.bumpTexture ) { ( <Texture> mesh.material.bumpTexture ).vOffset = 0.0725; }\n                    }\n\n                    if ( uvScale !== 1.0 ) {\n                        if ( mesh.material.albedoTexture && mesh.material instanceof PBRBaseMaterial ) {\n                            ( <Texture> mesh.material.albedoTexture ).uScale = uvScale;\n                            ( <Texture> mesh.material.albedoTexture ).vScale = uvScale;\n                            if ( mesh.material.bumpTexture ) {\n                                ( <Texture> mesh.material.bumpTexture ).uScale = uvScale;\n                                ( <Texture> mesh.material.bumpTexture ).vScale = uvScale;\n                            }\n                        }\n                    }\n\n                    /*\n                    if ((metadata['ddd:material'] !== 'Flo') &&\n                        (metadata['ddd:material'] !== 'TrafficSigns') &&\n                        (metadata['ddd:material'] !== 'RoadRailway') &&\n                        (metadata['ddd:material'] !== 'Flowers Blue') &&\n                        (metadata['ddd:material'] !== 'Flowers Roses') &&\n                        (metadata['ddd:material'] !== 'Grass Blade')) {\n                        mesh.material.albedoTexture.uScale = 0.25;\n                        mesh.material.albedoTexture.vScale = 0.25;\n                        if (mesh.material.bumpTexture) {\n                            mesh.material.bumpTexture.uScale = 0.25;\n                            mesh.material.bumpTexture.vScale = 0.25;\n                        }\n                    }\n                    */\n\n                    // Detail map\n                    mesh.material.detailMap.texture = this.textureDetailSurfaceImp;\n                    ( <Texture> mesh.material.detailMap.texture ).uScale = 1 / 256;\n                    ( <Texture> mesh.material.detailMap.texture ).vScale = 1 / 256;\n                    mesh.material.detailMap.isEnabled = true;\n                    mesh.material.detailMap.diffuseBlendLevel = 0.15; // 0.2\n                    //mesh.material.detailMap.bumpLevel = 1; // between 0 and 1\n                    //mesh.material.detailMap.roughnessBlendLevel = 0.05; // between 0 and 1\n                    //mesh.material.environmentIntensity = 0.2;  // This one is needed to avoid saturation due to env\n                    //mesh.material.freeze();  // Careful: may prevent environment texture change (?)\n                }\n\n                if ( metadata[\"zoffset\"]) {\n                    this.catalog_materials[key].zOffset = metadata[\"zoffset\"];\n                }\n\n                //mesh.material.ambientColor = mesh.material.albedoColor; // new Color3(1, 1, 1);\n                if ( !dontFreeze ) {\n                    this.catalog_materials[key].freeze();\n                }\n\n            }\n        } else {\n            console.debug( \"No material found in mesh: \" + mesh.id + \" (key=\" + key + \")\" );\n        }\n    }\n\n    addMeshToCatalog( key: string, mesh: Mesh ): void {\n        if ( this.catalog[key]) {\n            console.debug( \"Mesh already in catalog: \" + key );\n        } else {\n            //console.debug(\"Adding mesh to catalog: \" + key);\n            this.catalog[key] = mesh;\n            mesh.setEnabled( false );\n            mesh.parent = null;\n        }\n    }\n\n    processMesh( root: Mesh, mesh: Mesh ): Mesh | null {\n        //console.debug(\"Processing mesh: \" + mesh.id)\n\n        const rootmd = root.metadata.tileInfo;\n\n        //mesh.isPickable = false;\n\n        if ( !( \"_splatmapMaterial\" in root ) && this.useSplatMap && this.viewerState.sceneTextureSet && this.viewerState.sceneTextureSet.indexOf( \"default\" ) >= 0 ) {\n            if (( \"metadata\" in mesh ) && ( \"tileCoords\" in mesh.metadata )) {\n                const coords = root.metadata[\"tileCoords\"];\n                //console.debug(\"Creating splat material for: \", coords);\n\n                const tileUrlBase = this.viewerState.dddConfig.tileUrlBase;\n                const splatmapUrl = tileUrlBase + \"17\" + \"/\" + coords[1] + \"/\" + coords[2] + \".splatmap-16chan-0_15-256.png\";\n\n                const splatmapTexture = new Texture( splatmapUrl, this.scene );\n\n                const matwrapper = new TerrainMaterialWrapper( this, splatmapTexture, <Texture> this.splatmapAtlasTexture, <Texture> this.splatmapAtlasNormalsTexture, {});\n                ( <any> root )._splatmapMaterial = matwrapper.material;\n                \n                \n                let uvScale = [ 225, 225 ]; //[225, 225]; // [113.36293971960356 * 2, 112.94475604662343 * 2];\n                const bounds = rootmd ? rootmd[\"tile:bounds_m\"] : null;\n                if ( bounds ) {\n                    //console.debug(\"Bounds: \", bounds);\n                    uvScale = [ bounds[2] - bounds[0], bounds[3] - bounds[1] ];\n                }\n                \n                // Seems to work well (+1 +1 / +1 -1)\n                ( <Texture> matwrapper.material.albedoTexture ).uScale = (( 1.0 / ( uvScale[0])) * ( 127/128 )) ; // + 1\n                ( <Texture> matwrapper.material.albedoTexture ).vScale = (( 1.0 / ( uvScale[1])) * ( 127/128 )) ; // + 1\n                ( <Texture> matwrapper.material.albedoTexture ).uOffset = 0.5; //  + (1 / uvScale[0]);\n                ( <Texture> matwrapper.material.albedoTexture ).vOffset = 0.5 - ( 0.5/128 ); // 1 / root._splatmapMaterial.albedoTexture.getSize().height);\n                /*if (mesh.material.bumpTexture) {\n                    mesh.material.bumpTexture.uScale = 1.0 / uvScale[0];\n                    mesh.material.bumpTexture.vScale = 1.0 / uvScale[1];\n                    mesh.material.bumpTexture.uOffset = 0.5;\n                    mesh.material.bumpTexture.vOffset = 0.5;\n                }*/\n\n                //root._splatmapMaterial.freeze();\n\n            }\n        }\n\n        let replaced = false;\n        if ( mesh && mesh.metadata && mesh.metadata.gltf && mesh.metadata.gltf.extras ) {\n\n            const metadata = mesh.metadata.gltf.extras;\n\n            mesh.isBlocker = true;\n\n            if ( metadata[\"ddd:material\"] && !( \"ddd:text\" in metadata )) {\n                let key = metadata[\"ddd:material\"];\n\n                if ( key === \"WaterBasicDaytime\" ) {\n                    //console.debug(mesh);\n                    if ( metadata[\"ddd:path\"].startsWith( \"Catalog Group\" )) {\n                        key = \"WaterInstanced\";\n                    }\n                }\n\n                let mat = this.catalog_materials[key];\n\n                if ( !( key in this.catalog_materials ) && mesh.material ) {\n                    mesh.material.id = key + \"(Auto)\";\n                    mesh.material.name = key;\n                    this.addMaterialToCatalog( metadata[\"ddd:material\"], mesh );\n                    mat = this.catalog_materials[key];\n\n                    if ( !( <any>root in this.depends )) {\n                        this.depends.push( root );\n                    }\n                }\n\n                // Add color material\n                /*\n                if (key.startsWith(\"Color\") && mesh.material && !mat) {\n                    console.debug(\"Adding color material \" + mesh.material + \" to catalog: \" + key);\n                    mat = mesh.material;\n                    mat.name = key;\n                    this.catalog_materials[key] = mat;\n                    //mesh.material = null;\n                }\n                */\n\n                // TODO: Indicate when to splat in metadata\n                if ( this.useSplatMap && this.viewerState.sceneTextureSet &&\n                    (( \"ddd:material:splatmap\" in metadata ) && metadata[\"ddd:material:splatmap\"] === true ) &&\n                    ( !( \"ddd:layer\" in metadata ) || metadata[\"ddd:layer\"] === \"0\" ) &&\n                    ( metadata[\"ddd:material\"] === \"Park\" || metadata[\"ddd:material\"] === \"Grass\" || metadata[\"ddd:material\"] === \"Terrain\" ||\n                     metadata[\"ddd:material\"] === \"Ground\" || metadata[\"ddd:material\"] === \"Ground Clear\" || metadata[\"ddd:material\"] === \"Dirt\" || metadata[\"ddd:material\"] === \"Garden\" ||\n                     metadata[\"ddd:material\"] === \"Forest\" || metadata[\"ddd:material\"] === \"Sand\" ||\n                     metadata[\"ddd:material\"] === \"Rock\" || metadata[\"ddd:material\"] === \"Rock Orange\" ||\n                     ( metadata[\"ddd:material\"] === \"WayPedestrian\" && ( !( \"ddd:area:type\" in metadata ) || ( metadata[\"ddd:area:type\"] !== \"stairs\" ))) ||\n                     metadata[\"ddd:material\"] === \"Wetland\" || metadata[\"ddd:material\"] === \"Asphalt\" )) {\n\n                    if (( <any>root )._splatmapMaterial ) {\n                        if ( mesh.material && mesh.material !== ( <any>root )._splatmapMaterial ) {\n                            mesh.material.dispose();\n                        }\n\n                        mesh.material = ( <any>root )._splatmapMaterial;\n                        ( <any>root )._splatmapMaterial.renderingGroupId = 1;\n\n                        // Expensive probe\n                        //this.envReflectionProbe.renderList.push(mesh);\n                    } else {\n                        //this.depends.push(root);\n                        //return;\n                    }\n\n\n                } else if (( key in this.catalog_materials )) {  // && mesh.material\n\n                    if ( mesh.material && mesh.material !== mat && mat ) {\n                        const mmat = mesh.material;\n                        mesh.material = null;\n                        mmat.dispose();  // Causes white materials, but cleans all outstanding materials\n                    }\n                    if ( mat ) {\n                        mesh.material = mat;\n                    }\n\n                } else {\n                    //console.debug(\"Material not found in catalog: \" + key);\n                    // TODO: Will never happen if not showing materials (dependencies should be to the particular instance or material)\n\n                    this.depends.push( root );\n                }\n            }\n\n\n            if ( metadata[\"ddd:light:color\"]) {\n                replaced = true;\n                /*\n                var light = new PointLight(\"light_\" + mesh.id, mesh.position, this.scene);\n                light.parent = mesh.parent;\n                light.position = mesh.position;\n                light.position.y = light.position.z + 1;\n                light.intensity = 20;\n                light.diffuse = new Color3(1, 0, 0);\n                light.specular = new Color3(0, 1, 0);\n                */\n\n                mesh.parent = null;\n                mesh.dispose();\n\n            } else if ( metadata[\"ddd:text\"]) {\n\n                let newMesh = null;\n\n                const showText = this.viewerState.sceneTextsEnabled;\n                if ( showText ) {\n                    // Text should be (possibly) exported as meshes by the generator.\n                    newMesh = MeshBuilder.CreatePlane( \"text_\" + mesh.id, { size: 2.4, sideOrientation: Mesh.DOUBLESIDE, updatable: true }, this.scene );\n                    newMesh.parent = null;\n                    newMesh.parent = mesh.parent; // .parent;\n                    newMesh.scaling = mesh.scaling.clone();\n                    newMesh.rotationQuaternion = mesh.rotationQuaternion!.clone();\n                    newMesh.position = mesh.position.clone();\n\n                    newMesh.rotate( Vector3.Right(), Math.PI / 2.0, Space.LOCAL );\n                    newMesh.scaling.y *= 0.35;\n\n                    //Create dynamic texture\n                    const texture = new DynamicTexture( \"dynamicTexture_text_\" + mesh.id, { width:256, height:128 }, this.scene, true );\n                    //var textureContext = texture.getContext();\n                    const font = \"bold 36px serif\";\n                    const text = metadata[\"ddd:text\"];\n                    texture.drawText( text, 128.0 - ( text.length * 8 ), 60, font, \"blue\", \"transparent\", true, true );\n\n                    const material = new StandardMaterial( \"Mat\" + mesh.id, <Scene> this.scene );\n                    material.diffuseTexture = texture;\n                    material.diffuseTexture.hasAlpha = true;\n                    material.useAlphaFromDiffuseTexture = true;\n                    material.transparencyMode = 1;  // ALPHA_TEST\n                    newMesh.material = material;\n\n                    newMesh.isPickable = false;\n                    //newMesh.metadata = {gltf: {extras: metadata}};  // Doesn't seem to work and/or freezes the app\n                    //delete newMesh.metadata['ddd:text'];\n                }\n\n                mesh.parent = null;\n                mesh.dispose();\n                mesh = <Mesh> newMesh;\n\n            } else if ( metadata[\"ddd:instance:key\"]) {\n                replaced = true;\n                const key = metadata[\"ddd:instance:key\"];\n\n                // Ignored objects (devel purpose)\n                const ignored_keys: string[] = [];  // [\"building-window\"]\n                if ( ignored_keys.indexOf( key ) >= 0 ) {\n                    mesh.parent = null;\n                    mesh.dispose();\n                    return null;\n                }\n\n                if ( this.catalog[key]) {\n\n                    if ( \"ddd:instance:buffer:matrices\" in metadata ) {\n                        this.instanceAsThinInstanceBuffers( key, root, mesh );\n                    } else {\n                        //this.instanceAsNode(root, key, mesh);\n                        this.instanceAsThinInstance( key, root, mesh );  // note this removes the mesh\n                    }\n\n                } else {\n                    // Instance not found. Mark this root for re processing and exit.\n                    //console.debug(\"Instance key not found in catalog: : \" + key);\n                    this.depends.push( root );\n                    return null;\n                }\n            }\n\n            this.depends.push( root );\n\n        }\n\n        //mesh.occlusionType = AbstractMesh.OCCLUSION_TYPE_OPTIMISTIC;\n\n        if ( mesh ) {  // && !replaced\n\n            /*\n            if (mesh.simplify && mesh.getTotalVertices() > 0 && !replaced) {\n                mesh.simplify([{ quality: 0.1, distance: 100 }, ], false, SimplificationType.QUADRATIC);\n            }\n            */\n\n            mesh.cullingStrategy = AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\n            //mesh.freezeWorldMatrix();\n\n            //if (mesh.material) { mesh.material.needDepthPrePass = true; }  // causes some objects with textures to show black\n\n            for ( const children of mesh.getChildren()) {\n                this.processMesh( root, <Mesh> children );\n            }\n        }\n\n        /*\n        if (mesh === root) {\n            //this.octree = this.scene.createOrUpdateSelectionOctree(); // capacity, maxDepth);\n        }\n        */\n\n        return mesh;\n    }\n\n    instanceAsThinInstance( key: string, root: Mesh, node: Mesh ): void {\n\n        const instance = this.catalog[key];\n        const meshes = instance.getChildMeshes();\n\n        for ( const mesh of meshes ) {\n\n            if ( mesh && mesh.metadata && mesh.metadata.gltf && mesh.metadata.gltf.extras ) {\n                const metadata = mesh.metadata.gltf.extras;\n                if ( metadata[\"ddd:light:color\"]) {\n                    // TODO: include the child instance\n                    continue;\n                }\n            }\n\n            // Get root\n            const instanceRootKey = root.id + \"_\" + key + \"_\" + mesh.id; // root.id + \"_\" +  // TODO! do not clone but keep groups!\n            let meshInstanceRoot = this.instanceRoots[instanceRootKey];\n            if ( !meshInstanceRoot ) {\n                //console.debug(\"Creating instanceroot for: \" + instanceRootKey);\n                instance.setEnabled( true );\n                meshInstanceRoot = mesh.clone( instanceRootKey, null, true );\n                meshInstanceRoot = meshInstanceRoot.makeGeometryUnique();  // Can we do this without cloning geometry? do thin instances work that way?\n\n                const cloneMat = meshInstanceRoot.material;\n                if ( cloneMat ) {\n                    meshInstanceRoot.material = null;\n                    cloneMat.dispose();\n                }\n\n                //meshInstanceRoot.metadata.gltf.extras['ddd:instance:key'] = \"_MESH_INSTANCE_ROOT\";  // WARN:seems this extras are being shared among instances\n                meshInstanceRoot.toLeftHanded();\n                //meshInstanceRoot.rotate(Vector3.Up(), Math.PI / 2);\n                //meshInstanceRoot.scaling = new Vector3(1, 1, -1);\n                this.instanceRoots[instanceRootKey] = meshInstanceRoot;\n                meshInstanceRoot.parent = root;\n                //meshInstanceRoot.position = root.computeWorldMatrix(true);  // Seems to cause problems, but should not :? (freezing may be involved)\n\n                this.processMesh( meshInstanceRoot, meshInstanceRoot );\n\n                // Enable shadows for the instances if shadows are set\n                if ( this.shadowGenerator ) {\n                    this.shadowGenerator.getShadowMap()!.renderList!.push( meshInstanceRoot );\n                }\n\n                //meshInstanceRoot.setEnabled(false);\n                //meshInstanceRoot.addLODLevel(200, null);\n\n                instance.setEnabled( false );\n                //instance.dispose();\n            }\n\n            // Transform\n            /*\n            let localPos = mesh.position;\n            let localRot = mesh.rotationQuaternion;\n            let localScaling = mesh.scaling;\n            localScaling.x = -1 * localScaling.x;\n            var meshMatrix = Matrix.Compose(localScaling, localRot, localPos);\n            */\n\n            //var adaptMatrix = Matrix.Compose(new Vector3(1, 1, -1), [0, 1, 0, 0], [0, 0, 0]);\n\n            const scaleMatrix = Matrix.Compose( new Vector3( 1, 1, -1 ), new Quaternion( 0, 0, 0, 0 ), new Vector3( 0, 0, 0 )); //Matrix.Scaling(-1, 1, 1);\n\n            const nodeMatrix = node.computeWorldMatrix( true );\n            const meshInstanceRootMatrix = meshInstanceRoot.computeWorldMatrix( true );\n            //let matrix = adaptMatrix.multiply(nodeMatrix); // meshMatrix.multiply(nodeMatrix);\n            let matrix = scaleMatrix.multiply( nodeMatrix );\n            matrix = matrix.multiply( Matrix.Invert( meshInstanceRootMatrix ));\n            //console.debug(\"Creating instance: \" + meshInstanceRoot.id);\n            meshInstanceRoot.thinInstanceAdd( matrix );\n            meshInstanceRoot.freezeWorldMatrix();\n\n            //let tmpcopy = meshInstanceRoot.clone();\n            //tmpcopy.position = localPos;\n            //tmpcopy.rotationQuaternion = localRot;\n            //tmpcopy.parent = meshInstanceRoot;\n\n        }\n\n        node.parent = null;\n        node.dispose();\n\n    }\n\n    instanceAsThinInstanceBuffers( key: string, root: Mesh, node: Mesh ): void {\n\n        console.debug( \"Creating thin instance buffers for: \" + key );\n\n        const instance = this.catalog[key];\n        const meshes = instance.getChildMeshes();\n        const metadataNode = node.metadata.gltf.extras;\n\n        for ( const mesh of meshes ) {\n\n            const metadata = mesh.metadata.gltf.extras;\n            if ( metadata[\"ddd:light:color\"]) {\n                // TODO: include the child instance\n                continue;\n            }\n\n            // Get root\n            const instanceRootKey = root.id + \"_\" + key + \"_\" + mesh.id; // root.id + \"_\" +  // TODO! do not clone but keep groups!\n            let meshInstanceRoot = this.instanceRoots[instanceRootKey];\n            if ( !meshInstanceRoot ) {\n                //console.debug(\"Creating instanceroot for: \" + instanceRootKey);\n                instance.setEnabled( true );\n                meshInstanceRoot = mesh.clone( instanceRootKey, null, true );\n                meshInstanceRoot = meshInstanceRoot.makeGeometryUnique();  // Can we do this without cloning geometry? do thin instances work that way?\n\n                const cloneMat = meshInstanceRoot.material;\n                if ( cloneMat ) {\n                    meshInstanceRoot.material = null;\n                    cloneMat.dispose();\n                }\n\n                //meshInstanceRoot.metadata.gltf.extras['ddd:instance:key'] = \"_MESH_INSTANCE_ROOT\";  // WARN:seems this extras are being shared among instances\n                //meshInstanceRoot.toRightHanded();\n                //meshInstanceRoot.rotate(Vector3.Right(), Math.PI / 2);\n\n                // This section is critical. The bakeCurrentTransformIntoVertices in the middle is too.\n                meshInstanceRoot.scaling = new Vector3( 1, 1, -1 );\n                meshInstanceRoot.rotate( Vector3.Up(), -Math.PI / 2 );\n                meshInstanceRoot.bakeCurrentTransformIntoVertices();\n                meshInstanceRoot.rotate( Vector3.Forward(), -Math.PI / 2 );\n                meshInstanceRoot.rotate( Vector3.Right(), Math.PI );\n                meshInstanceRoot.bakeCurrentTransformIntoVertices();\n                //meshInstanceRoot.flipFaces(true);\n\n                this.instanceRoots[instanceRootKey] = meshInstanceRoot;\n                meshInstanceRoot.parent = root;\n                //meshInstanceRoot.position = root.computeWorldMatrix(true);  // Seems to cause problems, but should not :? (freezing may be involved)\n\n                this.processMesh( meshInstanceRoot, meshInstanceRoot );\n\n                // Enable shadows for the instances if shadows are set\n                if ( this.shadowGenerator ) {\n                    this.shadowGenerator.getShadowMap()!.renderList!.push( meshInstanceRoot );\n                }\n\n                //meshInstanceRoot.setEnabled(false);\n                //meshInstanceRoot.addLODLevel(200, null);\n\n                instance.setEnabled( false );\n                //instance.dispose();\n            }\n\n            //var adaptMatrix = Matrix.Compose(new Vector3(1, 1, -1), [0, 1, 0, 0], [0, 0, 0]);\n\n            const bufferMatrices = metadataNode[\"ddd:instance:buffer:matrices\"];\n\n            //const scaleMatrix = Matrix.Compose( new Vector3( 1, 1, -1 ), new Quaternion( 0, 0, 0, 0 ), new Vector3( 0, 0, 0 )); //Matrix.Scaling(-1, 1, 1);\n            //let nodeMatrix = node.computeWorldMatrix(true);\n            //let meshInstanceRootMatrix = meshInstanceRoot.computeWorldMatrix(true);\n            //let matrix = adaptMatrix.multiply(nodeMatrix); // meshMatrix.multiply(nodeMatrix);\n            //let matrix = scaleMatrix.multiply(nodeMatrix);\n            //matrix = matrix.multiply(Matrix.Invert(meshInstanceRootMatrix));\n            //console.debug(\"Creating instance: \" + meshInstanceRoot.id);\n            //var idx = meshInstanceRoot.thinInstanceAdd(matrix);\n            const bufferMatricesArray = new Float32Array( bufferMatrices.length );\n            bufferMatricesArray.set( bufferMatrices );\n            meshInstanceRoot.thinInstanceSetBuffer( \"matrix\", bufferMatricesArray, 16, true );\n\n            meshInstanceRoot.freezeWorldMatrix();\n\n            //let tmpcopy = meshInstanceRoot.clone();\n            //tmpcopy.position = localPos;\n            //tmpcopy.rotationQuaternion = localRot;\n            //tmpcopy.parent = meshInstanceRoot;\n\n        }\n\n        node.parent = null;\n        node.dispose();\n\n    }\n\n    instanceAsNode( key: string, _root: Mesh, mesh: Mesh ): void {\n        //console.debug(\"Replacing mesh: \" + key);\n        const newMesh = new TransformNode( mesh.id + \"_instance\", this.scene );  // new Mesh(\"chunk_\" + tileKey, this.scene);\n        //let newMesh = mesh;\n        //newMesh.geometry = null;\n        newMesh.parent = mesh.parent;\n        newMesh.position = mesh.position;\n        newMesh.rotationQuaternion = mesh.rotationQuaternion;\n        newMesh.scaling = mesh.scaling;\n\n        //newMesh.absoluteScaling = mesh.absoluteScaling;\n        /*for (let cc of mesh.getChildren()) {\n            cc.parent = null;\n            cc.dispose();\n        }*/\n        if ( !newMesh.metadata ) { newMesh.metadata = {}; }\n        if ( mesh.metadata && mesh.metadata.gltf ) {\n            newMesh.metadata.gltf = mesh.metadata.gltf;\n            //newMesh.metadata.gltf.extras['ddd:instance:key'] = null;\n        }\n        mesh.dispose();\n        this.catalog[key].setEnabled( true );\n        const instance = this.catalog[key].clone(); // createInstance(mesh.id + \"_instanced\");\n        this.catalog[key].setEnabled( false );\n        instance.metadata.gltf.extras[\"ddd:instance:key\"] = null;\n        instance.id = mesh.id + \"_clone\";\n        //instance.isVisible = true;\n        instance.parent = newMesh;\n        newMesh.rotate( new Vector3( 1, 0, 0 ), Math.PI / 2, Space.LOCAL );\n        instance.setEnabled( true );\n        //mesh = newMesh;\n    }\n\n    /**\n     * Dispose this DDDViewer instance.\n     * @todo Ensure all events, processes and objects are disconnected and disposed.\n     */\n    dispose(): void {\n        if ( this.scene ) {\n            console.debug( \"Disposing SceneViewer scene.\" );\n            this.scene.dispose();\n            //this.scene = null;\n        }\n        if ( this.engine ) {\n            console.debug( \"Disposing SceneViewer 3D engine (BabylonJS).\" );\n            this.engine.dispose();\n            //this.engine = null;\n        }\n    }\n\n    /**\n     * DDDViewer main update callback, this is called every frame by the engine.\n     * Children object update method is called recursively from here (sequencer, processes, layers).\n     * @param deltaTime \n     */\n    update( deltaTime: number ): void {\n\n        const positionWGS84 = this.positionWGS84();\n        if ( positionWGS84 ) {\n            this.viewerState.positionWGS84 = positionWGS84;\n\n            this.viewerState.positionTileZoomLevel = 17;\n            if ( this.viewerState.positionGroundHeight !== null && this.viewerState.positionGroundHeight < 50 ) {\n                this.viewerState.positionTileZoomLevel = 18;\n            }\n\n            this.updateElevation();\n            const terrainElevation = this.viewerState.positionTerrainElevation;\n\n            // Fix viewer to floor\n            if ( this.walkMode ) {\n                if ( terrainElevation !== null && this.camera ) {\n                    this.camera.position.y = terrainElevation + this.viewerState.sceneCameraWalkHeight; // 3.0;\n                }\n            } else {\n                if ( terrainElevation && this.camera && this.camera.position.y < ( terrainElevation + 1.0 )) {\n                    this.camera.position.y = terrainElevation + 1.0;\n                }\n            }\n\n            if ( this.camera ) {\n                if ( this.camera instanceof ArcRotateCamera ) {\n                    let heading = -90 + ( -this.camera.alpha * ( 180.0 / Math.PI ));\n                    heading = ( heading % 360 + 360 ) % 360;\n                    this.viewerState.positionHeading = heading;\n\n                    const tilt = this.camera.beta * ( 180.0 / 3.14159265359 );\n                    this.viewerState.positionTilt = tilt;\n                \n                } else if ( this.camera instanceof TargetCamera ) {\n\n                    let heading = ( this.camera.rotation.y * ( 180.0 / Math.PI ));\n                    heading = ( heading % 360 + 360 ) % 360;\n                    this.viewerState.positionHeading = heading;\n\n                    const yaw = this.camera.rotation.x * ( 180.0 / 3.14159265359 );\n                    this.viewerState.positionTilt = 90.0 - yaw;\n\n                }\n            }\n        }\n\n        if ( this.camera ) {\n            let positionScene = this.camera.position.asArray();\n            positionScene = [ positionScene[0], positionScene[1], positionScene[2] ];  // Copy array\n            this.viewerState.positionScene = positionScene;\n\n            if ( this.envReflectionProbe ) {\n                this.envReflectionProbe.position = this.camera.position.clone();\n            }\n        }\n\n\n\n        //this.sequencer.update( deltaTime );\n        //this.processes.update( deltaTime );\n        this.layerManager.update( deltaTime );\n\n        this.viewerState.sceneFPS = this.engine.getFps(); // this.engine.getFps().toFixed( 1 );\n        this.viewerState.sceneDrawCalls = this.sceneInstru ? this.sceneInstru.drawCallsCounter.current : 0;\n        this.viewerState.sceneTriangles = this.sceneInstru ? this.scene.getActiveIndices() / 3 : 0;\n\n        // Run time\n        // TODO: this currently requires a minimum elapsed time so Date.setSeconds work. This approach accumulates error.\n        const updateInterval = 100; // 5000;\n        const maxUpdateElapsed = 2000;  // 2 sec\n        const updateSceneTime = true;\n\n        if ( updateSceneTime ) {\n            const currentDateUpdate = new Date().getTime();\n\n            if (( currentDateUpdate - this.lastDateUpdate ) > updateInterval ) {\n\n                let updateElapsed = ( currentDateUpdate - this.lastDateUpdate );\n                this.lastDateUpdate = currentDateUpdate;\n\n                if ( updateElapsed > maxUpdateElapsed ) { updateElapsed = maxUpdateElapsed; }\n                const scaledElapsed = ( updateElapsed / 1000 ) * ( 24 * 2 );  // 24 * 2 = 48x faster (1 day = 30 min)\n                //if (this.viewerState.positionDate.getHours() < 5) { scaledElapsed *= 3; }  // Faster pace at night\n                this.viewerState.positionDate.setSeconds( this.viewerState.positionDate.getSeconds() + scaledElapsed );\n                this.viewerState.positionDateSeconds = this.viewerState.positionDate.getTime() / 1000;\n\n                // TODO: Temporarily disabled\n                //this.lightSetupFromDatePos();\n            }\n\n        }\n\n        //this.skybox.computeWorldMatrix();  // only needed if scene.freezeActiveMeshes is true\n\n    }\n\n    sceneToWGS84( coords: number[]): number[] {\n        //let wgs84Pos = this.originShiftWGS84;\n        //const point = olProj.transform([coords[0], coords[2]], this.projection, 'EPSG:4326');\n        const point = this.projection!.inverse([ coords[0], coords[2] ]);\n        return [ point[0], point[1], coords[1] ];\n    }\n\n    wgs84ToScene( coords: number[]) : number[] {\n        //const point = olProj.transform(coords, 'EPSG:4326', this.projection);\n        const point = this.projection!.forward( coords );\n\n        return [ point[0], coords[2], point[1] ];\n    }\n\n    positionWGS84() : number[] {\n        const scenePos = this.camera!.position.asArray();\n        const wgs84Pos = this.sceneToWGS84([ scenePos[0], scenePos[1], scenePos[2] ]);\n        return wgs84Pos;\n        /*\n        const extent = this.map.getView().calculateExtent(this.map.getSize());\n        let point = [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n        */\n    }\n\n    parsePositionString( posString: string ): ScenePosition {\n        //console.debug(\"Parsing: \" + posString);\n\n        const result = new ScenePosition();\n\n        try {\n            // Parse at location\n            //http://localhost:8080/maps/@42.1354407,-0.4126472,17.0z\n            const href = posString;\n            const regexp = /.*@([0-9.\\\\-]+),([0-9.\\\\-]+)((,(([0-9.\\\\-]+)[ayhtz]))*).*/;\n            const matches = href.match( regexp );\n            //console.debug(matches);\n\n            if ( matches && matches.length >= 3 ) {\n                result.positionWGS84 = [ parseFloat( matches[2]),parseFloat( matches[1]) ];\n            }\n            if ( matches && matches.length >= 4 ) {\n                for ( const match of matches[3].split( \",\" )) {\n                    if ( match === \"\" ) { continue; }\n                    const value = parseFloat( match.slice( 0, -1 ));\n                    const code = match.slice( -1 );\n                    if ( code === \"z\" ) {\n                        result.positionTileZoomLevel = value;\n                    } else if ( code === \"a\" ) {\n                        result.positionGroundHeight = value;\n                    } else if ( code === \"h\" ) {\n                        result.positionHeading = value;\n                    } else if ( code === \"t\" ) {\n                        result.positionTilt = value;\n                    }\n                    //console.debug(value, code);\n                }\n            }\n        } catch( e ) {\n            console.debug( \"Error parsing location from href: \" + e );\n        }\n\n        //let positionWgs84 = this.getViewerState().positionWGS84;\n        return result;\n    }\n\n    positionString(): string | null {\n        // /@43.2505933,5.3736631,126a,35y,20.08h,56.42t/\n        const point = this.positionWGS84();\n        //const zoom = this.map.getView().getZoom();\n\n        //let heading = (this.camera.rotation.y * (180.0 / 3.14159265359));\n        //heading = (heading % 360 + 360) % 360;\n        const heading = this.viewerState.positionHeading;\n\n        //let yaw = this.camera.rotation.x * (180.0 / 3.14159265359);\n        const tilt = this.viewerState.positionTilt;\n\n        //let height = this.camera.position.y;\n        const groundHeight = this.viewerState.positionGroundHeight;\n        if ( groundHeight === null ) {\n            //return this.camera.position.y;\n            return null;\n        }\n\n        let posString = \"@\" + point[1].toFixed( 7 ) + \",\" + point[0].toFixed( 7 );\n\n        const shortFormat = false;\n        if ( shortFormat ) {\n            posString = posString + \",\" + groundHeight + \"m\";   // If heading and yaw is 0, GM uses 'm' (seem MSL m or Ground m)\n        } else {\n            posString = posString + \",\" + groundHeight + \"a\";    // seems Ground M  ... (not WGS84 height (with EGM))\n            posString = posString + \",\" + \"35\" + \"y\";    // ?\n            posString = posString + \",\" + heading.toFixed( 1 ) + \"h\"; // Heading\n            posString = posString + \",\" + tilt.toFixed( 2 ) + \"t\";    // Yaw (0 is vertical, 90 horizontal)\n        }\n        return posString;\n    }\n\n    updateElevation(): void {\n\n        if ( !this.camera ) return;\n\n        //const ray = new Ray(this.camera.position, new Vector3(0, -1, 0));\n        const ray = new Ray( new Vector3( this.camera.position.x, -100.0, this.camera.position.z ), new Vector3( 0, 1, 0 ), 3000.0 );\n        const pickResult = this.scene.pickWithRay( ray );\n        //const pickResult = null;\n        if ( pickResult && pickResult.pickedMesh && pickResult.pickedMesh.id !== \"skyBox\" ) {\n\n            if ( pickResult.pickedMesh.metadata && pickResult.pickedMesh.metadata.gltf && pickResult.pickedMesh.metadata.gltf.extras && pickResult.pickedMesh.metadata.gltf.extras[\"osm:name\"]) {\n                this.viewerState.positionName = pickResult.pickedMesh.metadata.gltf.extras[\"osm:name\"];\n            } else {\n                this.viewerState.positionName = null;\n            }\n\n            const terrainElevation = ( pickResult.distance - 100.0 );\n            this.viewerState.positionTerrainElevation = terrainElevation;\n            this.viewerState.positionGroundHeight = this.camera.position.y - terrainElevation;\n        } else {\n            //this.viewerState.positionTerrainElevation = null;\n        }\n\n    }\n\n    /*\n    positionGroundHeight() {\n        //const ray = new Ray(this.camera.position, new Vector3(0, -1, 0));\n        const ray = new Ray(new Vector3(this.camera.position.x, -100.0, this.camera.position.z), new Vector3(0, 1, 0), 3000.0);\n        const pickResult = this.scene.pickWithRay(ray);\n        if (pickResult && pickResult.pickedMesh && pickResult.pickedMesh.id !== 'skyBox') {\n            //console.debug(pickResult.pickedMesh.id);\n            return this.camera.position.y - (pickResult.distance - 100.0);\n        } else {\n            return null;\n        }\n    }\n\n    positionTerrainElevation() {\n        //const ray = new Ray(this.camera.position, new Vector3(0, -1, 0));\n        const ray = new Ray(new Vector3(this.camera.position.x, -100.0, this.camera.position.z), new Vector3(0, 1, 0), 3000.0);\n        const pickResult = this.scene.pickWithRay(ray);\n        if (pickResult && pickResult.pickedMesh && pickResult.pickedMesh.id !== 'skyBox') {\n\n            if (pickResult.pickedMesh.metadata && pickResult.pickedMesh.metadata.gltf && pickResult.pickedMesh.metadata.gltf.extras && pickResult.pickedMesh.metadata.gltf.extras['osm:name']) {\n                this.viewerState.positionName = pickResult.pickedMesh.metadata.gltf.extras['osm:name'];\n            } else {\n                this.viewerState.positionName = null;\n            }\n\n            return (pickResult.distance - 100.0);\n        } else {\n            return null;\n        }\n    }\n    */\n\n    /**\n     * Untested\n     * (from: https://gist.github.com/spite/051604efd1d971ab4b6ef1bc1ae2636e)\n     */\n    /*\n    _getTileFromLatLon(zoom, lat, lon) {\n        const width = Math.pow(2, zoom);\n        const height = Math.pow(2, zoom);\n        const latRad = (lat * Math.PI) / 180;\n        const x = ~~((width * (lon + 180)) / 360);\n        const y = ~~(((1 - Math.asinh(Math.tan(latRad)) / Math.PI) / 2.0) * height);\n        return {zoom, x, y};\n    }\n    */\n\n    registerProjectionForCoords( coords: Coordinate ): void {\n\n        console.debug( \"Setting Scene Geo transform for coords: \" + coords );\n\n        // Get tile grid coordinates\n        const coordsUtm = transform(coords, \"EPSG:4326\", \"EPSG:3857\" );\n        const tileCoords = this.tileGrid.getTileCoordForCoordAndZ( coordsUtm, 17 );\n\n        const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\n        const tileCenter = extent.getCenter( tileExtent );\n        const tileCenterWGS84 = transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\n\n        // Using coords of tile center for custom projection as DDD does\n        this.projection = proj4.default(\n            \"+proj=tmerc +lat_0=\" + tileCenterWGS84[1] + \" +lon_0=\" + tileCenterWGS84[0] + \" +k_0=1 \" +\n            \"+x_0=0. +y_0=0. +datum=WGS84 +ellps=WGS84 \" +\n            \"+towgs84=0,0,0,0,0,0,0 +units=m +no_defs\" );\n\n    }\n\n    deselectMesh(): void {\n        if ( this.selectedMesh ) {\n            //this.viewerState.selectedMesh.showBoundingBox = false;\n\n            for ( const mesh of this.highlightMeshes ) {\n                mesh.dispose();\n            }\n            this.highlightMeshes = [];\n            this.selectedMesh = null;\n            this.viewerState.sceneSelectedMeshId = null;\n        }\n    }\n\n    findMeshById( meshId: string, node: Mesh | null = null ): Mesh | null {\n        let children = null;\n        if ( node ) {\n            const nodeUrlId = node.id.split( \"/\" ).pop()!.replaceAll( \"#\", \"_\" );\n            if ( nodeUrlId === meshId ) {\n                return node;\n            }\n            children = node.getChildren();\n        } else {\n            children = this.scene.rootNodes;\n        }\n\n        for ( const child of children ) {\n            const result = this.findMeshById( meshId, <Mesh> child );\n            if ( result !== null ) { return result; }\n        }\n\n        return null;\n    }\n\n    selectMeshById( meshId: string, highlight: boolean ): void {\n\n        let mesh = null;\n        mesh = this.findMeshById( meshId );\n\n        if ( mesh ) this.selectMesh( mesh, highlight );\n    }\n\n    selectMesh( mesh: Mesh, highlight: boolean ): void {\n\n        this.deselectMesh();\n\n        if ( mesh ) {\n            this.selectedMesh = mesh;\n            this.viewerState.sceneSelectedMeshId = mesh.id;\n            //this.viewerState.selectedMesh.showBoundingBox = true;\n            //console.debug(this.viewerState.selectedMesh.metadata.gltf.extras);\n\n            if ( highlight ) {\n                // Highlight\n                //that.highlightLayer.addMesh(pickResult.pickedMesh, Color3.White()); // , true);\n                //pickResult.pickedMesh.material = that.materialHighlight;\n                //pickResult.pickedMesh.material = that.materialGrass;\n\n                // Prepare the wireframe mesh\n                // To disable depth test check rendering groups:  https://forum.babylonjs.com/t/how-do-i-disable-depth-testing-on-a-mesh/1159\n                const highlightClone = mesh.clone();\n\n                // Iterate clone recursively to set highlight material to all submeshes\n                const setHighlightRecursively = ( submesh: Mesh ) => {\n                    submesh.material = this.materialHighlight;\n                    for ( const mc of submesh.getChildren()) {\n                        setHighlightRecursively( <Mesh> mc );\n                    }\n                };\n                setHighlightRecursively( highlightClone );\n\n                //highlightClone.material = this.materialHighlight;\n                highlightClone.parent = mesh.parent;\n                this.highlightMeshes.push( highlightClone );\n            }\n\n        }\n    }\n\n    getBoundsRecursively( node: Mesh, bounds?: BoundingInfo ) : BoundingInfo {\n        if ( !bounds ) {\n            //bounds = { minimumWorld: { x: Number.POSITIVE_INFINITY, y: Number.POSITIVE_INFINITY, z: Number.POSITIVE_INFINITY },\n            //    maximumWorld: { x: Number.NEGATIVE_INFINITY, y: Number.NEGATIVE_INFINITY, z: Number.NEGATIVE_INFINITY } };\n            bounds = new BoundingInfo(\n                new Vector3( Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY ),\n                new Vector3( Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY ));\n        }\n        if ( node.getBoundingInfo ) {\n            const minWorld = node.getBoundingInfo().boundingBox.minimumWorld;\n            const maxWorld = node.getBoundingInfo().boundingBox.maximumWorld;\n            if ( bounds.minimum.x > minWorld.x ) {bounds.minimum.x = minWorld.x;}\n            if ( bounds.minimum.y > minWorld.y ) {bounds.minimum.y = minWorld.y;}\n            if ( bounds.minimum.z > minWorld.z ) {bounds.minimum.z = minWorld.z;}\n            if ( bounds.maximum.x < maxWorld.x ) {bounds.maximum.x = maxWorld.x;}\n            if ( bounds.maximum.y < maxWorld.y ) {bounds.maximum.y = maxWorld.y;}\n            if ( bounds.maximum.z < maxWorld.z ) {bounds.maximum.z = maxWorld.z;}\n        }\n\n        for ( const nc of node.getChildren()) {\n            bounds = this.getBoundsRecursively( <Mesh> nc, bounds );\n        }\n        return bounds;\n    }\n\n    /*\n    * Find a node within a scene or node recursively.\n    * Criteria is a dictionary of key=value pairs. An object will match if any of the pairs matches object's metadata.\n    */\n    findNode( node: Mesh, criteria: { [key: string]: any }): Mesh | null {\n        //console.debug(node);\n        if ( criteria[\"_node_name\"] && node.id ) {\n            const name = node.id.split( \"/\" ).pop()!.replaceAll( \"#\", \"_\" );\n            if ( name === criteria[\"_node_name\"]) {\n                return node;\n            }\n        }\n        if ( node.metadata && node.metadata.gltf && node.metadata.gltf.extras ) {\n            const metadata = node.metadata.gltf.extras;\n            for ( const key in criteria ) {\n                if ( metadata[key] === criteria[key]) {\n                    return node;\n                }\n            }\n        }\n        for ( const sn of node.getChildren()) {\n            const result = this.findNode( <Mesh> sn, criteria );\n            if ( result ) { return result; }\n        }\n        return null;\n    }\n\n    updateRenderPipeline(): void {\n\n        this.scene.postProcessesEnabled = this.viewerState.scenePostprocessingEnabled;\n\n        if ( !this.viewerState.scenePostprocessingEnabled ) {\n            return;\n        }\n    }\n\n    initRenderPipeline(): void {\n        // Postprocess\n        // The default pipeline applies other settings, we'd better off using Bloom independently if possible\n        // Also note this is tied to the camera, and thus if used, this should be updated when the camera changes\n        const defaultPipeline = new DefaultRenderingPipeline( \"default\", true, this.scene, [ <Camera> this.camera ]);\n        defaultPipeline.fxaaEnabled = true;\n        defaultPipeline.bloomEnabled = true;\n        defaultPipeline.bloomWeight = 1.0;  // 1.5 is exagerated but maybe usable for pics\n        //defaultPipeline.cameraFov = this.camera.fov;\n        defaultPipeline.imageProcessing.toneMappingEnabled = true;\n\n        //var postProcessHighlights = new HighlightsPostProcess(\"highlights\", 0.1, camera);\n        //var postProcessTonemap = new TonemapPostProcess(\"tonemap\", TonemappingOperator.Hable, 1.2, camera);\n\n        // See: https://doc.babylonjs.com/divingDeeper/postProcesses/postProcessRenderPipeline\n        /*\n        var standardPipeline = new PostProcessRenderPipeline(this.engine, \"standardPipeline\");\n        var effectBloom = new BloomEffect(this.scene, 4, 5.0, 2.0);\n        //var effectDepthOfField = new DepthOfFieldEffect(this.scene);\n        var postProcessChain = new PostProcessRenderEffect(this.engine, \"postProcessChain\", function() { return [effectBloom, effectDepthOfField] });\n        standardPipeline.addEffect(effectBloom);\n        this.scene.postProcessRenderPipelineManager.addPipeline(standardPipeline);\n        */\n\n        const lensRenderingPipeline = new LensRenderingPipeline( \"lens\", {\n            edge_blur: 0.25,                // 1.0 is too distorted in the borders for walk/view mode (maybe for pictures)\n            chromatic_aberration: 1.0,\n            distortion: 0.5,                // (dilate effect)\n            dof_focus_distance: 60,\n            dof_aperture: 1.0,            // 1.2 is already too blurry for OSM, 6.0 is very high\n            grain_amount: 0.0, // 0.5,\n            dof_pentagon: false, // true,\n            dof_gain: 1.0,\n            dof_threshold: 1.0,\n            dof_darken: 0.25\n        }, this.scene, 1.0, [ <Camera> this.camera ]);\n        //this.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline('lensEffects', camera);\n\n        /*\n        const ssao = new SSAO2RenderingPipeline('ssao', this.scene, {\n          ssaoRatio: .5,\n          blurRatio: 1\n        }, [ this.camera ], true)\n        */\n\n        /*\n        var curve = new ColorCurves();\n        curve.globalHue = 0;\n        curve.globalDensity = 80;\n        curve.globalSaturation = 5;\n        curve.highlightsHue 0;\n        curve.highlightsDensity = 80;\n        curve.highlightsSaturation = 40;\n        curve.shadowsHue = 0;\n        curve.shadowsDensity = 80;\n        curve.shadowsSaturation = 40;\n        this.scene.imageProcessingConfiguration.colorCurvesEnabled = true;\n        this.scene.imageProcessingConfiguration.colorCurves = curve;\n        var postProcess = new ImageProcessingPostProcess(\"processing\", 1.0, camera);\n        */\n\n        /*\n        // Fog\n        //this.scene.fogMode = Scene.FOGMODE_EXP;\n        //this.scene.fogDensity = 0.005;  // default is 0.1\n        this.scene.fogMode = Scene.FOGMODE_LINEAR;\n        this.scene.fogStart = 250.0;\n        this.scene.fogEnd = 500.0;\n        this.scene.fogColor = new Color3(0.75, 0.75, 0.85);\n        */\n        /*\n        pixels = rp.cubeTexture.readPixels(0,0)\n        // i take the first pixel of the reflection probe texture for fog color.\n        // since pixels are stored as buffer array, first pixel are first 4 values of array [r,g,b,a....]\n        scene.fogColor = new Color3(pixels[0]/255, pixels[1]/255, pixels[2]/255)\n        */\n    }\n\n    selectCameraFree(): void {\n        if ( this.camera ) {\n            this.camera.customRenderTargets = [];\n            this.camera.detachControl();\n            this.camera.dispose();\n        }\n\n        //console.debug(\"Creating free camera.\");\n        this.walkMode = false;\n\n        const camera = new UniversalCamera( \"Camera\", Vector3.Zero(), this.scene );\n        camera.minZ = 1;\n        camera.maxZ = 4500;\n        camera.angularSensibility = 500.0;\n        camera.touchAngularSensibility = 1000.0;\n        //camera.touchMoveSensibility = 1.0;\n        //camera.inertia = 0.10;\n        camera.inertia = 0.5;\n        camera.keysUp.push( 87 );\n        camera.keysDown.push( 83 );\n        camera.keysLeft.push( 65 );\n        camera.keysRight.push( 68 );\n        camera.keysUpward.push( 81 );\n        camera.keysDownward.push( 69 );\n        camera.attachControl( this.engine.getRenderingCanvas(), true );\n        camera.fov = 40.0 * ( Math.PI / 180.0 );  // 35.0 might be GM, 45.8... is default  // 35\n        const positionScene = this.wgs84ToScene( this.viewerState.positionWGS84 );\n        camera.position = new Vector3( positionScene[0], this.viewerState.positionGroundHeight + this.viewerState.positionTerrainElevation + 1, positionScene[2]);\n        camera.rotation = new Vector3(( 90.0 - this.viewerState.positionTilt ) * ( Math.PI / 180.0 ), this.viewerState.positionHeading * ( Math.PI / 180.0 ), 0.0 );\n        //camera.cameraRotation = new Vector2(/* (90.0 - this.viewerState.positionTilt) * (Math.PI / 180.0) */ 0, this.viewerState.positionHeading * (Math.PI / 180.0));\n        this.camera = camera;\n        this.setMoveSpeed( this.viewerState.sceneMoveSpeed );\n\n        this.updateRenderTargets();\n    }\n\n    selectCameraWalk(): void {\n        this.selectCameraFree();\n        this.walkMode = true;\n        this.camera!.inertia = 0.0;\n        this.setMoveSpeed( this.viewerState.sceneMoveSpeed );\n    }\n\n    /*\n    geolocationPosition( enabled ) {\n\n        //this.selectCameraFree();\n        //this.walkMode = true;\n        //this.camera.detachControl();\n\n        /-\n        this.app.$getLocation({enableHighAccuracy: true}).then(coordinates => {\n            console.log(coordinates);\n            let altitude = coordinates.altitude !== null ? coordinates.altitude : 2.0;\n            let scenePos = this.wgs84ToScene([coordinates.lng, coordinates.lat, altitude]);\n            //console.log(scenePos);\n            this.camera.position.x = scenePos[0];\n            this.camera.position.y = altitude;\n            this.camera.position.z = scenePos[2];\n\n            let heading = coordinates.heading;\n            if (heading) {\n                this.sceneViewer.viewerState.positionHeading = heading;\n                let rotation = new Vector3((90.0 - this.sceneViewer.viewerState.positionTilt) * (Math.PI / 180.0), this.sceneViewer.viewerState.positionHeading * (Math.PI / 180.0), 0.0);\n                this.camera.rotation = rotation;\n            }\n        });\n        -/\n\n        this.viewerState.geolocationEnabled = enabled;\n\n        if ( enabled ) {\n\n            const that = this;\n\n            // Enable geolocation\n            this.selectCameraFree();\n\n            //this._geolocationWatchId = this.app.$watchLocation({enableHighAccuracy: true, maximumAge: 5}).then(coordinates => {\n            this.app.$getLocation({ enableHighAccuracy: true, maximumAge: 5 }).then(( coords ) => { that.onDeviceLocation( coords ); });\n\n            // Compass\n            this._onDeviceOrientation = function( e ) { that.onDeviceOrientation( e ); };\n            this._onDeviceOrientation.bind( that );\n            const isIOS = false;\n            if ( isIOS ) {\n                DeviceOrientationEvent.requestPermission().then(( response ) => {\n                    if ( response === \"granted\" ) {\n                        window.addEventListener( \"deviceorientation\", this._onDeviceOrientation );\n                    } else {\n                        alert( \"Compass usage permission not granted.\" );\n                    }\n                }).catch(() => alert( \"Compass not supported.\" ));\n            } else {\n                window.addEventListener( \"deviceorientationabsolute\", this._onDeviceOrientation );\n            }\n\n        } else  {\n\n            // Disable geolocation\n\n            this.viewerState.geolocationEnabled = false;\n            if ( this._geolocationWatchId !== null ) {\n                this.app.$clearLocationWatch( this._geolocationWatchId );\n                this._geolocationWatchId = null;\n            }\n            window.removeEventListener( \"deviceorientationabsolute\", this._onDeviceOrientation );\n            window.removeEventListener( \"deviceorientation\", this._onDeviceOrientation );\n            this._onDeviceOrientation = null;\n        }\n\n    }\n\n    onDeviceLocation( coordinates ) {\n        //console.log(coordinates);\n        if ( coordinates ) {\n\n            const altitude = coordinates.altitude !== null ? coordinates.altitude : 2.0;\n            if ( this.walkMode ) { altitude.y = 2.5; }\n\n            this.viewerState.positionWGS84 = [ coordinates.lng, coordinates.lat, altitude ];\n            const scenePos = this.wgs84ToScene( this.viewerState.positionWGS84 );\n            this.viewerState.positionScene = scenePos;\n\n            this.camera.position.x = scenePos[0];\n            this.camera.position.y = altitude;\n            this.camera.position.z = scenePos[2];\n\n            /-\n            let heading = coordinates.heading;\n            if (heading !== null && !isNaN(heading)) {\n                this.viewerState.positionHeading = heading;\n                let rotation = new Vector3((90.0 - this.viewerState.positionTilt) * (Math.PI / 180.0), this.viewerState.positionHeading * (Math.PI / 180.0), 0.0);\n                this.camera.rotation = rotation;\n                //console.debug(heading);\n            }\n            -/\n        }\n\n        if ( this.viewerState.geolocationEnabled ) {\n            const that = this;\n            setTimeout( function() {\n                that.app.$getLocation({ enableHighAccuracy: true, maximumAge: 5 }).then(( coords ) => { that.onDeviceLocation( coords ); });\n            }, 1000 );\n        }\n\n    }\n    */\n\n\n    /**\n    * From: https://www.w3.org/TR/orientation-event/\n    */\n    /*\n    getQuaternion( alpha, beta, gamma ) {\n\n        var degtorad = Math.PI / 180; // Degree-to-Radian conversion\n\n      var _x = beta  ? beta  * degtorad : 0; // beta value\n      var _y = gamma ? gamma * degtorad : 0; // gamma value\n      var _z = alpha ? alpha * degtorad : 0; // alpha value\n\n      var cX = Math.cos( _x/2 );\n      var cY = Math.cos( _y/2 );\n      var cZ = Math.cos( _z/2 );\n      var sX = Math.sin( _x/2 );\n      var sY = Math.sin( _y/2 );\n      var sZ = Math.sin( _z/2 );\n\n      //\n      // ZXY quaternion construction.\n      //\n\n      var w = cX * cY * cZ - sX * sY * sZ;\n      var x = sX * cY * cZ - cX * sY * sZ;\n      var y = cX * sY * cZ + sX * cY * sZ;\n      var z = cX * cY * sZ + sX * sY * cZ;\n\n      //return [ w, x, y, z ];\n      return new Quaternion(x, y, z, w);\n    }\n    */\n\n    /*\n    onDeviceOrientation( e ) {\n\n        //let rotation = Quaternion.FromEulerAngles(e.alpha * Math.PI / 180.0, e.beta * Math.PI / 180.0, e.gamma * Math.PI / 180.0);\n        //let forward = Vector3.Forward().rotateByQuaternionToRef(rotation, new Vector3());\n        //let heading = Math.atan2(forward.y, forward.x) * 180.0 / Math.PI;\n        //alert(heading);\n\n        let heading = e.webkitCompassHeading || Math.abs( e.alpha - 360 );\n\n        if ( heading !== null && !isNaN( heading )) {\n\n            heading = ( heading ) % 360.0;\n            this.viewerState.positionHeading = heading;\n\n            let tilt = e.webkitCompassTilt || Math.abs( e.beta - 360 );\n            if ( tilt !== null && !isNaN( tilt )) {\n                this.viewerState.positionTilt = ( - tilt );\n            }\n\n            const tiltRotation = ( 90.0 - this.viewerState.positionTilt ) * ( Math.PI / 180.0 );\n            if ( tiltRotation < 0 ) { tilt = Math.PI * 2 - tiltRotation; }\n            const rotation = new Vector3( tiltRotation, this.viewerState.positionHeading * ( Math.PI / 180.0 ), 0.0 );\n            //let rotation = new Vector3(Math.PI / 2 + -e.beta * Math.PI / 180.0, -e.alpha * Math.PI / 180.0, e.gamma * Math.PI / 180.0 );\n            this.camera!.rotation = rotation;\n            //console.debug(heading);\n        }\n        //compassCircle.style.transform = `translate(-50%, -50%) rotate(${-compass}deg)`;\n    }\n    */\n\n    selectCameraOrbit(): void {\n\n        this.walkMode = false;\n\n        let targetCoords = Vector3.Zero();\n        if ( this.selectedMesh ) {\n            const boundingBox: BoundingInfo = this.getBoundsRecursively( this.selectedMesh );\n            //targetCoords = this.selectedMesh.absolutePosition;\n            const minWorld = boundingBox.minimum;\n            const maxWorld = boundingBox.maximum;\n            targetCoords = new Vector3(( minWorld.x + maxWorld.x ) / 2, ( minWorld.y + maxWorld.y ) / 2, ( minWorld.z + maxWorld.z ) / 2 );\n        }\n\n        let distance = 75.0;\n        if ( this.camera ) {\n            distance = Vector3.Distance( this.camera.position, targetCoords );\n\n            this.camera.customRenderTargets = [];\n\n            this.camera.detachControl();\n            this.camera.dispose();\n        }\n\n        console.debug( \"Creating orbit camera pointing to: \" + targetCoords );\n\n        const camera = new ArcRotateCamera( \"Camera\", -( 90 + this.viewerState.positionHeading ) * Math.PI / 180.0, this.viewerState.positionTilt * Math.PI / 180.0, distance, targetCoords, this.scene );\n        camera.attachControl( this.engine.getRenderingCanvas(), true );\n        camera.minZ = 1;\n        //camera.maxZ = 2500;  // Automatic? see focusOn()\n        camera.lowerRadiusLimit = 15;\n        camera.upperRadiusLimit = 1000;\n        camera.upperBetaLimit = Math.PI; // /2; // Math.PI / 2 = limit to flat view\n        camera.panningSensibility = 50.0; // 0.5;\n        //camera.angularSensibility = 50.0;\n        //camera.inertia = 0.10;\n        \n        //camera.multiTouchPanning = false;\n        //camera.multiTouchPanAndZoom = false;\n        //camera.pinchZoom = true;\n        \n        camera.useNaturalPinchZoom = true;\n        camera.fov = 35.0 * ( Math.PI / 180.0 );\n        this.camera = camera;\n\n        this.updateRenderTargets();\n    }\n\n\n    updateRenderTargets(): void {\n        if ( this.camera && this.envReflectionProbe ) {\n            this.camera.customRenderTargets.push( this.envReflectionProbe.cubeTexture );\n        }\n        //this.scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\"standardPipeline\", this.camera);\n    }\n\n    /*\n    groundTextureLayerSetKey( key: string ): void {\n\n        this.viewerState.sceneGroundTextureOverride = key;\n\n        let url = null;\n        const layers = this.viewerState.dddConfig.sceneGroundLayers;\n        if ( layers[key]) {\n            url = layers[key].url;\n        }\n        this.layerManager.layers[\"ddd-osm-3d\"].groundTextureLayerSetUrl( url );\n    }\n    */\n\n    setMoveSpeed( speed: number ): void {\n        this.viewerState.sceneMoveSpeed = speed;\n        if ( this.camera && this.camera instanceof TargetCamera ) {\n            this.camera.speed = speed;\n        }\n    }\n\n    cycleMoveSpeed(): void {\n        if ( this.viewerState.sceneMoveSpeed < 5.0 ) {\n            this.setMoveSpeed( 5.0 );\n        } else if ( this.viewerState.sceneMoveSpeed < 10.0 ) {\n            this.setMoveSpeed( 10.0 );\n        } else {\n            this.setMoveSpeed( 2.0 );\n        }\n    }\n\n    /*\n    lightSetupFromDatePos(): void {\n\n        //this.envReflectionProbe.update(); // = new ReflectionProbe(\"envReflectionProbe\", 128, this.scene, true, true, true)\n        //this.envReflectionProbe.renderList.push(this.skyBox);\n        //this.scene.environmentTexture = this.envReflectionProbe.cubeTexture;\n\n        //console.debug(this.envReflectionProbe.cubeTexture.readPixels(0, 0));\n        const times = SunCalc.getTimes( this.viewerState.positionDate, this.viewerState.positionWGS84[1], this.viewerState.positionWGS84[0]);\n\n        const sunriseStr = times.sunrise.getHours() + \":\" + times.sunrise.getMinutes();\n        const sunsetStr = times.sunset.getHours() + \":\" + times.sunset.getMinutes();\n\n        // get position of the sun (azimuth and altitude) at today's sunrise\n        ///*var sunrisePos = SunCalc.getPosition(times.sunrise, this.viewerState.positionWGS84[1], this.viewerState.positionWGS84[0]);\n        //var sunriseAzimuth = sunrisePos.azimuth * 180 / Math.PI;\n        //var sunsetSunPos = SunCalc.getPosition(times.sunset, this.viewerState.positionWGS84[1], this.viewerState.positionWGS84[0]);\n        //var sunsetAzimuth = sunsetPos.azimuth * 180 / Math.PI; **\n\n        const currentSunPos = SunCalc.getPosition( this.viewerState.positionDate, this.viewerState.positionWGS84[1], this.viewerState.positionWGS84[0], this.viewerState.positionScene[1]);\n        const currentMoonPos = SunCalc.getMoonPosition( this.viewerState.positionDate, this.viewerState.positionWGS84[1], this.viewerState.positionWGS84[0]);\n        //var crrentMoonIlum = SunCalc.getMoonIllumination(this.viewerState.positionDate);\n\n        //var currentPos = currentSunPos.altitude > 0 ? currentSunPos : currentMoonPos;\n\n        //var currentElevation = currentPos.altitude * 180 / Math.PI;\n        //var currentAzimuth = currentPos.azimuth * 180 / Math.PI;\n        //console.debug(\"Sun azimuth: \" + currentAzimuth + \" ele: \" + currentElevation + \" Date: \" + this.viewerState.positionDate + \" Sunrise: \" + sunriseStr + \" azimuth: \" + sunriseAzimuth + \" Sunset: \" + sunsetStr + \" azimuth: \" + sunsetAzimuth);\n\n        const altitudeLessHorizonAtmAprox = ( currentSunPos.altitude + 0.25 ) / ( Math.PI + 0.25 ) * Math.PI; // 0.25~15rad\n        let sunlightAmountNorm = Math.sin( altitudeLessHorizonAtmAprox );\n        if ( sunlightAmountNorm < 0 ) { sunlightAmountNorm = 0; }\n        sunlightAmountNorm = 1 - Math.pow( 1 - sunlightAmountNorm, 4 );\n\n        //let lightAltitude = altitudeLessHorizonAtmAprox >= 0 && altitudeLessHorizonAtmAprox < Math.PI ? altitudeLessHorizonAtmAprox : Math.PI - altitudeLessHorizonAtmAprox;\n        const lightRot = Quaternion.FromEulerAngles( currentSunPos.altitude, currentSunPos.azimuth, 0 );  // Use moon\n        const lightSunAndFlareRot = Quaternion.FromEulerAngles( currentSunPos.altitude, currentSunPos.azimuth, 0 );\n\n        //this.light = new DirectionalLight(\"light\", new Vector3(0.3, -0.5, 0.5).normalizeToNew(), this.scene);\n        //this.light.diffuse = new Color3(0.95, 0.95, 1.00);\n        //this.light.specular = new Color3(1, 1, 0.95);\n        const minLightDay = 0.0;\n        const maxLightDay = 3.0;\n\n        // Set light dir and intensity\n        Vector3.Forward().rotateByQuaternionToRef( lightRot, this.light.direction );\n        const lightIntensity = minLightDay + ( maxLightDay - minLightDay ) * sunlightAmountNorm;\n        //console.debug(\"Sunlight amount norm: \" + sunlightAmountNorm + \" lightIntensity: \" + lightIntensity);\n        this.light.intensity = lightIntensity;\n\n\n        //this.scene.environmentTexture.level = 0; // 0.1 + sunlightAmountNorm; // = hdrTexture;\n        //this.scene.environmentTexture.level = 0.1 + sunlightAmountNorm; // = hdrTexture;\n        //Color3.LerpToRef(this.ambientColorNight, this.ambientColorDay, sunlightAmountNorm, this.scene.ambientColor);\n\n        if ( this.skybox && this.skybox.material && this.skybox.material.reflectionTexture ) {\n            this.skybox.material.reflectionTexture.level = 0.1 + sunlightAmountNorm;\n            this.skybox.rotation.y = currentSunPos.azimuth - ( 19 * ( Math.PI / 180.0 ));\n        }\n\n        if ( this.skybox ) {\n            const shaderMaterial = this.scene.getMaterialByName( \"skyShader\" );\n            if ( shaderMaterial ) {\n                shaderMaterial.setFloat( \"time\", ( this.viewerState.positionDate.getTime() % ( 100000000.0 )) / 500000.0 );\n                if ( currentSunPos.altitude > 0 ) {\n                    shaderMaterial.setFloat( \"suny\", Math.sin( currentSunPos.altitude ));\n                } else if ( currentMoonPos.altitude > 0 ) {\n                    //shaderMaterial.setFloat(\"suny\", -Math.sin(currentMoonPos.altitude));\n                    shaderMaterial.setFloat( \"suny\", Math.sin( currentSunPos.altitude ));\n                } else {\n                    //shaderMaterial.setFloat(\"suny\", 0);\n                    shaderMaterial.setFloat( \"suny\", Math.sin( currentSunPos.altitude ));\n                }\n                shaderMaterial.setFloat( \"sunx\", ( currentSunPos.azimuth - ( Math.PI / 2.0 )) / Math.PI );\n            }\n        }\n\n\n        Vector3.Forward().rotateByQuaternionToRef( lightSunAndFlareRot, this.lensFlareEmitter.position );\n        this.lensFlareEmitter.position.scaleInPlace( -1400.0 );\n        this.lensFlareEmitter.position.addInPlace( this.camera.position );\n        this.lensFlareSystem.setEmitter( this.lensFlareEmitter );\n\n        const flareEnabled = currentSunPos.altitude > 0;\n        if ( this.lensFlareSystem.isEnabled !== flareEnabled ) {\n            this.lensFlareSystem.isEnabled = flareEnabled;\n        }\n\n        //console.debug(this.scene.ambientColor);\n\n        // Lamps\n        const lampMatOn = sunlightAmountNorm > 0.2;  // 0.2 is more logical, 0.1 exagerates the change\n        if ( lampMatOn !== this._previousLampPatOn ) {\n            this._previousLampPatOn = lampMatOn;\n            if ( \"LightLampOff\" in this.catalog_materials ) {\n                const lampMat = this.catalog_materials[\"LightLampOff\"];\n                lampMat.unfreeze();\n                if ( lampMatOn ) {\n                    lampMat.emissiveColor = Color3.Black();\n                } else {\n                    lampMat.emissiveColor = this.colorLightLamp;\n                }\n                //lampMat.freeze();\n            }\n\n        }\n\n        const semCycleSeconds = 20;\n        let semColor = ( this.viewerState.positionDate.getMinutes() % semCycleSeconds ) / semCycleSeconds;\n        semColor = ( semColor < 0.5 ? 0 : ( semColor < 0.9 ? 1 : 2 ));\n        if ( \"LightRed\" in this.catalog_materials ) {\n            const lampMat = this.catalog_materials[\"LightRed\"];\n            lampMat.unfreeze();\n            lampMat.emissiveColor = ( semColor === 0 ) ? this.colorLightRed : Color3.Black();\n            //lampMat.freeze();\n        }\n        if ( \"LightGreen\" in this.catalog_materials ) {\n            const lampMat = this.catalog_materials[\"LightGreen\"];\n            lampMat.unfreeze();\n            lampMat.emissiveColor = ( semColor === 1 ) ? this.colorLightGreen : Color3.Black();\n        }\n        if ( \"LightOrange\" in this.catalog_materials ) {\n            const lampMat = this.catalog_materials[\"LightOrange\"];\n            lampMat.unfreeze();\n            lampMat.emissiveColor = ( semColor === 2 ) ? this.colorLightOrange : Color3.Black();\n            //lampMat.freeze();\n        }\n\n    }\n    */\n\n    sceneShadowsSetEnabled( value: boolean ): void {\n        this.viewerState.sceneShadowsEnabled = value;\n        localStorage.setItem( \"dddSceneShadowsEnabled\", JSON.stringify( value ));\n        alert( \"Reload the viewer for changes to take effect.\" );\n    }\n\n    sceneTextsSetEnabled( value: boolean ): void {\n        this.viewerState.sceneTextsEnabled = value;\n        localStorage.setItem( \"dddSceneTextsEnabled\", JSON.stringify( value ));\n        alert( \"Reload the viewer for changes to take effect.\" );\n    }\n\n    scenePostprocessingSetEnabled( value: boolean ): void {\n        this.viewerState.scenePostprocessingEnabled = value;\n        //localStorage.setItem('dddScenePostprocessingSetEnabled', value);\n        //alert('Reload the viewer for changes to take effect.');\n        this.updateRenderPipeline();\n    }\n\n\n\n    /**\n    */\n    loadTextures(): void {\n\n        const texturesConfig: DDDMaterialsConfig | undefined = this.viewerState.dddConfig.sceneMaterials.find( item => item.value === this.viewerState.sceneTextureSet );\n        if ( !texturesConfig ) return;\n\n        if ( texturesConfig.textures !== null ) {\n            this.loadCatalog( \"/assets/catalog_materials-\" + texturesConfig.textures + \".glb\", true );\n        }\n\n        if ( texturesConfig.splatmap !== null ) {\n            this.useSplatMap = true;\n            const atlasTextureUrl = \"/assets/splatmap-textures-atlas-\" + texturesConfig.splatmap + \".png\";\n            const atlasNormalsTextureUrl = \"/assets/splatmap-textures-atlas-normals-\" + texturesConfig.splatmap + \".png\";\n            this.splatmapAtlasTexture = new Texture( atlasTextureUrl, this.scene,  false, true, Texture.NEAREST_NEAREST_MIPLINEAR ); // , Texture.NEAREST_SAMPLINGMODE);\n            this.splatmapAtlasNormalsTexture = new Texture( atlasNormalsTextureUrl, this.scene, false, true, Texture.NEAREST_NEAREST_MIPLINEAR );\n        } else {\n            this.useSplatMap = false;\n        }\n\n    }\n\n    /**\n     * Changes the materials set used to draw the scene.\n     * @todo this would ideally belong to layers that explicity support DDD export features (splatmaps / texture catalogs)\n     * @param textureSet \n     */\n    sceneTextureSet( textureSet: string | null ): void {\n        this.viewerState.sceneTextureSet = textureSet;\n        localStorage.setItem( \"dddSceneTextureSet\", JSON.stringify( textureSet ));\n\n        if ( textureSet !== null ) {\n            this.loadTextures();\n        }\n        alert( \"Reload the app to apply changes.\" );\n    }\n\n}\n\nexport { SceneViewer };\n","/* \n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\n* Copyright 2021 Jose Juan Montes and contributors\n* MIT License (see LICENSE file)\n*/\n\nimport { DDDViewerConfig } from \"./DDDViewerConfig\";\n\n/**\n * Holds DDDViewer global state like viewer position, date/time, configuration...\n * Some internal values are also stored here for convenience (FPS, drawcalls, mobile detection...).\n * This object must be JSON-serializable.\n */\nclass ViewerState {\n\n    mapVisible = true;\n    sceneVisible = false;\n    dddConfig: DDDViewerConfig;\n    isMobile = false;\n    positionTileZoomLevel = 9;\n    positionWGS84 = [ -8.726, 42.233 ]; // [0.0, 0.0];\n\n    // Position in scene, in engine coordinates (elevation is Y)\n    positionScene = [ 0, 0, 0 ];\n    positionGroundHeight: number = 150.0;\n    positionTerrainElevation = 0;\n    positionHeading = 0.0;\n    positionTilt = 0.0;\n    positionName: string | null = null;\n    positionDate: Date = new Date();\n    positionDateSeconds: number = this.positionDate.getTime() / 1000;\n    geolocationEnabled = false;\n    serverInfoShow = true;\n\n    // TODO: These nodes are instrumented: remove selectedMesh from here and use ids.\n    // TODO: Try removing this and this.sceneViewer id still used\n    sceneSelectedMesh = null;\n    sceneSelectedMeshId: string | null = null;\n\n    sceneFPS: number = 0;\n    sceneDrawCalls: number = 0;\n    sceneTriangles: number = 0;\n    sceneShadowsEnabled = false;\n    sceneTextsEnabled = false;\n    scenePostprocessingEnabled = false;\n    scenePickingEnabled = true;\n    sceneViewModeShow = true;\n    sceneTileDrawDistance = 1;\n    sceneMoveSpeed = 5;\n    sceneCameraWalkHeight = 2.0;\n    sceneViewportRescale = 1;\n    sceneEnvironmentProbe = 16; // null to use a static environment (should be associated to the skybox, but it's currently fixed)\n    sceneSkybox = \"/textures/TropicalSunnyDay\"; // \"@dynamic\"; // \"\"/textures/TropicalSunnyDay\";\n    sceneTextureSet: string | null = \"defaultsplat256\";\n    sceneGroundTextureOverride: string | null = null;\n    sceneTitleText:string | null = null;\n    \n\n    constructor( dddConfig: DDDViewerConfig, initialCoords: number[], isMobile: boolean = false ) {\n\n        this.dddConfig = dddConfig;\n\n        this.isMobile = isMobile;\n        if ( this.isMobile ) {\n            this.sceneViewportRescale = 2;\n            this.sceneTextureSet = null;  // \"default256\";\n        }\n\n        this.positionWGS84 = initialCoords;\n\n        const shadowsEnabled = localStorage.getItem( \"dddSceneShadowsEnabled\" );\n        this.sceneShadowsEnabled = shadowsEnabled ? JSON.parse( shadowsEnabled ) : this.sceneShadowsEnabled;\n\n        const textsEnabled = localStorage.getItem( \"dddSceneTextsEnabled\" );\n        this.sceneTextsEnabled = textsEnabled ? JSON.parse( textsEnabled ) : this.sceneTextsEnabled;\n\n        const textureSet = localStorage.getItem( \"dddSceneTextureSet\" );\n        this.sceneTextureSet = textureSet ? JSON.parse( textureSet ) : this.sceneTextureSet;\n\n        // Start time\n        this.positionDate.setHours( 11 );\n        this.positionDate.setMinutes( 0 );\n\n    }\n}\n\nexport { ViewerState };\n","/* \n* DDDViewer - DDD(3Ds) Viewer library for DDD-generated GIS 3D scenes\n* Copyright 2021 Jose Juan Montes and contributors\n* MIT License (see LICENSE file)\n*/\n\nimport { LayerManager } from \"./LayerManager\";\n\n/**\n * DDD Viewer base layer class.\n */\nabstract class Base3DLayer {\n\n    layerManager: LayerManager | null;\n\n    constructor() {\n        this.layerManager = null;\n    }\n\n    abstract update( deltaTime: number ): void;\n}\n\nexport { Base3DLayer };","import { AbstractMesh, Color3, Mesh, MeshBuilder, Node, Ray, StandardMaterial, Texture, TransformNode, Vector3 } from \"@babylonjs/core\";\nimport { Coordinate } from \"ol/coordinate\";\nimport * as extent from \"ol/extent\";\nimport * as olProj from \"ol/proj\";\nimport { createXYZ, extentFromProjection } from \"ol/tilegrid\";\nimport TileGrid from \"ol/tilegrid/TileGrid\";\nimport { SceneViewer } from \"../SceneViewer\";\nimport { Base3DLayer } from \"./Base3DLayer\";\n\n\n\nclass Tile3D {\n    key: string;\n    status: string | null;\n\n    constructor( key: string ) {\n        this.key = key;\n        this.status = null;\n    }\n}\n\nclass GeoTile3D extends Tile3D {\n    node: Node | null;\n    coordsTileGrid: number[] | null;\n\n    constructor( key: string ) {\n        super( key );\n        this.node = null;\n        this.coordsTileGrid = null;\n    }\n}\n\nclass GeoTile3DLayer extends Base3DLayer {\n    tiles: { [key: string]: GeoTile3D };\n\n    groundTextureLayerUrl: string | null = null;\n    //groundTextureLayerUrl = \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\";  // \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n    //groundTextureLayerUrl = \"http://localhost:8090/wmts/ign_ortho/GLOBAL_WEBMERCATOR/{z}/{x}/{y}.jpeg\";  // \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n\n    private _lastHeight = 0; // Used to hack positioning of tiles before height is known\n    private _lastLoadDynamic = 0;\n    private _initialHeightSet = false;\n\n    tilesLoadedCount = 0;\n    tileGrid: TileGrid;\n\n    constructor() {\n        super();\n        this.tiles = {};\n        // TODO: This makes sense here, but is also duplicated on SceneViewer\n        this.tileGrid = createXYZ({\n            extent: extentFromProjection( \"EPSG:3857\" ),\n            //maxResolution: options.maxResolution,\n            //maxZoom: options.maxZoom,\n            //minZoom: options.minZoom,\n            //tileSize: options.tileSize,\n        });\n    }\n\n    update(): void { \n        this.updateTilesDynamic();\n    }\n\n\n    /*\n    * From: https://bartwronski.com/2017/04/13/cull-that-cone/\n    */\n    testConeSphere( origin: Vector3, forward: Vector3, size: number, angle: number, sphereCenter: Vector3, sphereRadius: number ): boolean {\n        //console.debug(origin, forward, size, angle, sphereCenter, sphereRadius);\n        const V = sphereCenter.subtract( origin );\n        const VlenSq = Vector3.Dot( V, V );\n        const V1len = Vector3.Dot( V, forward );\n        const distanceClosestPoint = Math.cos( angle ) * Math.sqrt( VlenSq - V1len * V1len ) - V1len * Math.sin( angle );\n\n        const angleCull = distanceClosestPoint > sphereRadius;\n        const frontCull = V1len > sphereRadius + size;\n        const backCull  = V1len < -sphereRadius;\n\n        return !( angleCull || frontCull || backCull );\n    }\n\n    updateTilesDynamic(): void {\n\n        // loading chunks each 100 frames. Bad performance \n        this._lastLoadDynamic -= 1;\n        if ( this._lastLoadDynamic > 0 ) { return; }\n        this._lastLoadDynamic = 100;\n\n        const sceneViewer: SceneViewer = this.layerManager!.sceneViewer;\n    \n        const positionWGS84: number[] = <number[]> this.layerManager?.sceneViewer.positionWGS84();\n        const coordsWGS84: Coordinate = [ positionWGS84[0], positionWGS84[1] ];\n        const coordsUtm: Coordinate = olProj.transform(coordsWGS84 , \"EPSG:4326\", \"EPSG:3857\" );\n        const tileCoords = this.tileGrid.getTileCoordForCoordAndZ( coordsUtm, 17 );\n        //const tileKey = tileCoords[0] + \"/\" + tileCoords[1] + \"/\" + tileCoords[2];\n\n        // Calculate frustrum (2D)\n        const frustrumOrigin = sceneViewer.camera!.position.clone();\n        //if (this._lastHeight) { frustrumOrigin.y -= this._lastHeight; }  // Considers all tiles in a plane centered on last\n        frustrumOrigin.y = 0;\n        const frustrumForward = sceneViewer.camera!.getDirection( Vector3.Forward());\n        frustrumForward.y = 0;\n        frustrumForward.normalize();\n        const frustrumSize = sceneViewer.viewerState.sceneTileDrawDistance * 300.0; // 1500.0;\n        const frustrumAngle = sceneViewer.camera!.fov * 2.0; // * (Math.PI / 180.0); // 30.0;\n\n        this.loadTile( tileCoords );  // ensure elevation for current tile\n\n        // Project frustrum corners to tiles\n\n        // Calculate tiles inside frustrum\n        const tiledistWalk = sceneViewer.viewerState.sceneTileDrawDistance + 3;\n        const tiledistDraw = sceneViewer.viewerState.sceneTileDrawDistance + 0.7;\n        for ( let i = -tiledistWalk; i <= tiledistWalk; i++ ) {\n            for ( let j = -tiledistWalk; j <= tiledistWalk; j++ ) {\n\n                // Current tile is already enqueued\n                if ( i === 0 && j === 0 ) { continue; }\n\n                if ( i * i + j * j > tiledistDraw * tiledistDraw ) {\n                    this.disableTile([ tileCoords[0], tileCoords[1] + i, tileCoords[2] + j ]);\n                } else {\n                    const tileCenter = this.tileGrid.getTileCoordCenter([ tileCoords[0], tileCoords[1] + i, tileCoords[2] + j ]);\n                    const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\n                    const tileCenterScene = sceneViewer.projection.forward( tileCenterWGS84 );\n                    const sphereCenter = new Vector3( tileCenterScene[0], 0, tileCenterScene[1]);  // TODO: Get median height from tile\n                    const sphereRadius = 230.0 / 2.0;\n                    if ( this.testConeSphere( frustrumOrigin, frustrumForward, frustrumSize, frustrumAngle, sphereCenter, sphereRadius )) {\n                        //console.debug(\"Loading: \", [tileCoords[0], tileCoords[1] + i, tileCoords[2] + j])\n                        this.loadTile([ tileCoords[0], tileCoords[1] + i, tileCoords[2] + j ]);\n                    } else {\n                        //console.debug(\"Ignoring: \", [tileCoords[0], tileCoords[1] + i, tileCoords[2] + j])\n                        this.disableTile([ tileCoords[0], tileCoords[1] + i, tileCoords[2] + j ]);\n                    }\n                }\n            }\n        }\n\n        // Sort tiles by distance\n\n        // Enqueue (1 on mobile? 2 on PC?)\n\n        // setEnabled(false) on culled chunks\n\n        // update LOD levels (call lodLevel - remove items, etc) per distance\n\n\n        /*\n        for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n                this.loadTile([tileCoords[0], tileCoords[1] + i, tileCoords[2] + j]);\n            }\n        }\n        */\n    }\n\n    disableTile( tileCoords: number[] ): void {\n        const z = tileCoords[0];\n        const x = tileCoords[1];\n        const y = tileCoords[2];\n        const tileKey = z + \"/\" + x + \"/\" + y;\n\n        if ( !( tileKey in this.tiles )) {\n            return;\n        }\n\n        const tile = this.tiles[tileKey];\n        if ( tile.status !== \"loading\" && tile.node!.isEnabled( false )) {\n            tile.node!.setEnabled( false );\n            tile.node!.parent = null;  // TODO: this was not working before (tile.parent did not apply)\n        }\n    }\n\n    /**\n    * Gets tile metadata.\n    * It does this recursively searching for a \"Metadata\" named node, as the path exporting root metadata to the root node or scene itself hasn't been found to work.\n    */\n    getTileMetadata( node: Node ): any {\n        /*if (node.id.startsWith(\"Metadata\")) {\n            return node.metadata.gltf.extras;\n        }*/\n        for ( const child of node.getChildren()) {\n            if ( child.id.indexOf( \"Metadata\" ) > 0 ) {\n                return child.metadata.gltf.extras;\n            }\n        }\n        for ( const child of node.getChildren()) {\n            const md = this.getTileMetadata( <Mesh>child );\n            if ( md !== null ) { return md; }\n        }\n        return null;\n    }\n\n    // TODO: Tile coordinates should be made a type or reuse OpenLayers grid coordinates type\n    loadTile( tileCoords: number[] ): void {\n\n        //console.debug(tileCoords);\n        const z = tileCoords[0];\n        const x = tileCoords[1];\n        const y = tileCoords[2];\n        const tileKey = z + \"/\" + x + \"/\" + y;\n\n        const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\n        const tileCenter = extent.getCenter( tileExtent );\n        const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\n        //const tileCenterScene = this.layerManager!.sceneViewer.projection.forward( tileCenterWGS84 );\n\n        const tileExtentMinScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getBottomLeft( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\n        const tileExtentMaxScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getTopRight( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\n        const sizeWidth = Math.abs( tileExtentMaxScene[0] - tileExtentMinScene[0]);\n        const sizeHeight = Math.abs( tileExtentMaxScene[1] - tileExtentMinScene[1]);\n\n        if ( tileKey in this.tiles ) {\n            const tile = this.tiles[tileKey];\n            if ( tile.status !== \"loading\" && !tile.node!.isEnabled( false )) {\n                tile.node!.parent = null; // this.layerManager!.sceneViewer.scene;\n                tile.node!.setEnabled( true );\n                //tile.node.freezeWorldMatrix();\n            }\n            return;\n        } else {\n            this.tiles[tileKey] = new GeoTile3D( tileKey );\n            this.tiles[tileKey].status = \"loading\";\n            this.tiles[tileKey].coordsTileGrid = tileCoords;\n        }\n\n        //const glb = \"https://www.yourcityracing.com/static/game/acoruna_hercules_500r_-8.406,43.386.glb\";\n        //const tileUrl = \"./scenes/ddd-model.glb\";\n        //const glb = \"https://www.yourcityracing.com/static/game/larochelle_150r_-1.153,46.155.glb\";\n        //const glb = new File([\"\"], \"scene.glb\", {type: \"application/octect-stream\"})\n\n        //const tileUrlBase = './scenes/ddd_http_';\n        //const tileUrlBase = 'http://localhost:8000/cache/ddd_http/';\n        //const tileUrlBase = 'http://' + app.dddConfig.tileUrlBase + ':8000/cache/ddd_http/';\n        //const tileUrlBase = 'http://' + location.hostname + '/cache/ddd_http/';\n        const tileUrlBase = this.layerManager!.sceneViewer.viewerState.dddConfig.tileUrlBase;\n        const tileUrl = tileUrlBase + z + \"/\" + x + \"/\" + y + \".glb\";\n\n        //console.debug(\"Loading: \" + tileUrl);\n\n        const pivot = new TransformNode( \"chunk_\" + tileKey.replace( \"/\", \"_\" ), this.layerManager!.sceneViewer.scene );  // new Mesh(\"chunk_\" + tileKey, this.layerManager.sceneViewer.scene);\n        //let reversePivot = new TransformNode(\"chunk_reverse_\" + tileKey, this.scene);  // new Mesh(\"chunk_\" + tileKey, this.scene);\n        //let rawPivot = new TransformNode(\"chunk_raw_\" + tileKey, this.scene);  // new Mesh(\"chunk_\" + tileKey, this.scene);\n        //reversePivot.scaling = new Vector3(1, 1, -1);  // Babylon uses a parent node with this scale to flip glTF models, redone here\n        //rawPivot.parent = reversePivot;\n        //reversePivot.parent = pivot;\n        //pivot.parent = this.scene;\n\n        let marker = this.loadQuadMarker( tileCoords, Color3.Gray());\n        this.tiles[tileKey].node = marker;\n\n        this.layerManager!.sceneViewer.queueLoader.enqueueLoadModel( tileUrl,\n            // onSuccess\n            ( newMeshes: AbstractMesh[], _particleSystems: any, _skeletons: any ) => {\n                //console.log(\"GLB loaded\", newMeshes);\n\n                marker.dispose( false, true );\n                //marker.parent = null;\n\n                let minHeight = Number.POSITIVE_INFINITY;\n                let maxHeight = Number.NEGATIVE_INFINITY;\n                newMeshes.forEach(( mesh: AbstractMesh, _i: number ) => {\n                    if ( this.layerManager!.sceneViewer.shadowGenerator ) {\n                        mesh.receiveShadows = true;\n                        if ( mesh.metadata && mesh.metadata.gltf.extras &&\n                                (( mesh.metadata.gltf.extras[\"ddd:shadows\"] === false ) ||\n                                 ( mesh.metadata.gltf.extras[\"ddd:shadows\"] === \"false\" ) ||\n                                 ( mesh.metadata.gltf.extras[\"ddd:path\"].indexOf( \"/Areas_\" ) > 0 ) ||\n                                 ( mesh.metadata.gltf.extras[\"ddd:path\"].indexOf( \"/Ways_\" ) > 0 ))) {\n                            //console.debug(\"No shadow\");\n                            return;\n                        }\n                        this.layerManager!.sceneViewer.shadowGenerator.getShadowMap()!.renderList!.push( mesh );\n                    }\n\n                    //console.debug(mesh.getBoundingInfo());\n                    const heightMin = mesh.getBoundingInfo().boundingBox.minimumWorld.y;\n                    if ( heightMin < minHeight && heightMin !== 0 ) { minHeight = heightMin; }\n                    const heightMax = mesh.getBoundingInfo().boundingBox.maximumWorld.y;\n                    if ( heightMax > maxHeight && heightMax !== 0 ) { maxHeight = heightMax; }\n\n                    /*\n                      if(mesh.material) {\n                          if (mesh.id.indexOf(\"Item\") < 0 && mesh.id.indexOf(\"Building\") < 0) {\n                              mesh.material = materialPlane;\n                          }\n                          //mesh.overrideMaterialSideOrientation = Mesh.DOUBLESIDE;\n                          //mesh.updateMeshPositions();\n                      }\n                      */\n                    //console.debug(mesh.absolutePosition);\n                    //mesh.position = new Vector3(mesh.position.x, mesh.position.y, -mesh.position.z);\n                    //mesh.updateMeshPositions();\n                    //mesh.parent = rawPivot;\n                });\n\n                // Reparent root\n                (<Mesh> newMeshes[0]).parent = <Node> pivot;\n                newMeshes[0].id = tileKey.replace( \"/\", \"_\" );\n                this.tiles[tileKey].node = pivot;\n                this.tiles[tileKey].status = \"loaded\";\n\n\n                const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\n                const tileCenter = extent.getCenter( tileExtent );\n                const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\n                const tileCenterScene = this.layerManager!.sceneViewer.projection.forward( tileCenterWGS84 );\n\n                //let distance = 225.0;\n                //pivot.position = new Vector3((x - 62360) * distance, 0, -(y - 48539) * distance);\n                //pivot.scaling = new Vector3(1, 1, -1);\n                pivot.position = new Vector3( tileCenterScene[0], 0, tileCenterScene[1]);\n                pivot.rotation = new Vector3( 0, Math.PI, 0 );\n\n                pivot.freezeWorldMatrix();\n\n                this.tiles[tileKey].node = pivot;\n\n                this._lastHeight = minHeight;\n\n                this.tilesLoadedCount++;\n                if ( ! this._initialHeightSet ) {\n                    //console.debug(\"Repositioning camera height based on terrain height: \" + maxHeight);\n                    //that.layerManager.sceneViewer.camera.position.y += maxHeight;\n\n                    const ray = new Ray( \n                        new Vector3(this.layerManager!.sceneViewer.camera!.position.x,\n                            -100.0, this.layerManager!.sceneViewer.camera!.position.z ),\n                        new Vector3( 0, 1, 0 ), 3000.0 );\n                    const pickResult = this.layerManager!.sceneViewer.scene.pickWithRay( ray );\n                    if ( pickResult && pickResult.pickedMesh && pickResult.pickedMesh.id &&\n                              pickResult.pickedMesh.id.indexOf( \"placeholder_\" ) !== 0 &&\n                              pickResult.pickedMesh.id.indexOf( \"skyBox\" ) !== 0 ) {\n                        //console.debug(\"Setting height from: \" + pickResult.pickedMesh.id);\n                        this._initialHeightSet = true;\n                        this.layerManager!.sceneViewer.camera!.position.y = ( pickResult.distance - 100.0 );\n                        if ( this.layerManager!.sceneViewer.viewerState.positionGroundHeight ) {\n                            this.layerManager!.sceneViewer.camera!.position.y += this.layerManager!.sceneViewer.viewerState.positionGroundHeight;\n                        } else {\n                            this.layerManager!.sceneViewer.camera!.position.y += 40.0;\n                        }\n                    } else {\n                        //that._tilesLoadedCount--;\n                        //that.layerManager.sceneViewer.camera.position.y += maxHeight;\n                    }\n                }\n\n                const tileMetadata = this.getTileMetadata( pivot );\n                //console.debug(\"Tile metadata: \", tileMetadata);\n\n                // Replace materials, instancing...\n                pivot.metadata = {\n                    \"tileCoords\": tileCoords,\n                    \"tileSize\": [ sizeWidth, sizeHeight ],\n                    \"tileInfo\": tileMetadata,\n                };\n\n                this.layerManager!.sceneViewer.scene.blockfreeActiveMeshesAndRenderingGroups = true;\n                this.layerManager!.sceneViewer.processMesh( <Mesh>pivot, <Mesh>pivot );  // TODO: Wrong conversion, use Node for \"processMesh\"\n                this.layerManager!.sceneViewer.scene.blockfreeActiveMeshesAndRenderingGroups = false;\n\n                //pivot.occlusionType = AbstractMesh.OCCLUSION_TYPE_OPTIMISTIC;\n                pivot.freezeWorldMatrix();\n\n                // TODO: Removed during TS migration, but this is needed to support ground texture replacement\n                //this.groundTextureLayerProcessNode( tileCoords, pivot );\n\n                // Check if the selected node is in the recently loaded node\n                // TODO: Should use a generic notification + object id/naming system\n                if ( this.layerManager!.sceneViewer.viewerState.sceneSelectedMeshId ) {\n                    const criteria = { \"_node_name\": this.layerManager!.sceneViewer.viewerState.sceneSelectedMeshId };\n                    //console.debug(criteria);\n                    const foundMesh = this.layerManager!.sceneViewer.findNode( <Mesh> pivot, criteria );\n                    //console.debug(foundMesh);\n                    if ( foundMesh ) {\n                        this.layerManager!.sceneViewer.selectMesh( <Mesh> foundMesh, true );\n                        this.layerManager!.sceneViewer.viewerState.sceneSelectedMeshId = null;  // Triggers watchers update\n                    }\n                }\n\n\n                /*\n                  this.sceneViewer.selectMesh(pickResult.pickedMesh);\n                  let meshName = pickResult.pickedMesh.id.split(\"/\").pop().replaceAll('#', '_'); // .replaceAll(\"_\", \" \");\n                  this.$router.push('/3d/item/' + meshName + '/' + this.sceneViewer.positionString()).catch(()=>{});\n                  */\n\n\n            },\n            // onError\n            ( _scene: any, _msg: string, ex: any ) => {\n                // eslint-disable-next-line no-console\n                console.log( \"Tile model (.glb) loading error: \", ex );\n\n                if ( ex.request && ex.request.status === 404 ) {\n                    // 404 - tile is being generated, show OSM tile as replacement\n                    marker.dispose( false, true );\n                    marker = this.loadQuadTile( tileCoords );  // , Color3.Red()\n                    this.tiles[tileKey].node = marker; // \"notfound\";\n                    this.tiles[tileKey].status = \"notfound\";\n                    this.layerManager!.sceneViewer.viewerState.serverInfoShow = true;\n                } else {\n                    // Error: colour marker red\n                    marker.dispose( false, true );\n                    marker = this.loadQuadTile( tileCoords );  // , Color3.Red()\n                    this.tiles[tileKey].node = marker; // \"notfound\";\n                    this.tiles[tileKey].status = \"error\";\n\n                    const color = Color3.Red();\n                    (<StandardMaterial>(<Mesh>marker).material).emissiveColor = color;\n                }\n\n            }\n        );\n        //model.parent = pivot;\n\n    }\n\n    loadQuadMarker( tileCoords: number[], color: Color3 = Color3.Gray()): Node {\n        const z = tileCoords[0];\n        const x = tileCoords[1];\n        const y = tileCoords[2];\n        const tileKey = z + \"/\" + x + \"/\" + y;\n\n        const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\n        const tileCenter = extent.getCenter( tileExtent );\n        const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\n        const tileCenterScene = this.layerManager!.sceneViewer.projection.forward( tileCenterWGS84 );\n\n        const tileExtentMinScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getBottomLeft( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\n        const tileExtentMaxScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getTopRight( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\n        const sizeWidth = Math.abs( tileExtentMaxScene[0] - tileExtentMinScene[0]);\n        const sizeHeight = Math.abs( tileExtentMaxScene[1] - tileExtentMinScene[1]);\n\n        const marker = MeshBuilder.CreatePlane( \"placeholder_\" + tileKey, { width: sizeWidth, height: sizeHeight, sideOrientation: Mesh.DOUBLESIDE }, this.layerManager!.sceneViewer.scene );\n\n        marker.position = new Vector3( tileCenterScene[0], this._lastHeight, tileCenterScene[1]);\n        marker.rotation = new Vector3( Math.PI * 0.5, 0, 0 );\n\n        //Creation of a repeated textured material\n        const materialPlane = new StandardMaterial( \"textureTile_\" + tileKey, this.layerManager!.sceneViewer.scene );\n        //materialPlane.diffuseTexture = new Texture(\"https://a.tile.openstreetmap.org/\" + z + \"/\" + x + \"/\" + y + \".png\", this.scene);\n        materialPlane.diffuseColor = color;\n        materialPlane.specularColor = Color3.Black();\n        /*\n        materialPlane.diffuseTexture.uScale = 1.0 / 225.0;\n        materialPlane.diffuseTexture.vScale = -1.0 / 225.0;\n        materialPlane.diffuseTexture.uOffset = -0.5;\n        materialPlane.diffuseTexture.vOffset = -0.5;\n        */\n        materialPlane.emissiveColor = color; // new Color3(1.0, 1.0, 1.);\n        materialPlane.disableLighting = true;\n        materialPlane.backFaceCulling = false;\n\n        marker.material = materialPlane;\n\n        return marker;\n    }\n\n    loadQuadTile( tileCoords: number[], color=Color3.White()): Node {\n\n        const z = tileCoords[0];\n        const x = tileCoords[1];\n        const y = tileCoords[2];\n        const tileKey = z + \"/\" + x + \"/\" + y;\n\n        const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\n        const tileCenter = extent.getCenter( tileExtent );\n        const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\n        const tileCenterScene = this.layerManager!.sceneViewer.projection.forward( tileCenterWGS84 );\n\n        const tileExtentMinScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getBottomLeft( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\n        const tileExtentMaxScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getTopRight( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\n        const sizeWidth = Math.abs( tileExtentMaxScene[0] - tileExtentMinScene[0]);\n        const sizeHeight = Math.abs( tileExtentMaxScene[1] - tileExtentMinScene[1]);\n\n        //console.debug(sizeWidth, sizeHeight);\n        const marker = MeshBuilder.CreatePlane( \"placeholder_\" + tileKey, { width: sizeWidth, height: sizeHeight, sideOrientation: Mesh.DOUBLESIDE }, this.layerManager!.sceneViewer.scene );\n\n        marker.position = new Vector3( tileCenterScene[0], this._lastHeight, tileCenterScene[1]);\n        marker.rotation = new Vector3( Math.PI * 0.5, 0, 0 );\n\n        //Creation of a repeated textured material\n        const materialPlane = new StandardMaterial( \"textureTile_\" + tileKey, this.layerManager!.sceneViewer.scene );\n        materialPlane.diffuseTexture = new Texture( \"https://a.tile.openstreetmap.org/\" + z + \"/\" + x + \"/\" + y + \".png\", this.layerManager!.sceneViewer.scene );\n\n        //if (!color) color = Color3.Black; //new Color3(0, 0, 0);\n        materialPlane.specularColor = Color3.Black();\n        /*\n        materialPlane.diffuseTexture.uScale = 1.0 / 225.0;\n        materialPlane.diffuseTexture.vScale = -1.0 / 225.0;\n        materialPlane.diffuseTexture.uOffset = -0.5;\n        materialPlane.diffuseTexture.vOffset = -0.5;\n        */\n        materialPlane.emissiveColor = color;  // new Color3(1.0, 1.0, 1.);\n        materialPlane.disableLighting = true;\n        materialPlane.backFaceCulling = false;\n\n        marker.material = materialPlane;\n\n        return marker;\n    }\n\n    /*\n    groundTextureLayerProcessNode( tileCoords: number[], node: Node ): void {\n\n        let materialGround = null;\n\n        if ( this.groundTextureLayerUrl ) {\n            const z = tileCoords[0];\n            const x = tileCoords[1];\n            const y = tileCoords[2];\n\n            const tileExtent = this.tileGrid.getTileCoordExtent( tileCoords );\n            const tileCenter = extent.getCenter( tileExtent );\n            const tileCenterWGS84 = olProj.transform( tileCenter, \"EPSG:3857\", \"EPSG:4326\" );\n            const tileCenterScene = this.layerManager!.sceneViewer.projection.forward( tileCenterWGS84 );\n\n            const tileExtentMinScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getBottomLeft( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\n            const tileExtentMaxScene = this.layerManager!.sceneViewer.projection.forward( olProj.transform( extent.getTopRight( tileExtent ), \"EPSG:3857\", \"EPSG:4326\" ));\n            const sizeWidth = Math.abs( tileExtentMaxScene[0] - tileExtentMinScene[0]);\n            const sizeHeight = Math.abs( tileExtentMaxScene[1] - tileExtentMinScene[1]);\n\n            // Create material\n            //console.debug(\"Creating material for ground texture: \" + url);\n            const tileKey = tileCoords[0] + \"/\" + tileCoords[1] + \"/\" + tileCoords[2];\n            const url = this.replaceTileCoordsUrl( tileCoords, this.groundTextureLayerUrl );\n            materialGround = new StandardMaterial( \"materialGround_\" + tileKey, this.layerManager!.sceneViewer.scene );\n            materialGround.roughness = 0.95;\n            materialGround.specularColor = new Color3( 0.15, 0.15, 0.15 ); // Color3.Black();\n            //materialGround.specularColor = new Color3(0.2, 0.2, 0.2); // Color3.Black();\n            //materialGround.emissiveColor = Color3.White();  // new Color3(1.0, 1.0, 1.);\n            //materialGround.disableLighting = true;\n            //materialGround.backFaceCulling = false;\n            materialGround.diffuseTexture = new Texture( url, this.layerManager!.sceneViewer.scene );\n            materialGround.diffuseTexture.uScale = 1.0 / ( sizeWidth + 0 );  // Force small texture overlap to avoid texture repeating\n            materialGround.diffuseTexture.vScale = 1.0 / ( sizeHeight + 1 );  // Force small texture overlap to avoid texture repeating\n            materialGround.diffuseTexture.uOffset = -0.5;\n            materialGround.diffuseTexture.vOffset = -0.5;\n            materialGround.diffuseTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n            materialGround.diffuseTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n            //materialGround.bumpTexture = materialGround.diffuseTexture;\n            //materialGround.bumpTexture.uScale = 1.0 / sizeWidth;\n            //materialGround.bumpTexture.vScale = 1.0 / sizeHeight;\n            //materialGround.bumpTexture.uOffset = -0.5;\n            //materialGround.bumpTexture.vOffset = -0.5;\n        }\n\n        // Assign\n        const meshes = node.getChildMeshes();\n        for ( const mesh of meshes ) {\n            if ( mesh && mesh.metadata && mesh.metadata.gltf && mesh.metadata.gltf.extras ) {\n                const metadata = mesh.metadata.gltf.extras;\n                if (( metadata[\"ddd:path\"].indexOf( \"/Areas\" ) > 0 ) ||\n                    ( metadata[\"ddd:path\"].indexOf( \"/Ways\" ) > 0 )) {\n                    if ( materialGround !== null ) {\n                        if ( !( \"_ground_material_original\" in mesh )) {\n                            mesh._ground_material_original = mesh.material;\n                        }\n                        mesh.material = materialGround;\n                    } else {\n                        if ( mesh._ground_material_original ) {\n                            mesh.material = mesh._ground_material_original;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    */\n   \n    /*\n    groundTextureLayerSetUrl( url: string ): void {\n        // \"https://a.tile.openstreetmap.org/\" + z + \"/\" + x + \"/\" + y + \".png\"\n        //console.debug(\"Layer setting ground texture layer: \" + url);\n        this.groundTextureLayerUrl = url;\n       \n        // Update existing tiles\n        for ( const key in this.tiles ) {\n            const tile = this.tiles[key];\n            this.groundTextureLayerProcessNode( tile.coordsTileGrid, tile.node );\n        }\n    }\n    */\n\n    replaceTileCoordsUrl( tileCoords: number[], url: string ): string {\n        let result = url;\n        result = result.replace( \"{z}\", tileCoords[0].toString());\n        result = result.replace( \"{x}\", tileCoords[1].toString());\n        result = result.replace( \"{y}\", tileCoords[2].toString());\n        return result;\n    }\n\n    /*\n    createTextMaterial( text: string ): StandardMaterial {\n\n        //Create dynamic texture\n        const texture = new DynamicTexture( \"dynamicTexture_text_\" + text , { width:512, height:256 }, this.layerManager!.sceneViewer.scene );\n        //var textureContext = texture.getContext();\n        const font = \"bold 44px monospace\";\n        texture.drawText( \"Generating...\\nPlease try again later (5+ min).\", 75, 135, font, \"green\", \"white\", true, true );\n\n        const material = new StandardMaterial( \"Mat\" + text, this.layerManager!.sceneViewer.scene );\n        material.diffuseTexture = texture;\n\n        return material;\n    }\n    */\n\n}\n\n\nexport { GeoTile3DLayer };\n\n","/* eslint-disable indent */\n\nimport { Effect, Material, Scene, ShaderMaterial, Texture } from \"@babylonjs/core\";\n\n/* eslint-disable no-unused-vars, no-var, no-undef, no-debugger, no-console,  */\n\nclass SkyMaterialWrapper {\n\n    material: Material;\n\n    constructor(scene: Scene) { //, splatmapTexture, atlasTexture, atlasNormalTexture, options) {\n        this.material = this.initMaterial(scene);\n        //this.testSplatMaterial(scene);\n    }\n\n    initMaterial(scene: Scene): Material {\n        //, options: any) {\n\n        Effect.ShadersStore[\"customVertexShader\"] = `\n        precision highp float;\n\n        // Attributes\n        attribute vec3 position;\n        attribute vec3 normal;\n        attribute vec2 uv;\n\n        // Uniforms\n        uniform mat4 worldViewProjection;\n\n        // Varying\n        varying vec4 vPosition;\n        varying vec3 vNormal;\n        varying vec2 vUV;\n        void main() {\n\n            vec4 p = vec4( position, 1. );\n\n            vPosition = p;\n            vNormal = normal;\n\n             vUV = uv;\n             // vUV.y =1.-vUV.y;     // flip uv screen ;\n            gl_Position = worldViewProjection * p;\n\n        }`;\n\n        Effect.ShadersStore[\"customFragmentShader\"] = `\n        precision highp float;\n\n        uniform mat4 worldView;\n\n        varying vec4 vPosition;\n\n         precision mediump float;\n\n        // Day and night sky cycle. By László Matuska (@BitOfGold)\n        // Creates a sky texture for a skydome\n        // https://www.shadertoy.com/view/ltlSWB\n\n\n        // based on other shaders, Greetings goes to:\n\n        // Weather. By David Hoskins, May 2014.\n        // https://www.shadertoy.com/view/4dsXWn\n\n        // Edge of atmosphere\n        // created by dmytro rubalskyi (ruba)\n        // https://www.shadertoy.com/view/XlXGzB\n\n        // Starfield01 by xaot88\n        // https://www.shadertoy.com/view/Md2SR3\n        // ======================================================================\n\n        //#define shadertoy 1\n\n        //#define cloud2 1 //second layer of clouds, altocumulus or stratocumulus. (in 4K, too slow on my GTX970. HD is OK.)\n        //plan was to make cirrus too...\n\n        #ifdef GL_ES\n        precision highp float;\n        #endif\n\n        const float M_PI = 3.1415926535;\n        const float DEGRAD = M_PI / 180.0;\n\n        #ifdef shadertoy\n            float height = 500.0; //viewer height\n            float cloudy = 0.6; //0.6 //0.0 clear sky\n        #else\n            varying vec3 vNormal;\n            varying vec2 vUV;\n            uniform sampler2D iChannel0;\n            uniform float sunx;\n            uniform float suny;\n            //uniform float moonx;\n            //uniform float moony;\n            //uniform float cloudy;\n           // uniform float height;\n            uniform float time;\n        #endif\n        //float moonx = 1.0;\n        //float moony = 9.6;\n        //float sunx = 1.0;\n        //float suny = 1.6;\n        float cloudy = 0.1;\n        float height = 500.0;\n\n        //rendering quality\n        const int steps = 8; //16 is fast, 128 or 256 is extreme high\n        const int stepss = 8; //16 is fast, 16 or 32 is high\n\n        //float t = 12.0; //fix time. 12.0 91.0, 97.0, 188.0, 72.0, 74.0\n\n        float camroty = 0. * DEGRAD; //20.\n        float haze = 0.1; //0.2\n        float cloudyhigh = 0.05; //if cloud2 defined\n\n        float cloudnear = 1.0; //9e3 12e3  //do not render too close clouds on the zenith\n        float cloudfar = 1e3; //15e3 17e3\n\n        float startreshold = 0.99; //0.99 0.98 star density treshold.\n\n        const float I = 10.; //sun light power, 10.0 is normal\n        const float g = 0.45; //light concentration .76 //.45 //.6  .45 is normaL\n        const float g2 = g * g;\n\n        //Reyleigh scattering (sky color, atmospheric up to 8km)\n        vec3 bR = vec3(5.8e-6, 13.5e-6, 33.1e-6); //normal earth\n        //vec3 bR = vec3(5.8e-6, 33.1e-6, 13.5e-6); //purple\n        //vec3 bR = vec3( 63.5e-6, 13.1e-6, 50.8e-6 ); //green\n        //vec3 bR = vec3( 13.5e-6, 23.1e-6, 115.8e-6 ); //yellow\n        //vec3 bR = vec3( 5.5e-6, 15.1e-6, 355.8e-6 ); //yeellow\n        //vec3 bR = vec3(3.5e-6, 333.1e-6, 235.8e-6 ); //red-purple\n\n        //Mie scattering (water particles up to 1km)\n        vec3 bM = vec3(21e-6); //normal mie\n        //vec3 bM = vec3(50e-6); //high mie\n\n        //-----\n        //positions\n\n        const float Hr = 8000.0; //Reyleight scattering top\n        const float Hm = 1000.0; //Mie scattering top\n\n        const float R0 = 6360e3; //planet radius\n        const float Ra = 6380e3; //atmosphere radius\n        vec3 C = vec3(0., -R0, 0.); //planet center\n        vec3 Ds = normalize(vec3(0., .09, -1.)); //sun direction?\n\n        //--------------------------------------------------------------------------\n        //Starfield\n        // License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n        // Return random noise in the range [0.0, 1.0], as a function of x.\n        float Noise2d( in vec2 x )\n        {\n            float xhash = cos( x.x * 37.0 );\n            float yhash = cos( x.y * 57.0 );\n            return fract( 415.92653 * ( xhash + yhash ) );\n        }\n\n        // Convert Noise2d() into a \"star field\" by stomping everthing below fThreshhold to zero.\n        float NoisyStarField( in vec2 vSamplePos, float fThreshhold )\n        {\n            float StarVal = Noise2d( vSamplePos );\n            if ( StarVal >= fThreshhold )\n                StarVal = pow( (StarVal - fThreshhold)/(1.0 - fThreshhold), 6.0 );\n            else\n                StarVal = 0.0;\n            return StarVal;\n        }\n\n        // Stabilize NoisyStarField() by only sampling at integer values.\n        float StableStarField( in vec2 vSamplePos, float fThreshhold )\n        {\n            // Linear interpolation between four samples.\n            // Note: This approach has some visual artifacts.\n            // There must be a better way to \"anti alias\" the star field.\n            float fractX = fract( vSamplePos.x );\n            float fractY = fract( vSamplePos.y );\n            vec2 floorSample = floor( vSamplePos );\n            float v1 = NoisyStarField( floorSample, fThreshhold );\n            float v2 = NoisyStarField( floorSample + vec2( 0.0, 1.0 ), fThreshhold );\n            float v3 = NoisyStarField( floorSample + vec2( 1.0, 0.0 ), fThreshhold );\n            float v4 = NoisyStarField( floorSample + vec2( 1.0, 1.0 ), fThreshhold );\n\n            float StarVal =   v1 * ( 1.0 - fractX ) * ( 1.0 - fractY )\n                            + v2 * ( 1.0 - fractX ) * fractY\n                            + v3 * fractX * ( 1.0 - fractY )\n                            + v4 * fractX * fractY;\n            return StarVal;\n        }\n\n\n        //--------------------------------------------------------------------------\n        //Cloud noise\n\n        float Noise( in vec3 x )\n        {\n            vec3 p = floor(x);\n            vec3 f = fract(x);\n            f = f*f*(3.0-2.0*f);\n\n            vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\n            vec2 rg = texture( iChannel0, (uv+ 0.5)/256.0, -100.0).yx;\n            return mix( rg.x, rg.y, f.z );\n        }\n\n        float fnoise( vec3 p, in float t )\n        {\n            p *= .25;\n            float f;\n\n            f = 0.5000 * Noise(p); p = p * 3.02; p.y -= t*.2;\n            f += 0.2500 * Noise(p); p = p * 3.03; p.y += t*.06;\n            f += 0.1250 * Noise(p); p = p * 3.01;\n            f += 0.0625   * Noise(p); p =  p * 3.03;\n            f += 0.03125  * Noise(p); p =  p * 3.02;\n            f += 0.015625 * Noise(p);\n            return f;\n        }\n\n        //--------------------------------------------------------------------------\n        //clouds, scattering\n\n        float cloud(vec3 p, in float t) {\n            float cld = fnoise(p*2e-4,t) + cloudy*0.1 ;\n            cld = smoothstep(.4+.04, .6+.04, cld);\n            cld *= 70.;\n            return cld+haze;\n        }\n\n\n        void densities(in vec3 pos, out float rayleigh, out float mie, in float t) {\n            float h = length(pos - C) - R0;\n            rayleigh =  exp(-h/Hr);\n            vec3 d = pos;\n            d.y = 0.0;\n            float dist = length(d);\n\n            float cld = 0.;\n            if (5e3 < h && h < 8e3) {\n                cld = cloud(pos+vec3(23175.7, 0.,-t*3e3), t);\n                cld *= sin(3.1415*(h-5e3)/5e3) * cloudy;\n            }\n            #ifdef cloud2\n                float cld2 = 0.;\n                if (12e3 < h && h < 15.5e3) {\n                    cld2 = fnoise(pos*3e-4,t)*cloud(pos*32.0+vec3(27612.3, 0.,-t*15e3), t);\n                    cld2 *= sin(3.1413*(h-12e3)/12e3) * cloudyhigh;\n                    cld2 = clamp(cld2,0.0,1.0);\n                }\n\n            #endif\n\n\n            if ( dist < cloudfar) {\n                float factor = clamp(1.0-((cloudfar - dist)/(cloudfar-cloudnear)),0.0,1.0);\n                cld *= factor;\n            }\n\n            mie = exp(-h/Hm) + cld + haze;\n            #ifdef cloud2\n                mie += cld2;\n            #endif\n\n        }\n\n        float escape(in vec3 p, in vec3 d, in float R) {\n\n            vec3 v = p - C;\n            float b = dot(v, d);\n            float c = dot(v, v) - R*R;\n            float det2 = b * b - c;\n            if (det2 < 0.) return -1.;\n            float det = sqrt(det2);\n            float t1 = -b - det, t2 = -b + det;\n            return (t1 >= 0.) ? t1 : t2;\n        }\n\n        // this can be explained: http://www.scratchapixel.com/lessons/3d-advanced-lessons/simulating-the-colors-of-the-sky/atmospheric-scattering/\n        void scatter(vec3 o, vec3 d, out vec3 col, out float scat, in float t) {\n            float L = escape(o, d, Ra);\n            float mu = dot(d, Ds);\n            float opmu2 = 1. + mu*mu;\n            float phaseR = .0596831 * opmu2;\n            float phaseM = .1193662 * (1. - g2) * opmu2 / ((2. + g2) * pow(1. + g2 - 2.*g*mu, 1.5));\n\n            float depthR = 0., depthM = 0.;\n            vec3 R = vec3(0.), M = vec3(0.);\n\n            float dl = L / float(steps);\n            for (int i = 0; i < steps; ++i) {\n                float l = float(i) * dl;\n                vec3 p = o + d * l;\n\n                float dR, dM;\n                densities(p, dR, dM, t);\n                dR *= dl; dM *= dl;\n                depthR += dR;\n                depthM += dM;\n\n                float Ls = escape(p, Ds, Ra);\n                if (Ls > 0.) {\n                    float dls = Ls / float(stepss);\n                    float depthRs = 0., depthMs = 0.;\n                    for (int j = 0; j < stepss; ++j) {\n                        float ls = float(j) * dls;\n                        vec3 ps = p + Ds * ls;\n                        float dRs, dMs;\n                        densities(ps, dRs, dMs, t);\n                        depthRs += dRs * dls;\n                        depthMs += dMs * dls;\n                    }\n\n                    vec3 A = exp(-(bR * (depthRs + depthR) + bM * (depthMs + depthM)));\n                    R += A * dR;\n                    M += A * dM;\n                }\n            }\n\n\n            col = I * (R * bR * phaseR + M * bM * phaseM);\n            scat = 1.0 - clamp(depthM*1e-5,0.,1.);\n        }\n\n        //--------------------------------------------------------------------------\n        // ray casting\n\n\n        vec3 rotate_y(vec3 v, float angle)\n        {\n            float ca = cos(angle); float sa = sin(angle);\n            return v*mat3(\n                +ca, +.0, -sa,\n                +.0,+1.0, +.0,\n                +sa, +.0, +ca);\n        }\n\n        vec3 rotate_x(vec3 v, float angle)\n        {\n            float ca = cos(angle); float sa = sin(angle);\n            return v*mat3(\n                +1.0, +.0, +.0,\n                +.0, +ca, -sa,\n                +.0, +sa, +ca);\n        }\n\n        float map(float value, float min1, float max1, float min2, float max2) {\n          return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n        }\n\n        vec4 generate(in vec2 uv, in vec2 fragCoord, in vec2 sunpos, in float t) {\n\n            //if (fragCoord.y < -0.25) discard;\n\n            float att = 1.0;\n            float staratt = 0.0;\n            if (sunpos.y < 0.10) {\n                staratt = map(sunpos.y, 0.20, -1.0, 0.0, 1.0);\n            }\n            if (sunpos.y < -0.10) {\n                att = map(sunpos.y, -0.10, -1.0, 1.0, 0.25);\n                //sunpos.y = -sunpos.y;\n            }\n\n            vec3 O = vec3(0., height, 0.);\n\n            vec3 D = normalize(rotate_y(rotate_x(vec3(0.0, 0.0, 1.0),-uv.y*M_PI/2.0),-uv.x*M_PI+camroty));\n\n            if (D.y <= -0.15) {\n                D.y = -0.3 -D.y;\n            }\n\n            Ds= normalize(rotate_y(rotate_x(vec3(0.0, 0.0, 1.0),-sunpos.y*M_PI/2.0),-sunpos.x*M_PI));\n            float scat = 0.;\n            vec3 color = vec3(0.);\n            scatter(O, D, color, scat, t);\n            color *= att;\n\n            float starcolor = StableStarField(fragCoord * 1024.0, startreshold);\n            color += vec3(scat * starcolor * staratt);\n\n            // Water mix to bottom half, black at night\n            if (fragCoord.y < 0.0) {\n                float waterFactor = smoothstep(-0.05, 0.0, sunpos.y);\n                vec3 waterColor = vec3(70.0 / 255.0, 135.0 / 255.0, 240.0 / 255.0) * waterFactor;\n                float waterMix = smoothstep(0.0, -0.1, fragCoord.y);\n                waterColor = (color + waterColor) / 2.0;\n                color = color + (waterColor - color) * waterMix;\n            }\n\n            float env = 1.0;\n            return(vec4(env * pow(color, vec3(.7)),1.0));\n        }\n\n        void main() {\n            vec2 uv = vec2(2.0 * vUV.x - 1.0,  -2.0 *  vUV.y + 1.0);\n            vec2 sunpos = vec2(sunx,suny);\n            float t = time;\n            gl_FragColor = generate(uv, uv, sunpos,t);\n        }\n\n        `;\n\n\n        // Compile\n        var shaderMaterial = new ShaderMaterial( \"skyShader\", scene, {\n            vertex: \"custom\",\n            fragment: \"custom\",\n            },\n            {\n            attributes: [ \"position\", \"normal\", \"uv\" ],\n            uniforms: [ \"world\", \"worldView\", \"worldViewProjection\", \"view\", \"projection\" ]\n            });\n\n        const mainTexture = new Texture(\"/textures/skynoise.png\", scene, true, false, 12);  // NEAREST\n\n        //https://www.shadertoy.com/view/ltlSWB\n        shaderMaterial.setTexture(\"iChannel0\", mainTexture);\n        shaderMaterial.setFloat(\"time\", 0);\n        shaderMaterial.setFloat(\"offset\", 10);\n        shaderMaterial.setFloat(\"sunx\", 2.0);\n        shaderMaterial.setFloat(\"suny\", 0.9);\n        shaderMaterial.backFaceCulling = false;\n\n\n        /*\n        var time = 0;\n        scene.registerBeforeRender(function () {\n            var shaderMaterial = scene.getMaterialByName(\"skyShader\");\n            shaderMaterial.setFloat(\"time\", time);\n\n            //Animate Move Sun\n            shaderMaterial.setFloat(\"suny\", Math.sin(time/3));\n            shaderMaterial.setFloat(\"sunx\", Math.sin(time/3));\n            time += 0.008;\n        });\n        */\n\n        this.material = shaderMaterial;\n        return shaderMaterial;\n\n    }\n\n}\n\nexport { SkyMaterialWrapper };","// extracted by mini-css-extract-plugin\nexport {};","export * from \"./abstractScene\";\r\nexport * from \"./Actions/index\";\r\nexport * from \"./Animations/index\";\r\nexport * from \"./assetContainer\";\r\nexport * from \"./Audio/index\";\r\nexport * from \"./Behaviors/index\";\r\nexport * from \"./Bones/index\";\r\nexport * from \"./Buffers/index\";\r\nexport * from \"./Cameras/index\";\r\nexport * from \"./Collisions/index\";\r\nexport * from \"./Compute/index\";\r\nexport * from \"./Culling/index\";\r\nexport * from \"./Debug/index\";\r\nexport * from \"./DeviceInput/index\";\r\nexport * from \"./Engines/index\";\r\nexport * from \"./Events/index\";\r\nexport * from \"./Gamepads/index\";\r\nexport * from \"./Gizmos/index\";\r\nexport * from \"./Helpers/index\";\r\nexport * from \"./Instrumentation/index\";\r\nexport * from \"./Layers/index\";\r\nexport * from \"./LensFlares/index\";\r\nexport * from \"./Lights/index\";\r\nexport * from \"./Loading/index\";\r\nexport * from \"./Materials/index\";\r\nexport * from \"./Maths/index\";\r\nexport * from \"./Meshes/index\";\r\nexport * from \"./Morph/index\";\r\nexport * from \"./Navigation/index\";\r\nexport * from \"./node\";\r\nexport * from \"./Offline/index\";\r\nexport * from \"./Particles/index\";\r\nexport * from \"./Physics/index\";\r\nexport * from \"./PostProcesses/index\";\r\nexport * from \"./Probes/index\";\r\nexport * from \"./Rendering/index\";\r\nexport * from \"./scene\";\r\nexport * from \"./sceneComponent\";\r\nexport * from \"./Sprites/index\";\r\nexport * from \"./States/index\";\r\nexport * from \"./Misc/index\";\r\nexport * from \"./XR/index\";\r\nexport * from \"./types\";\r\n//# sourceMappingURL=index.js.map","export * from \"./glTFFileLoader\";\r\nexport * from \"./glTFValidation\";\r\nimport * as GLTF1 from \"./1.0\";\r\nimport * as GLTF2 from \"./2.0\";\r\nexport { GLTF1, GLTF2 };\r\n//# sourceMappingURL=index.js.map","export * from \"./cell\";\r\nexport * from \"./custom\";\r\nexport * from \"./fire\";\r\nexport * from \"./fur\";\r\nexport * from \"./gradient\";\r\nexport * from \"./grid\";\r\nexport * from \"./lava\";\r\nexport * from \"./mix\";\r\nexport * from \"./normal\";\r\nexport * from \"./shadowOnly\";\r\nexport * from \"./simple\";\r\nexport * from \"./sky\";\r\nexport * from \"./terrain\";\r\nexport * from \"./triPlanar\";\r\nexport * from \"./water\";\r\n//# sourceMappingURL=index.js.map","\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/AssertionError\n */\nimport { VERSION } from './util.js';\n/**\n * Error object thrown when an assertion failed. This is an ECMA-262 Error,\n * extended with a `code` property.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.\n */\nvar AssertionError = /** @class */ (function (_super) {\n    __extends(AssertionError, _super);\n    /**\n     * @param {number} code Error code.\n     */\n    function AssertionError(code) {\n        var _this = this;\n        var path = VERSION === 'latest' ? VERSION : 'v' + VERSION.split('-')[0];\n        var message = 'Assertion failed. See https://openlayers.org/en/' +\n            path +\n            '/doc/errors/#' +\n            code +\n            ' for details.';\n        _this = _super.call(this, message) || this;\n        /**\n         * Error code. The meaning of the code can be found on\n         * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with\n         * the version found in the OpenLayers script's header comment if a version\n         * other than the latest is used).\n         * @type {number}\n         * @api\n         */\n        _this.code = code;\n        /**\n         * @type {string}\n         */\n        _this.name = 'AssertionError';\n        // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40\n        _this.message = message;\n        return _this;\n    }\n    return AssertionError;\n}(Error));\nexport default AssertionError;\n//# sourceMappingURL=AssertionError.js.map","/**\n * @module ol/TileRange\n */\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = /** @class */ (function () {\n    /**\n     * @param {number} minX Minimum X.\n     * @param {number} maxX Maximum X.\n     * @param {number} minY Minimum Y.\n     * @param {number} maxY Maximum Y.\n     */\n    function TileRange(minX, maxX, minY, maxY) {\n        /**\n         * @type {number}\n         */\n        this.minX = minX;\n        /**\n         * @type {number}\n         */\n        this.maxX = maxX;\n        /**\n         * @type {number}\n         */\n        this.minY = minY;\n        /**\n         * @type {number}\n         */\n        this.maxY = maxY;\n    }\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {boolean} Contains tile coordinate.\n     */\n    TileRange.prototype.contains = function (tileCoord) {\n        return this.containsXY(tileCoord[1], tileCoord[2]);\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Contains.\n     */\n    TileRange.prototype.containsTileRange = function (tileRange) {\n        return (this.minX <= tileRange.minX &&\n            tileRange.maxX <= this.maxX &&\n            this.minY <= tileRange.minY &&\n            tileRange.maxY <= this.maxY);\n    };\n    /**\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @return {boolean} Contains coordinate.\n     */\n    TileRange.prototype.containsXY = function (x, y) {\n        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Equals.\n     */\n    TileRange.prototype.equals = function (tileRange) {\n        return (this.minX == tileRange.minX &&\n            this.minY == tileRange.minY &&\n            this.maxX == tileRange.maxX &&\n            this.maxY == tileRange.maxY);\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     */\n    TileRange.prototype.extend = function (tileRange) {\n        if (tileRange.minX < this.minX) {\n            this.minX = tileRange.minX;\n        }\n        if (tileRange.maxX > this.maxX) {\n            this.maxX = tileRange.maxX;\n        }\n        if (tileRange.minY < this.minY) {\n            this.minY = tileRange.minY;\n        }\n        if (tileRange.maxY > this.maxY) {\n            this.maxY = tileRange.maxY;\n        }\n    };\n    /**\n     * @return {number} Height.\n     */\n    TileRange.prototype.getHeight = function () {\n        return this.maxY - this.minY + 1;\n    };\n    /**\n     * @return {import(\"./size.js\").Size} Size.\n     */\n    TileRange.prototype.getSize = function () {\n        return [this.getWidth(), this.getHeight()];\n    };\n    /**\n     * @return {number} Width.\n     */\n    TileRange.prototype.getWidth = function () {\n        return this.maxX - this.minX + 1;\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Intersects.\n     */\n    TileRange.prototype.intersects = function (tileRange) {\n        return (this.minX <= tileRange.maxX &&\n            this.maxX >= tileRange.minX &&\n            this.minY <= tileRange.maxY &&\n            this.maxY >= tileRange.minY);\n    };\n    return TileRange;\n}());\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange=} tileRange TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n    if (tileRange !== undefined) {\n        tileRange.minX = minX;\n        tileRange.maxX = maxX;\n        tileRange.minY = minY;\n        tileRange.maxY = maxY;\n        return tileRange;\n    }\n    else {\n        return new TileRange(minX, maxX, minY, maxY);\n    }\n}\nexport default TileRange;\n//# sourceMappingURL=TileRange.js.map","/**\n * @module ol/array\n */\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function=} opt_comparator Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, opt_comparator) {\n    var mid, cmp;\n    var comparator = opt_comparator || numberSafeCompareFunction;\n    var low = 0;\n    var high = haystack.length;\n    var found = false;\n    while (low < high) {\n        /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n         * to double (which gives the wrong results). */\n        mid = low + ((high - low) >> 1);\n        cmp = +comparator(haystack[mid], needle);\n        if (cmp < 0.0) {\n            /* Too low. */\n            low = mid + 1;\n        }\n        else {\n            /* Key found or too high */\n            high = mid;\n            found = !cmp;\n        }\n    }\n    /* Key not found. */\n    return found ? low : ~low;\n}\n/**\n * Compare function for array sort that is safe for numbers.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function numberSafeCompareFunction(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n}\n/**\n * Whether the array contains the given object.\n * @param {Array<*>} arr The array to test for the presence of the element.\n * @param {*} obj The object for which to test.\n * @return {boolean} The object is in the array.\n */\nexport function includes(arr, obj) {\n    return arr.indexOf(obj) >= 0;\n}\n/**\n * @param {Array<number>} arr Array.\n * @param {number} target Target.\n * @param {number} direction 0 means return the nearest, > 0\n *    means return the largest nearest, < 0 means return the\n *    smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n    var n = arr.length;\n    if (arr[0] <= target) {\n        return 0;\n    }\n    else if (target <= arr[n - 1]) {\n        return n - 1;\n    }\n    else {\n        var i = void 0;\n        if (direction > 0) {\n            for (i = 1; i < n; ++i) {\n                if (arr[i] < target) {\n                    return i - 1;\n                }\n            }\n        }\n        else if (direction < 0) {\n            for (i = 1; i < n; ++i) {\n                if (arr[i] <= target) {\n                    return i;\n                }\n            }\n        }\n        else {\n            for (i = 1; i < n; ++i) {\n                if (arr[i] == target) {\n                    return i;\n                }\n                else if (arr[i] < target) {\n                    if (arr[i - 1] - target < target - arr[i]) {\n                        return i - 1;\n                    }\n                    else {\n                        return i;\n                    }\n                }\n            }\n        }\n        return n - 1;\n    }\n}\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n    while (begin < end) {\n        var tmp = arr[begin];\n        arr[begin] = arr[end];\n        arr[end] = tmp;\n        ++begin;\n        --end;\n    }\n}\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n    var extension = Array.isArray(data) ? data : [data];\n    var length = extension.length;\n    for (var i = 0; i < length; i++) {\n        arr[arr.length] = extension[i];\n    }\n}\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n    var i = arr.indexOf(obj);\n    var found = i > -1;\n    if (found) {\n        arr.splice(i, 1);\n    }\n    return found;\n}\n/**\n * @param {Array<VALUE>} arr The array to search in.\n * @param {function(VALUE, number, ?) : boolean} func The function to compare.\n * @template VALUE\n * @return {VALUE|null} The element found or null.\n */\nexport function find(arr, func) {\n    var length = arr.length >>> 0;\n    var value;\n    for (var i = 0; i < length; i++) {\n        value = arr[i];\n        if (func(value, i, arr)) {\n            return value;\n        }\n    }\n    return null;\n}\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n    var len1 = arr1.length;\n    if (len1 !== arr2.length) {\n        return false;\n    }\n    for (var i = 0; i < len1; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Sort the passed array such that the relative order of equal elements is preverved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n    var length = arr.length;\n    var tmp = Array(arr.length);\n    var i;\n    for (i = 0; i < length; i++) {\n        tmp[i] = { index: i, value: arr[i] };\n    }\n    tmp.sort(function (a, b) {\n        return compareFnc(a.value, b.value) || a.index - b.index;\n    });\n    for (i = 0; i < arr.length; i++) {\n        arr[i] = tmp[i].value;\n    }\n}\n/**\n * @param {Array<*>} arr The array to search in.\n * @param {Function} func Comparison function.\n * @return {number} Return index.\n */\nexport function findIndex(arr, func) {\n    var index;\n    var found = !arr.every(function (el, idx) {\n        index = idx;\n        return !func(el, idx, arr);\n    });\n    return found ? index : -1;\n}\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function=} opt_func Comparison function.\n * @param {boolean=} opt_strict Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, opt_func, opt_strict) {\n    var compare = opt_func || numberSafeCompareFunction;\n    return arr.every(function (currentVal, index) {\n        if (index === 0) {\n            return true;\n        }\n        var res = compare(arr[index - 1], currentVal);\n        return !(res > 0 || (opt_strict && res === 0));\n    });\n}\n//# sourceMappingURL=array.js.map","/**\n * @module ol/asserts\n */\nimport AssertionError from './AssertionError.js';\n/**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {number} errorCode Error code.\n */\nexport function assert(assertion, errorCode) {\n    if (!assertion) {\n        throw new AssertionError(errorCode);\n    }\n}\n//# sourceMappingURL=asserts.js.map","/**\n * @module ol/coordinate\n */\nimport { getWidth } from './extent.js';\nimport { modulo } from './math.js';\nimport { padNumber } from './string.js';\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n    coordinate[0] += +delta[0];\n    coordinate[1] += +delta[1];\n    return coordinate;\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n    var r = circle.getRadius();\n    var center = circle.getCenter();\n    var x0 = center[0];\n    var y0 = center[1];\n    var x1 = coordinate[0];\n    var y1 = coordinate[1];\n    var dx = x1 - x0;\n    var dy = y1 - y0;\n    if (dx === 0 && dy === 0) {\n        dx = 1;\n    }\n    var d = Math.sqrt(dx * dx + dy * dy);\n    var x = x0 + (r * dx) / d;\n    var y = y0 + (r * dy) / d;\n    return [x, y];\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n    var x0 = coordinate[0];\n    var y0 = coordinate[1];\n    var start = segment[0];\n    var end = segment[1];\n    var x1 = start[0];\n    var y1 = start[1];\n    var x2 = end[0];\n    var y2 = end[1];\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    var along = dx === 0 && dy === 0\n        ? 0\n        : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n    var x, y;\n    if (along <= 0) {\n        x = x1;\n        y = y1;\n    }\n    else if (along >= 1) {\n        x = x2;\n        y = y2;\n    }\n    else {\n        x = x1 + along * dx;\n        y = y1 + along * dy;\n    }\n    return [x, y];\n}\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY();\n *     var out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var stringifyFunc = createStringXY(2);\n *     var out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(opt_fractionDigits) {\n    return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n        return toStringXY(coordinate, opt_fractionDigits);\n    });\n}\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {\n    var normalizedDegrees = modulo(degrees + 180, 360) - 180;\n    var x = Math.abs(3600 * normalizedDegrees);\n    var dflPrecision = opt_fractionDigits || 0;\n    var precision = Math.pow(10, dflPrecision);\n    var deg = Math.floor(x / 3600);\n    var min = Math.floor((x - deg * 3600) / 60);\n    var sec = x - deg * 3600 - min * 60;\n    sec = Math.ceil(sec * precision) / precision;\n    if (sec >= 60) {\n        sec = 0;\n        min += 1;\n    }\n    if (min >= 60) {\n        min = 0;\n        deg += 1;\n    }\n    return (deg +\n        '\\u00b0 ' +\n        padNumber(min, 2) +\n        '\\u2032 ' +\n        padNumber(sec, 2, dflPrecision) +\n        '\\u2033' +\n        (normalizedDegrees == 0\n            ? ''\n            : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0)));\n}\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var template = 'Coordinate is ({x}|{y}).';\n *     var out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, opt_fractionDigits) {\n    if (coordinate) {\n        return template\n            .replace('{x}', coordinate[0].toFixed(opt_fractionDigits))\n            .replace('{y}', coordinate[1].toFixed(opt_fractionDigits));\n    }\n    else {\n        return '';\n    }\n}\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n    var equals = true;\n    for (var i = coordinate1.length - 1; i >= 0; --i) {\n        if (coordinate1[i] != coordinate2[i]) {\n            equals = false;\n            break;\n        }\n    }\n    return equals;\n}\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n    var cosAngle = Math.cos(angle);\n    var sinAngle = Math.sin(angle);\n    var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    coordinate[0] = x;\n    coordinate[1] = y;\n    return coordinate;\n}\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n    coordinate[0] *= scale;\n    coordinate[1] *= scale;\n    return coordinate;\n}\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n    var dx = coord1[0] - coord2[0];\n    var dy = coord1[1] - coord2[1];\n    return dx * dx + dy * dy;\n}\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n    return Math.sqrt(squaredDistance(coord1, coord2));\n}\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n    return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, opt_fractionDigits) {\n    if (coordinate) {\n        return (degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) +\n            ' ' +\n            degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits));\n    }\n    else {\n        return '';\n    }\n}\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate';\n *\n *     var coord = [7.85, 47.983333];\n *     var out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number=} opt_fractionDigits The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, opt_fractionDigits) {\n    return format(coordinate, '{x}, {y}', opt_fractionDigits);\n}\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\nexport function wrapX(coordinate, projection) {\n    if (projection.canWrapX()) {\n        var worldWidth = getWidth(projection.getExtent());\n        var worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n        if (worldsAway) {\n            coordinate[0] -= worldsAway * worldWidth;\n        }\n    }\n    return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number=} opt_sourceExtentWidth Width of the source extent.\n * @return {number} Offset in world widths.\n */\nexport function getWorldsAway(coordinate, projection, opt_sourceExtentWidth) {\n    var projectionExtent = projection.getExtent();\n    var worldsAway = 0;\n    if (projection.canWrapX() &&\n        (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {\n        var sourceExtentWidth = opt_sourceExtentWidth || getWidth(projectionExtent);\n        worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);\n    }\n    return worldsAway;\n}\n//# sourceMappingURL=coordinate.js.map","/**\n * @module ol/extent\n */\nimport Corner from './extent/Corner.js';\nimport Relationship from './extent/Relationship.js';\nimport { assert } from './asserts.js';\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n    var extent = createEmpty();\n    for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        extendCoordinate(extent, coordinates[i]);\n    }\n    return extent;\n}\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent=} opt_extent Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\n    var minX = Math.min.apply(null, xs);\n    var minY = Math.min.apply(null, ys);\n    var maxX = Math.max.apply(null, xs);\n    var maxY = Math.max.apply(null, ys);\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n}\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = extent[0] - value;\n        opt_extent[1] = extent[1] - value;\n        opt_extent[2] = extent[2] + value;\n        opt_extent[3] = extent[3] + value;\n        return opt_extent;\n    }\n    else {\n        return [\n            extent[0] - value,\n            extent[1] - value,\n            extent[2] + value,\n            extent[3] + value,\n        ];\n    }\n}\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = extent[0];\n        opt_extent[1] = extent[1];\n        opt_extent[2] = extent[2];\n        opt_extent[3] = extent[3];\n        return opt_extent;\n    }\n    else {\n        return extent.slice();\n    }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n    var dx, dy;\n    if (x < extent[0]) {\n        dx = extent[0] - x;\n    }\n    else if (extent[2] < x) {\n        dx = x - extent[2];\n    }\n    else {\n        dx = 0;\n    }\n    if (y < extent[1]) {\n        dy = extent[1] - y;\n    }\n    else if (extent[3] < y) {\n        dy = y - extent[3];\n    }\n    else {\n        dy = 0;\n    }\n    return dx * dx + dy * dy;\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n    return containsXY(extent, coordinate[0], coordinate[1]);\n}\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n    return (extent1[0] <= extent2[0] &&\n        extent2[2] <= extent1[2] &&\n        extent1[1] <= extent2[1] &&\n        extent2[3] <= extent1[3]);\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n    var minX = extent[0];\n    var minY = extent[1];\n    var maxX = extent[2];\n    var maxY = extent[3];\n    var x = coordinate[0];\n    var y = coordinate[1];\n    var relationship = Relationship.UNKNOWN;\n    if (x < minX) {\n        relationship = relationship | Relationship.LEFT;\n    }\n    else if (x > maxX) {\n        relationship = relationship | Relationship.RIGHT;\n    }\n    if (y < minY) {\n        relationship = relationship | Relationship.BELOW;\n    }\n    else if (y > maxY) {\n        relationship = relationship | Relationship.ABOVE;\n    }\n    if (relationship === Relationship.UNKNOWN) {\n        relationship = Relationship.INTERSECTING;\n    }\n    return relationship;\n}\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n    return [Infinity, Infinity, -Infinity, -Infinity];\n}\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent=} opt_extent Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = minX;\n        opt_extent[1] = minY;\n        opt_extent[2] = maxX;\n        opt_extent[3] = maxY;\n        return opt_extent;\n    }\n    else {\n        return [minX, minY, maxX, maxY];\n    }\n}\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(opt_extent) {\n    return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\n    var x = coordinate[0];\n    var y = coordinate[1];\n    return createOrUpdate(x, y, x, y, opt_extent);\n}\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\n    var extent = createOrUpdateEmpty(opt_extent);\n    return extendCoordinates(extent, coordinates);\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {\n    var extent = createOrUpdateEmpty(opt_extent);\n    return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, opt_extent) {\n    var extent = createOrUpdateEmpty(opt_extent);\n    return extendRings(extent, rings);\n}\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n    return (extent1[0] == extent2[0] &&\n        extent1[2] == extent2[2] &&\n        extent1[1] == extent2[1] &&\n        extent1[3] == extent2[3]);\n}\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n    return (Math.abs(extent1[0] - extent2[0]) < tolerance &&\n        Math.abs(extent1[2] - extent2[2]) < tolerance &&\n        Math.abs(extent1[1] - extent2[1]) < tolerance &&\n        Math.abs(extent1[3] - extent2[3]) < tolerance);\n}\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n    if (extent2[0] < extent1[0]) {\n        extent1[0] = extent2[0];\n    }\n    if (extent2[2] > extent1[2]) {\n        extent1[2] = extent2[2];\n    }\n    if (extent2[1] < extent1[1]) {\n        extent1[1] = extent2[1];\n    }\n    if (extent2[3] > extent1[3]) {\n        extent1[3] = extent2[3];\n    }\n    return extent1;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n    if (coordinate[0] < extent[0]) {\n        extent[0] = coordinate[0];\n    }\n    if (coordinate[0] > extent[2]) {\n        extent[2] = coordinate[0];\n    }\n    if (coordinate[1] < extent[1]) {\n        extent[1] = coordinate[1];\n    }\n    if (coordinate[1] > extent[3]) {\n        extent[3] = coordinate[1];\n    }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n    for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n        extendCoordinate(extent, coordinates[i]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n    for (; offset < end; offset += stride) {\n        extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n    for (var i = 0, ii = rings.length; i < ii; ++i) {\n        extendCoordinates(extent, rings[i]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n    extent[0] = Math.min(extent[0], x);\n    extent[1] = Math.min(extent[1], y);\n    extent[2] = Math.max(extent[2], x);\n    extent[3] = Math.max(extent[3], y);\n}\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n    var val;\n    val = callback(getBottomLeft(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getBottomRight(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getTopRight(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getTopLeft(extent));\n    if (val) {\n        return val;\n    }\n    return false;\n}\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n    var area = 0;\n    if (!isEmpty(extent)) {\n        area = getWidth(extent) * getHeight(extent);\n    }\n    return area;\n}\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n    return [extent[0], extent[1]];\n}\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n    return [extent[2], extent[1]];\n}\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n    return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./extent/Corner.js\").default} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n    var coordinate;\n    if (corner === Corner.BOTTOM_LEFT) {\n        coordinate = getBottomLeft(extent);\n    }\n    else if (corner === Corner.BOTTOM_RIGHT) {\n        coordinate = getBottomRight(extent);\n    }\n    else if (corner === Corner.TOP_LEFT) {\n        coordinate = getTopLeft(extent);\n    }\n    else if (corner === Corner.TOP_RIGHT) {\n        coordinate = getTopRight(extent);\n    }\n    else {\n        assert(false, 13); // Invalid corner\n    }\n    return coordinate;\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n    var minX = Math.min(extent1[0], extent2[0]);\n    var minY = Math.min(extent1[1], extent2[1]);\n    var maxX = Math.max(extent1[2], extent2[2]);\n    var maxY = Math.max(extent1[3], extent2[3]);\n    return (maxX - minX) * (maxY - minY);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent=} opt_extent Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, opt_extent) {\n    var dx = (resolution * size[0]) / 2;\n    var dy = (resolution * size[1]) / 2;\n    var cosRotation = Math.cos(rotation);\n    var sinRotation = Math.sin(rotation);\n    var xCos = dx * cosRotation;\n    var xSin = dx * sinRotation;\n    var yCos = dy * cosRotation;\n    var ySin = dy * sinRotation;\n    var x = center[0];\n    var y = center[1];\n    var x0 = x - xCos + ySin;\n    var x1 = x - xCos - ySin;\n    var x2 = x + xCos - ySin;\n    var x3 = x + xCos + ySin;\n    var y0 = y - xSin - yCos;\n    var y1 = y - xSin + yCos;\n    var y2 = y + xSin + yCos;\n    var y3 = y + xSin - yCos;\n    return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);\n}\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n    return extent[3] - extent[1];\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n    var intersection = getIntersection(extent1, extent2);\n    return getArea(intersection);\n}\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent=} opt_extent Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, opt_extent) {\n    var intersection = opt_extent ? opt_extent : createEmpty();\n    if (intersects(extent1, extent2)) {\n        if (extent1[0] > extent2[0]) {\n            intersection[0] = extent1[0];\n        }\n        else {\n            intersection[0] = extent2[0];\n        }\n        if (extent1[1] > extent2[1]) {\n            intersection[1] = extent1[1];\n        }\n        else {\n            intersection[1] = extent2[1];\n        }\n        if (extent1[2] < extent2[2]) {\n            intersection[2] = extent1[2];\n        }\n        else {\n            intersection[2] = extent2[2];\n        }\n        if (extent1[3] < extent2[3]) {\n            intersection[3] = extent1[3];\n        }\n        else {\n            intersection[3] = extent2[3];\n        }\n    }\n    else {\n        createOrUpdateEmpty(intersection);\n    }\n    return intersection;\n}\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n    return getWidth(extent) + getHeight(extent);\n}\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n    return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n    return [extent[0], extent[3]];\n}\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n    return [extent[2], extent[3]];\n}\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n    return extent[2] - extent[0];\n}\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n    return (extent1[0] <= extent2[2] &&\n        extent1[2] >= extent2[0] &&\n        extent1[1] <= extent2[3] &&\n        extent1[3] >= extent2[1]);\n}\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n    return extent[2] < extent[0] || extent[3] < extent[1];\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Extent=} opt_extent Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, opt_extent) {\n    if (opt_extent) {\n        opt_extent[0] = extent[0];\n        opt_extent[1] = extent[1];\n        opt_extent[2] = extent[2];\n        opt_extent[3] = extent[3];\n        return opt_extent;\n    }\n    else {\n        return extent;\n    }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n    var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n    var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n    extent[0] -= deltaX;\n    extent[2] += deltaX;\n    extent[1] -= deltaY;\n    extent[3] += deltaY;\n}\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n    var intersects = false;\n    var startRel = coordinateRelationship(extent, start);\n    var endRel = coordinateRelationship(extent, end);\n    if (startRel === Relationship.INTERSECTING ||\n        endRel === Relationship.INTERSECTING) {\n        intersects = true;\n    }\n    else {\n        var minX = extent[0];\n        var minY = extent[1];\n        var maxX = extent[2];\n        var maxY = extent[3];\n        var startX = start[0];\n        var startY = start[1];\n        var endX = end[0];\n        var endY = end[1];\n        var slope = (endY - startY) / (endX - startX);\n        var x = void 0, y = void 0;\n        if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n            // potentially intersects top\n            x = endX - (endY - maxY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects &&\n            !!(endRel & Relationship.RIGHT) &&\n            !(startRel & Relationship.RIGHT)) {\n            // potentially intersects right\n            y = endY - (endX - maxX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n        if (!intersects &&\n            !!(endRel & Relationship.BELOW) &&\n            !(startRel & Relationship.BELOW)) {\n            // potentially intersects bottom\n            x = endX - (endY - minY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects &&\n            !!(endRel & Relationship.LEFT) &&\n            !(startRel & Relationship.LEFT)) {\n            // potentially intersects left\n            y = endY - (endX - minX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n    }\n    return intersects;\n}\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent=} opt_extent Destination extent.\n * @param {number=} opt_stops Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, opt_extent, opt_stops) {\n    var coordinates = [];\n    if (opt_stops > 1) {\n        var width = extent[2] - extent[0];\n        var height = extent[3] - extent[1];\n        for (var i = 0; i < opt_stops; ++i) {\n            coordinates.push(extent[0] + (width * i) / opt_stops, extent[1], extent[2], extent[1] + (height * i) / opt_stops, extent[2] - (width * i) / opt_stops, extent[3], extent[0], extent[3] - (height * i) / opt_stops);\n        }\n    }\n    else {\n        coordinates = [\n            extent[0],\n            extent[1],\n            extent[2],\n            extent[1],\n            extent[2],\n            extent[3],\n            extent[0],\n            extent[3],\n        ];\n    }\n    transformFn(coordinates, coordinates, 2);\n    var xs = [];\n    var ys = [];\n    for (var i = 0, l = coordinates.length; i < l; i += 2) {\n        xs.push(coordinates[i]);\n        ys.push(coordinates[i + 1]);\n    }\n    return _boundingExtentXYs(xs, ys, opt_extent);\n}\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n    var projectionExtent = projection.getExtent();\n    var center = getCenter(extent);\n    if (projection.canWrapX() &&\n        (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {\n        var worldWidth = getWidth(projectionExtent);\n        var worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n        var offset = worldsAway * worldWidth;\n        extent[0] -= offset;\n        extent[2] -= offset;\n    }\n    return extent;\n}\n//# sourceMappingURL=extent.js.map","/**\n * @module ol/extent/Corner\n */\n/**\n * Extent corner.\n * @enum {string}\n */\nexport default {\n    BOTTOM_LEFT: 'bottom-left',\n    BOTTOM_RIGHT: 'bottom-right',\n    TOP_LEFT: 'top-left',\n    TOP_RIGHT: 'top-right',\n};\n//# sourceMappingURL=Corner.js.map","/**\n * @module ol/extent/Relationship\n */\n/**\n * Relationship to an extent.\n * @enum {number}\n */\nexport default {\n    UNKNOWN: 0,\n    INTERSECTING: 1,\n    ABOVE: 2,\n    RIGHT: 4,\n    BELOW: 8,\n    LEFT: 16,\n};\n//# sourceMappingURL=Relationship.js.map","/**\n * @module ol/geom/GeometryType\n */\n/**\n * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, `'Circle'`.\n * @enum {string}\n */\nexport default {\n    POINT: 'Point',\n    LINE_STRING: 'LineString',\n    LINEAR_RING: 'LinearRing',\n    POLYGON: 'Polygon',\n    MULTI_POINT: 'MultiPoint',\n    MULTI_LINE_STRING: 'MultiLineString',\n    MULTI_POLYGON: 'MultiPolygon',\n    GEOMETRY_COLLECTION: 'GeometryCollection',\n    CIRCLE: 'Circle',\n};\n//# sourceMappingURL=GeometryType.js.map","/**\n * @module ol/math\n */\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\n/**\n * Return the hyperbolic cosine of a given number. The method will use the\n * native `Math.cosh` function if it is available, otherwise the hyperbolic\n * cosine will be calculated via the reference implementation of the Mozilla\n * developer network.\n *\n * @param {number} x X.\n * @return {number} Hyperbolic cosine of x.\n */\nexport var cosh = (function () {\n    // Wrapped in a iife, to save the overhead of checking for the native\n    // implementation on every invocation.\n    var cosh;\n    if ('cosh' in Math) {\n        // The environment supports the native Math.cosh function, use it…\n        cosh = Math.cosh;\n    }\n    else {\n        // … else, use the reference implementation of MDN:\n        cosh = function (x) {\n            var y = /** @type {Math} */ (Math).exp(x);\n            return (y + 1 / y) / 2;\n        };\n    }\n    return cosh;\n})();\n/**\n * Return the base 2 logarithm of a given number. The method will use the\n * native `Math.log2` function if it is available, otherwise the base 2\n * logarithm will be calculated via the reference implementation of the\n * Mozilla developer network.\n *\n * @param {number} x X.\n * @return {number} Base 2 logarithm of x.\n */\nexport var log2 = (function () {\n    // Wrapped in a iife, to save the overhead of checking for the native\n    // implementation on every invocation.\n    var log2;\n    if ('log2' in Math) {\n        // The environment supports the native Math.log2 function, use it…\n        log2 = Math.log2;\n    }\n    else {\n        // … else, use the reference implementation of MDN:\n        log2 = function (x) {\n            return Math.log(x) * Math.LOG2E;\n        };\n    }\n    return log2;\n})();\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    if (dx !== 0 || dy !== 0) {\n        var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            x1 = x2;\n            y1 = y2;\n        }\n        else if (t > 0) {\n            x1 += dx * t;\n            y1 += dy * t;\n        }\n    }\n    return squaredDistance(x, y, x1, y1);\n}\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    return dx * dx + dy * dy;\n}\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n    var n = mat.length;\n    for (var i = 0; i < n; i++) {\n        // Find max in the i-th column (ignoring i - 1 first rows)\n        var maxRow = i;\n        var maxEl = Math.abs(mat[i][i]);\n        for (var r = i + 1; r < n; r++) {\n            var absValue = Math.abs(mat[r][i]);\n            if (absValue > maxEl) {\n                maxEl = absValue;\n                maxRow = r;\n            }\n        }\n        if (maxEl === 0) {\n            return null; // matrix is singular\n        }\n        // Swap max row with i-th (current) row\n        var tmp = mat[maxRow];\n        mat[maxRow] = mat[i];\n        mat[i] = tmp;\n        // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n        for (var j = i + 1; j < n; j++) {\n            var coef = -mat[j][i] / mat[i][i];\n            for (var k = i; k < n + 1; k++) {\n                if (i == k) {\n                    mat[j][k] = 0;\n                }\n                else {\n                    mat[j][k] += coef * mat[i][k];\n                }\n            }\n        }\n    }\n    // Solve Ax=b for upper triangular matrix A (mat)\n    var x = new Array(n);\n    for (var l = n - 1; l >= 0; l--) {\n        x[l] = mat[l][n] / mat[l][l];\n        for (var m = l - 1; m >= 0; m--) {\n            mat[m][n] -= mat[m][l] * x[l];\n        }\n    }\n    return x;\n}\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n    return (angleInRadians * 180) / Math.PI;\n}\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n    return (angleInDegrees * Math.PI) / 180;\n}\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n    var r = a % b;\n    return r * b < 0 ? r + b : r;\n}\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n    return a + x * (b - a);\n}\n//# sourceMappingURL=math.js.map","/**\n * @module ol/obj\n */\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.\n *\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\nexport var assign = typeof Object.assign === 'function'\n    ? Object.assign\n    : function (target, var_sources) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        var output = Object(target);\n        for (var i = 1, ii = arguments.length; i < ii; ++i) {\n            var source = arguments[i];\n            if (source !== undefined && source !== null) {\n                for (var key in source) {\n                    if (source.hasOwnProperty(key)) {\n                        output[key] = source[key];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\nexport function clear(object) {\n    for (var property in object) {\n        delete object[property];\n    }\n}\n/**\n * Polyfill for Object.values().  Get an array of property values from an object.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\n *\n * @param {!Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\nexport var getValues = typeof Object.values === 'function'\n    ? Object.values\n    : function (object) {\n        var values = [];\n        for (var property in object) {\n            values.push(object[property]);\n        }\n        return values;\n    };\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\nexport function isEmpty(object) {\n    var property;\n    for (property in object) {\n        return false;\n    }\n    return !property;\n}\n//# sourceMappingURL=obj.js.map","/**\n * @module ol/proj\n */\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj~addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection} object for the new projection and add it with\n * {@link module:ol/proj~addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj~addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection} with\n * {@link module:ol/proj~addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport Units, { METERS_PER_UNIT } from './proj/Units.js';\nimport { PROJECTIONS as EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326, } from './proj/epsg3857.js';\nimport { PROJECTIONS as EPSG4326_PROJECTIONS } from './proj/epsg4326.js';\nimport { add as addProj, clear as clearProj, get as getProj, } from './proj/projections.js';\nimport { add as addTransformFunc, clear as clearTransformFuncs, get as getTransformFunc, } from './proj/transforms.js';\nimport { applyTransform, getWidth } from './extent.js';\nimport { clamp, modulo } from './math.js';\nimport { getDistance } from './sphere.js';\nimport { getWorldsAway } from './coordinate.js';\n/**\n * A projection as {@link module:ol/proj/Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\nexport { METERS_PER_UNIT };\nexport { Projection };\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, opt_output, opt_dimension) {\n    var output;\n    if (opt_output !== undefined) {\n        for (var i = 0, ii = input.length; i < ii; ++i) {\n            opt_output[i] = input[i];\n        }\n        output = opt_output;\n    }\n    else {\n        output = input.slice();\n    }\n    return output;\n}\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, opt_output, opt_dimension) {\n    if (opt_output !== undefined && input !== opt_output) {\n        for (var i = 0, ii = input.length; i < ii; ++i) {\n            opt_output[i] = input[i];\n        }\n        input = opt_output;\n    }\n    return input;\n}\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n    addProj(projection.getCode(), projection);\n    addTransformFunc(projection, projection, cloneTransform);\n}\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n    projections.forEach(addProjection);\n}\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n    return typeof projectionLike === 'string'\n        ? getProj(/** @type {string} */ (projectionLike))\n        : /** @type {Projection} */ (projectionLike) || null;\n}\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the 'point' pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").default=} opt_units Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, opt_units) {\n    projection = get(projection);\n    var pointResolution;\n    var getter = projection.getPointResolutionFunc();\n    if (getter) {\n        pointResolution = getter(resolution, point);\n        if (opt_units && opt_units !== projection.getUnits()) {\n            var metersPerUnit = projection.getMetersPerUnit();\n            if (metersPerUnit) {\n                pointResolution =\n                    (pointResolution * metersPerUnit) / METERS_PER_UNIT[opt_units];\n            }\n        }\n    }\n    else {\n        var units = projection.getUnits();\n        if ((units == Units.DEGREES && !opt_units) || opt_units == Units.DEGREES) {\n            pointResolution = resolution;\n        }\n        else {\n            // Estimate point resolution by transforming the center pixel to EPSG:4326,\n            // measuring its width and height on the normal sphere, and taking the\n            // average of the width and height.\n            var toEPSG4326_1 = getTransformFromProjections(projection, get('EPSG:4326'));\n            if (toEPSG4326_1 === identityTransform && units !== Units.DEGREES) {\n                // no transform is available\n                pointResolution = resolution * projection.getMetersPerUnit();\n            }\n            else {\n                var vertices = [\n                    point[0] - resolution / 2,\n                    point[1],\n                    point[0] + resolution / 2,\n                    point[1],\n                    point[0],\n                    point[1] - resolution / 2,\n                    point[0],\n                    point[1] + resolution / 2,\n                ];\n                vertices = toEPSG4326_1(vertices, vertices, 2);\n                var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n                var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n                pointResolution = (width + height) / 2;\n            }\n            var metersPerUnit = opt_units\n                ? METERS_PER_UNIT[opt_units]\n                : projection.getMetersPerUnit();\n            if (metersPerUnit !== undefined) {\n                pointResolution /= metersPerUnit;\n            }\n        }\n    }\n    return pointResolution;\n}\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n    addProjections(projections);\n    projections.forEach(function (source) {\n        projections.forEach(function (destination) {\n            if (source !== destination) {\n                addTransformFunc(source, destination, cloneTransform);\n            }\n        });\n    });\n}\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\n    projections1.forEach(function (projection1) {\n        projections2.forEach(function (projection2) {\n            addTransformFunc(projection1, projection2, forwardTransform);\n            addTransformFunc(projection2, projection1, inverseTransform);\n        });\n    });\n}\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n    clearProj();\n    clearTransformFuncs();\n}\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n    if (!projection) {\n        return get(defaultCode);\n    }\n    else if (typeof projection === 'string') {\n        return get(projection);\n    }\n    else {\n        return /** @type {Projection} */ (projection);\n    }\n}\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n    return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>=} opt_output Output.\n     * @param {number=} opt_dimension Dimension.\n     * @return {Array<number>} Output.\n     */\n    function (input, opt_output, opt_dimension) {\n        var length = input.length;\n        var dimension = opt_dimension !== undefined ? opt_dimension : 2;\n        var output = opt_output !== undefined ? opt_output : new Array(length);\n        for (var i = 0; i < length; i += dimension) {\n            var point = coordTransform([input[i], input[i + 1]]);\n            output[i] = point[0];\n            output[i + 1] = point[1];\n            for (var j = dimension - 1; j >= 2; --j) {\n                output[i + j] = input[i + j];\n            }\n        }\n        return output;\n    });\n}\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n    var sourceProj = get(source);\n    var destProj = get(destination);\n    addTransformFunc(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\n    addTransformFunc(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\n}\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike=} opt_projection Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, opt_projection) {\n    return transform(coordinate, 'EPSG:4326', opt_projection !== undefined ? opt_projection : 'EPSG:3857');\n}\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike=} opt_projection Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, opt_projection) {\n    var lonLat = transform(coordinate, opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');\n    var lon = lonLat[0];\n    if (lon < -180 || lon > 180) {\n        lonLat[0] = modulo(lon + 180, 360) - 180;\n    }\n    return lonLat;\n}\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n    if (projection1 === projection2) {\n        return true;\n    }\n    var equalUnits = projection1.getUnits() === projection2.getUnits();\n    if (projection1.getCode() === projection2.getCode()) {\n        return equalUnits;\n    }\n    else {\n        var transformFunc = getTransformFromProjections(projection1, projection2);\n        return transformFunc === cloneTransform && equalUnits;\n    }\n}\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(sourceProjection, destinationProjection) {\n    var sourceCode = sourceProjection.getCode();\n    var destinationCode = destinationProjection.getCode();\n    var transformFunc = getTransformFunc(sourceCode, destinationCode);\n    if (!transformFunc) {\n        transformFunc = identityTransform;\n    }\n    return transformFunc;\n}\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n    var sourceProjection = get(source);\n    var destinationProjection = get(destination);\n    return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj~transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n    var transformFunc = getTransform(source, destination);\n    return transformFunc(coordinate, undefined, coordinate.length);\n}\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number=} opt_stops Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, opt_stops) {\n    var transformFunc = getTransform(source, destination);\n    return applyTransform(extent, transformFunc, undefined, opt_stops);\n}\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(point, sourceProjection, destinationProjection) {\n    var transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\n    return transformFunc(point);\n}\n/**\n * @type {?Projection}\n */\nvar userProjection = null;\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @param {ProjectionLike} projection The user projection.\n */\nexport function setUserProjection(projection) {\n    userProjection = get(projection);\n}\n/**\n * Clear the user projection if set.  Note that this method is not yet a part of\n * the stable API.  Support for user projections is not yet complete and should\n * be considered experimental.\n */\nexport function clearUserProjection() {\n    userProjection = null;\n}\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @returns {?Projection} The user projection (or null if not set).\n */\nexport function getUserProjection() {\n    return userProjection;\n}\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.  Note that this\n * method is not yet a part of the stable API.  Support for user projections is\n * not yet complete and should be considered experimental.\n */\nexport function useGeographic() {\n    setUserProjection('EPSG:4326');\n}\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @returns {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n    if (!userProjection) {\n        return coordinate;\n    }\n    return transform(coordinate, sourceProjection, userProjection);\n}\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @returns {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n    if (!userProjection) {\n        return coordinate;\n    }\n    return transform(coordinate, userProjection, destProjection);\n}\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @returns {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n    if (!userProjection) {\n        return extent;\n    }\n    return transformExtent(extent, sourceProjection, userProjection);\n}\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @returns {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n    if (!userProjection) {\n        return extent;\n    }\n    return transformExtent(extent, userProjection, destProjection);\n}\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destiation).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destiation).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n    return function (coord) {\n        var sourceX = coord[0];\n        var sourceY = coord[1];\n        var transformed, worldsAway;\n        if (sourceProj.canWrapX()) {\n            var sourceExtent = sourceProj.getExtent();\n            var sourceExtentWidth = getWidth(sourceExtent);\n            worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n            if (worldsAway) {\n                // Move x to the real world\n                sourceX = sourceX - worldsAway * sourceExtentWidth;\n            }\n            sourceX = clamp(sourceX, sourceExtent[0], sourceExtent[2]);\n            sourceY = clamp(sourceY, sourceExtent[1], sourceExtent[3]);\n            transformed = transform([sourceX, sourceY]);\n        }\n        else {\n            transformed = transform(coord);\n        }\n        if (worldsAway && destProj.canWrapX()) {\n            // Move transformed coordinate back to the offset world\n            transformed[0] += worldsAway * getWidth(destProj.getExtent());\n        }\n        return transformed;\n    };\n}\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n    // Add transformations that don't alter coordinates to convert within set of\n    // projections with equal meaning.\n    addEquivalentProjections(EPSG3857_PROJECTIONS);\n    addEquivalentProjections(EPSG4326_PROJECTIONS);\n    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n    // coordinates and back.\n    addEquivalentTransforms(EPSG4326_PROJECTIONS, EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326);\n}\naddCommon();\n//# sourceMappingURL=proj.js.map","/**\n * @module ol/proj/Projection\n */\nimport { METERS_PER_UNIT } from './Units.js';\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").default|string} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `{number}` view resolution and an `{import(\"../coordinate.js\").Coordinate}` as arguments, and returns\n * the `{number}` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj#getPointResolution} function will be used.\n */\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj~get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4~register} function.\n *\n * @api\n */\nvar Projection = /** @class */ (function () {\n    /**\n     * @param {Options} options Projection options.\n     */\n    function Projection(options) {\n        /**\n         * @private\n         * @type {string}\n         */\n        this.code_ = options.code;\n        /**\n         * Units of projected coordinates. When set to `TILE_PIXELS`, a\n         * `this.extent_` and `this.worldExtent_` must be configured properly for each\n         * tile.\n         * @private\n         * @type {import(\"./Units.js\").default}\n         */\n        this.units_ = /** @type {import(\"./Units.js\").default} */ (options.units);\n        /**\n         * Validity extent of the projection in projected coordinates. For projections\n         * with `TILE_PIXELS` units, this is the extent of the tile in\n         * tile pixel space.\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.extent_ = options.extent !== undefined ? options.extent : null;\n        /**\n         * Extent of the world in EPSG:4326. For projections with\n         * `TILE_PIXELS` units, this is the extent of the tile in\n         * projected coordinate space.\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.worldExtent_ =\n            options.worldExtent !== undefined ? options.worldExtent : null;\n        /**\n         * @private\n         * @type {string}\n         */\n        this.axisOrientation_ =\n            options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.global_ = options.global !== undefined ? options.global : false;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.canWrapX_ = !!(this.global_ && this.extent_);\n        /**\n         * @private\n         * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n         */\n        this.getPointResolutionFunc_ = options.getPointResolution;\n        /**\n         * @private\n         * @type {import(\"../tilegrid/TileGrid.js\").default}\n         */\n        this.defaultTileGrid_ = null;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.metersPerUnit_ = options.metersPerUnit;\n    }\n    /**\n     * @return {boolean} The projection is suitable for wrapping the x-axis\n     */\n    Projection.prototype.canWrapX = function () {\n        return this.canWrapX_;\n    };\n    /**\n     * Get the code for this projection, e.g. 'EPSG:4326'.\n     * @return {string} Code.\n     * @api\n     */\n    Projection.prototype.getCode = function () {\n        return this.code_;\n    };\n    /**\n     * Get the validity extent for this projection.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    Projection.prototype.getExtent = function () {\n        return this.extent_;\n    };\n    /**\n     * Get the units of this projection.\n     * @return {import(\"./Units.js\").default} Units.\n     * @api\n     */\n    Projection.prototype.getUnits = function () {\n        return this.units_;\n    };\n    /**\n     * Get the amount of meters per unit of this projection.  If the projection is\n     * not configured with `metersPerUnit` or a units identifier, the return is\n     * `undefined`.\n     * @return {number|undefined} Meters.\n     * @api\n     */\n    Projection.prototype.getMetersPerUnit = function () {\n        return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n    };\n    /**\n     * Get the world extent for this projection.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    Projection.prototype.getWorldExtent = function () {\n        return this.worldExtent_;\n    };\n    /**\n     * Get the axis orientation of this projection.\n     * Example values are:\n     * enu - the default easting, northing, elevation.\n     * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n     *     or south orientated transverse mercator.\n     * wnu - westing, northing, up - some planetary coordinate systems have\n     *     \"west positive\" coordinate systems\n     * @return {string} Axis orientation.\n     * @api\n     */\n    Projection.prototype.getAxisOrientation = function () {\n        return this.axisOrientation_;\n    };\n    /**\n     * Is this projection a global projection which spans the whole world?\n     * @return {boolean} Whether the projection is global.\n     * @api\n     */\n    Projection.prototype.isGlobal = function () {\n        return this.global_;\n    };\n    /**\n     * Set if the projection is a global projection which spans the whole world\n     * @param {boolean} global Whether the projection is global.\n     * @api\n     */\n    Projection.prototype.setGlobal = function (global) {\n        this.global_ = global;\n        this.canWrapX_ = !!(global && this.extent_);\n    };\n    /**\n     * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n     */\n    Projection.prototype.getDefaultTileGrid = function () {\n        return this.defaultTileGrid_;\n    };\n    /**\n     * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n     */\n    Projection.prototype.setDefaultTileGrid = function (tileGrid) {\n        this.defaultTileGrid_ = tileGrid;\n    };\n    /**\n     * Set the validity extent for this projection.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @api\n     */\n    Projection.prototype.setExtent = function (extent) {\n        this.extent_ = extent;\n        this.canWrapX_ = !!(this.global_ && extent);\n    };\n    /**\n     * Set the world extent for this projection.\n     * @param {import(\"../extent.js\").Extent} worldExtent World extent\n     *     [minlon, minlat, maxlon, maxlat].\n     * @api\n     */\n    Projection.prototype.setWorldExtent = function (worldExtent) {\n        this.worldExtent_ = worldExtent;\n    };\n    /**\n     * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}\n     * for this projection.\n     * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n     * @api\n     */\n    Projection.prototype.setGetPointResolution = function (func) {\n        this.getPointResolutionFunc_ = func;\n    };\n    /**\n     * Get the custom point resolution function for this projection (if set).\n     * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n     * resolution function (if set).\n     */\n    Projection.prototype.getPointResolutionFunc = function () {\n        return this.getPointResolutionFunc_;\n    };\n    return Projection;\n}());\nexport default Projection;\n//# sourceMappingURL=Projection.js.map","/**\n * @module ol/proj/Units\n */\n/**\n * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or\n * `'us-ft'`.\n * @enum {string}\n */\nvar Units = {\n    /**\n     * Degrees\n     * @api\n     */\n    DEGREES: 'degrees',\n    /**\n     * Feet\n     * @api\n     */\n    FEET: 'ft',\n    /**\n     * Meters\n     * @api\n     */\n    METERS: 'm',\n    /**\n     * Pixels\n     * @api\n     */\n    PIXELS: 'pixels',\n    /**\n     * Tile Pixels\n     * @api\n     */\n    TILE_PIXELS: 'tile-pixels',\n    /**\n     * US Feet\n     * @api\n     */\n    USFEET: 'us-ft',\n};\n/**\n * Meters per unit lookup table.\n * @const\n * @type {Object<Units, number>}\n * @api\n */\nexport var METERS_PER_UNIT = {};\n// use the radius of the Normal sphere\nMETERS_PER_UNIT[Units.DEGREES] = (2 * Math.PI * 6370997) / 360;\nMETERS_PER_UNIT[Units.FEET] = 0.3048;\nMETERS_PER_UNIT[Units.METERS] = 1;\nMETERS_PER_UNIT[Units.USFEET] = 1200 / 3937;\nexport default Units;\n//# sourceMappingURL=Units.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { cosh } from '../math.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = /** @class */ (function (_super) {\n    __extends(EPSG3857Projection, _super);\n    /**\n     * @param {string} code Code.\n     */\n    function EPSG3857Projection(code) {\n        return _super.call(this, {\n            code: code,\n            units: Units.METERS,\n            extent: EXTENT,\n            global: true,\n            worldExtent: WORLD_EXTENT,\n            getPointResolution: function (resolution, point) {\n                return resolution / cosh(point[1] / RADIUS);\n            },\n        }) || this;\n    }\n    return EPSG3857Projection;\n}(Projection));\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [\n    new EPSG3857Projection('EPSG:3857'),\n    new EPSG3857Projection('EPSG:102100'),\n    new EPSG3857Projection('EPSG:102113'),\n    new EPSG3857Projection('EPSG:900913'),\n    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n    var length = input.length;\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var output = opt_output;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        }\n        else {\n            output = new Array(length);\n        }\n    }\n    for (var i = 0; i < length; i += dimension) {\n        output[i] = (HALF_SIZE * input[i]) / 180;\n        var y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n        if (y > MAX_SAFE_Y) {\n            y = MAX_SAFE_Y;\n        }\n        else if (y < -MAX_SAFE_Y) {\n            y = -MAX_SAFE_Y;\n        }\n        output[i + 1] = y;\n    }\n    return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n    var length = input.length;\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var output = opt_output;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        }\n        else {\n            output = new Array(length);\n        }\n    }\n    for (var i = 0; i < length; i += dimension) {\n        output[i] = (180 * input[i]) / HALF_SIZE;\n        output[i + 1] =\n            (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n    }\n    return output;\n}\n//# sourceMappingURL=epsg3857.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-180, -90, 180, 90];\n/**\n * @const\n * @type {number}\n */\nexport var METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nvar EPSG4326Projection = /** @class */ (function (_super) {\n    __extends(EPSG4326Projection, _super);\n    /**\n     * @param {string} code Code.\n     * @param {string=} opt_axisOrientation Axis orientation.\n     */\n    function EPSG4326Projection(code, opt_axisOrientation) {\n        return _super.call(this, {\n            code: code,\n            units: Units.DEGREES,\n            extent: EXTENT,\n            axisOrientation: opt_axisOrientation,\n            global: true,\n            metersPerUnit: METERS_PER_UNIT,\n            worldExtent: EXTENT,\n        }) || this;\n    }\n    return EPSG4326Projection;\n}(Projection));\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [\n    new EPSG4326Projection('CRS:84'),\n    new EPSG4326Projection('EPSG:4326', 'neu'),\n    new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n    new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n    new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n];\n//# sourceMappingURL=epsg4326.js.map","/**\n * @module ol/proj/projections\n */\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nvar cache = {};\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n    cache = {};\n}\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default} The projection (if cached).\n */\nexport function get(code) {\n    return (cache[code] ||\n        cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\n        null);\n}\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n    cache[code] = projection;\n}\n//# sourceMappingURL=projections.js.map","/**\n * @module ol/proj/transforms\n */\nimport { isEmpty } from '../obj.js';\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nvar transforms = {};\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n    transforms = {};\n}\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n    var sourceCode = source.getCode();\n    var destinationCode = destination.getCode();\n    if (!(sourceCode in transforms)) {\n        transforms[sourceCode] = {};\n    }\n    transforms[sourceCode][destinationCode] = transformFn;\n}\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n    var sourceCode = source.getCode();\n    var destinationCode = destination.getCode();\n    var transform = transforms[sourceCode][destinationCode];\n    delete transforms[sourceCode][destinationCode];\n    if (isEmpty(transforms[sourceCode])) {\n        delete transforms[sourceCode];\n    }\n    return transform;\n}\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n    var transform;\n    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n        transform = transforms[sourceCode][destinationCode];\n    }\n    return transform;\n}\n//# sourceMappingURL=transforms.js.map","/**\n * @module ol/size\n */\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n    if (opt_size === undefined) {\n        opt_size = [0, 0];\n    }\n    opt_size[0] = size[0] + 2 * num;\n    opt_size[1] = size[1] + 2 * num;\n    return opt_size;\n}\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n    return size[0] > 0 && size[1] > 0;\n}\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, opt_size) {\n    if (opt_size === undefined) {\n        opt_size = [0, 0];\n    }\n    opt_size[0] = (size[0] * ratio + 0.5) | 0;\n    opt_size[1] = (size[1] * ratio + 0.5) | 0;\n    return opt_size;\n}\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, opt_size) {\n    if (Array.isArray(size)) {\n        return size;\n    }\n    else {\n        if (opt_size === undefined) {\n            opt_size = [size, size];\n        }\n        else {\n            opt_size[0] = size;\n            opt_size[1] = size;\n        }\n        return opt_size;\n    }\n}\n//# sourceMappingURL=size.js.map","/**\n * @module ol/sphere\n */\nimport GeometryType from './geom/GeometryType.js';\nimport { toDegrees, toRadians } from './math.js';\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport var DEFAULT_RADIUS = 6371008.8;\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, opt_radius) {\n    var radius = opt_radius || DEFAULT_RADIUS;\n    var lat1 = toRadians(c1[1]);\n    var lat2 = toRadians(c2[1]);\n    var deltaLatBy2 = (lat2 - lat1) / 2;\n    var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n    var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n        Math.sin(deltaLonBy2) *\n            Math.sin(deltaLonBy2) *\n            Math.cos(lat1) *\n            Math.cos(lat2);\n    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n    var length = 0;\n    for (var i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n        length += getDistance(coordinates[i], coordinates[i + 1], radius);\n    }\n    return length;\n}\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions=} opt_options Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, opt_options) {\n    var options = opt_options || {};\n    var radius = options.radius || DEFAULT_RADIUS;\n    var projection = options.projection || 'EPSG:3857';\n    var type = geometry.getType();\n    if (type !== GeometryType.GEOMETRY_COLLECTION) {\n        geometry = geometry.clone().transform(projection, 'EPSG:4326');\n    }\n    var length = 0;\n    var coordinates, coords, i, ii, j, jj;\n    switch (type) {\n        case GeometryType.POINT:\n        case GeometryType.MULTI_POINT: {\n            break;\n        }\n        case GeometryType.LINE_STRING:\n        case GeometryType.LINEAR_RING: {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            length = getLengthInternal(coordinates, radius);\n            break;\n        }\n        case GeometryType.MULTI_LINE_STRING:\n        case GeometryType.POLYGON: {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            for (i = 0, ii = coordinates.length; i < ii; ++i) {\n                length += getLengthInternal(coordinates[i], radius);\n            }\n            break;\n        }\n        case GeometryType.MULTI_POLYGON: {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            for (i = 0, ii = coordinates.length; i < ii; ++i) {\n                coords = coordinates[i];\n                for (j = 0, jj = coords.length; j < jj; ++j) {\n                    length += getLengthInternal(coords[j], radius);\n                }\n            }\n            break;\n        }\n        case GeometryType.GEOMETRY_COLLECTION: {\n            var geometries = /** @type {import(\"./geom/GeometryCollection.js\").default} */ (geometry).getGeometries();\n            for (i = 0, ii = geometries.length; i < ii; ++i) {\n                length += getLength(geometries[i], opt_options);\n            }\n            break;\n        }\n        default: {\n            throw new Error('Unsupported geometry type: ' + type);\n        }\n    }\n    return length;\n}\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n    var area = 0;\n    var len = coordinates.length;\n    var x1 = coordinates[len - 1][0];\n    var y1 = coordinates[len - 1][1];\n    for (var i = 0; i < len; i++) {\n        var x2 = coordinates[i][0];\n        var y2 = coordinates[i][1];\n        area +=\n            toRadians(x2 - x1) *\n                (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n        x1 = x2;\n        y1 = y2;\n    }\n    return (area * radius * radius) / 2.0;\n}\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions=} opt_options Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, opt_options) {\n    var options = opt_options || {};\n    var radius = options.radius || DEFAULT_RADIUS;\n    var projection = options.projection || 'EPSG:3857';\n    var type = geometry.getType();\n    if (type !== GeometryType.GEOMETRY_COLLECTION) {\n        geometry = geometry.clone().transform(projection, 'EPSG:4326');\n    }\n    var area = 0;\n    var coordinates, coords, i, ii, j, jj;\n    switch (type) {\n        case GeometryType.POINT:\n        case GeometryType.MULTI_POINT:\n        case GeometryType.LINE_STRING:\n        case GeometryType.MULTI_LINE_STRING:\n        case GeometryType.LINEAR_RING: {\n            break;\n        }\n        case GeometryType.POLYGON: {\n            coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (geometry).getCoordinates();\n            area = Math.abs(getAreaInternal(coordinates[0], radius));\n            for (i = 1, ii = coordinates.length; i < ii; ++i) {\n                area -= Math.abs(getAreaInternal(coordinates[i], radius));\n            }\n            break;\n        }\n        case GeometryType.MULTI_POLYGON: {\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometry).getCoordinates();\n            for (i = 0, ii = coordinates.length; i < ii; ++i) {\n                coords = coordinates[i];\n                area += Math.abs(getAreaInternal(coords[0], radius));\n                for (j = 1, jj = coords.length; j < jj; ++j) {\n                    area -= Math.abs(getAreaInternal(coords[j], radius));\n                }\n            }\n            break;\n        }\n        case GeometryType.GEOMETRY_COLLECTION: {\n            var geometries = /** @type {import(\"./geom/GeometryCollection.js\").default} */ (geometry).getGeometries();\n            for (i = 0, ii = geometries.length; i < ii; ++i) {\n                area += getArea(geometries[i], opt_options);\n            }\n            break;\n        }\n        default: {\n            throw new Error('Unsupported geometry type: ' + type);\n        }\n    }\n    return area;\n}\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, opt_radius) {\n    var radius = opt_radius || DEFAULT_RADIUS;\n    var lat1 = toRadians(c1[1]);\n    var lon1 = toRadians(c1[0]);\n    var dByR = distance / radius;\n    var lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) +\n        Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n    var lon = lon1 +\n        Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n    return [toDegrees(lon), toDegrees(lat)];\n}\n//# sourceMappingURL=sphere.js.map","/**\n * @module ol/string\n */\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)\n * @returns {string} Formatted string\n */\nexport function padNumber(number, width, opt_precision) {\n    var numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;\n    var decimal = numberString.indexOf('.');\n    decimal = decimal === -1 ? numberString.length : decimal;\n    return decimal > width\n        ? numberString\n        : new Array(1 + width - decimal).join('0') + numberString;\n}\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @returns {number} Value\n */\nexport function compareVersions(v1, v2) {\n    var s1 = ('' + v1).split('.');\n    var s2 = ('' + v2).split('.');\n    for (var i = 0; i < Math.max(s1.length, s2.length); i++) {\n        var n1 = parseInt(s1[i] || '0', 10);\n        var n2 = parseInt(s2[i] || '0', 10);\n        if (n1 > n2) {\n            return 1;\n        }\n        if (n2 > n1) {\n            return -1;\n        }\n    }\n    return 0;\n}\n//# sourceMappingURL=string.js.map","/**\n * @module ol/tilecoord\n */\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord=} opt_tileCoord Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n    if (opt_tileCoord !== undefined) {\n        opt_tileCoord[0] = z;\n        opt_tileCoord[1] = x;\n        opt_tileCoord[2] = y;\n        return opt_tileCoord;\n    }\n    else {\n        return [z, x, y];\n    }\n}\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n    return z + '/' + x + '/' + y;\n}\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n    return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n    return key.split('/').map(Number);\n}\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n    var z = tileCoord[0];\n    var x = tileCoord[1];\n    var y = tileCoord[2];\n    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n        return false;\n    }\n    var tileRange = tileGrid.getFullTileRange(z);\n    if (!tileRange) {\n        return true;\n    }\n    else {\n        return tileRange.containsXY(x, y);\n    }\n}\n//# sourceMappingURL=tilecoord.js.map","/**\n * @module ol/tilegrid\n */\nimport Corner from './extent/Corner.js';\nimport TileGrid from './tilegrid/TileGrid.js';\nimport Units from './proj/Units.js';\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, get as getProjection } from './proj.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth, } from './extent.js';\nimport { toSize } from './size.js';\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n    var tileGrid = projection.getDefaultTileGrid();\n    if (!tileGrid) {\n        tileGrid = createForProjection(projection);\n        projection.setDefaultTileGrid(tileGrid);\n    }\n    return tileGrid;\n}\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n    var z = tileCoord[0];\n    var center = tileGrid.getTileCoordCenter(tileCoord);\n    var projectionExtent = extentFromProjection(projection);\n    if (!containsCoordinate(projectionExtent, center)) {\n        var worldWidth = getWidth(projectionExtent);\n        var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n        center[0] += worldWidth * worldsAway;\n        return tileGrid.getTileCoordForCoordAndZ(center, z);\n    }\n    else {\n        return tileCoord;\n    }\n}\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent/Corner.js\").default=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n    var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;\n    var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n    return new TileGrid({\n        extent: extent,\n        origin: getCorner(extent, corner),\n        resolutions: resolutions,\n        tileSize: opt_tileSize,\n    });\n}\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions=} opt_options Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(opt_options) {\n    var xyzOptions = opt_options || {};\n    var extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n    var gridOptions = {\n        extent: extent,\n        minZoom: xyzOptions.minZoom,\n        tileSize: xyzOptions.tileSize,\n        resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution),\n    };\n    return new TileGrid(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number=} opt_maxResolution Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {\n    var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;\n    var height = getHeight(extent);\n    var width = getWidth(extent);\n    var tileSize = toSize(opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE);\n    var maxResolution = opt_maxResolution > 0\n        ? opt_maxResolution\n        : Math.max(width / tileSize[0], height / tileSize[1]);\n    var length = maxZoom + 1;\n    var resolutions = new Array(length);\n    for (var z = 0; z < length; ++z) {\n        resolutions[z] = maxResolution / Math.pow(2, z);\n    }\n    return resolutions;\n}\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number=} opt_maxZoom Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size=} opt_tileSize Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent/Corner.js\").default=} opt_corner Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n    var extent = extentFromProjection(projection);\n    return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n    projection = getProjection(projection);\n    var extent = projection.getExtent();\n    if (!extent) {\n        var half = (180 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit();\n        extent = createOrUpdate(-half, -half, half, half);\n    }\n    return extent;\n}\n//# sourceMappingURL=tilegrid.js.map","/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, { createOrUpdate as createOrUpdateTileRange, } from '../TileRange.js';\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport { clamp } from '../math.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { toSize } from '../size.js';\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nvar tmpTileCoord = [0, 0, 0];\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nvar TileGrid = /** @class */ (function () {\n    /**\n     * @param {Options} options Tile grid options.\n     */\n    function TileGrid(options) {\n        /**\n         * @protected\n         * @type {number}\n         */\n        this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n        /**\n         * @private\n         * @type {!Array<number>}\n         */\n        this.resolutions_ = options.resolutions;\n        assert(isSorted(this.resolutions_, function (a, b) {\n            return b - a;\n        }, true), 17); // `resolutions` must be sorted in descending order\n        // check if we've got a consistent zoom factor and origin\n        var zoomFactor;\n        if (!options.origins) {\n            for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n                if (!zoomFactor) {\n                    zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n                }\n                else {\n                    if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n                        zoomFactor = undefined;\n                        break;\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.zoomFactor_ = zoomFactor;\n        /**\n         * @protected\n         * @type {number}\n         */\n        this.maxZoom = this.resolutions_.length - 1;\n        /**\n         * @private\n         * @type {import(\"../coordinate.js\").Coordinate}\n         */\n        this.origin_ = options.origin !== undefined ? options.origin : null;\n        /**\n         * @private\n         * @type {Array<import(\"../coordinate.js\").Coordinate>}\n         */\n        this.origins_ = null;\n        if (options.origins !== undefined) {\n            this.origins_ = options.origins;\n            assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n        }\n        var extent = options.extent;\n        if (extent !== undefined && !this.origin_ && !this.origins_) {\n            this.origin_ = getTopLeft(extent);\n        }\n        assert((!this.origin_ && this.origins_) || (this.origin_ && !this.origins_), 18); // Either `origin` or `origins` must be configured, never both\n        /**\n         * @private\n         * @type {Array<number|import(\"../size.js\").Size>}\n         */\n        this.tileSizes_ = null;\n        if (options.tileSizes !== undefined) {\n            this.tileSizes_ = options.tileSizes;\n            assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n        }\n        /**\n         * @private\n         * @type {number|import(\"../size.js\").Size}\n         */\n        this.tileSize_ =\n            options.tileSize !== undefined\n                ? options.tileSize\n                : !this.tileSizes_\n                    ? DEFAULT_TILE_SIZE\n                    : null;\n        assert((!this.tileSize_ && this.tileSizes_) ||\n            (this.tileSize_ && !this.tileSizes_), 22); // Either `tileSize` or `tileSizes` must be configured, never both\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.extent_ = extent !== undefined ? extent : null;\n        /**\n         * @private\n         * @type {Array<import(\"../TileRange.js\").default>}\n         */\n        this.fullTileRanges_ = null;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        this.tmpSize_ = [0, 0];\n        if (options.sizes !== undefined) {\n            this.fullTileRanges_ = options.sizes.map(function (size, z) {\n                var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n                if (extent) {\n                    var restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n                    tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n                    tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n                    tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n                    tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n                }\n                return tileRange;\n            }, this);\n        }\n        else if (extent) {\n            this.calculateTileRanges_(extent);\n        }\n    }\n    /**\n     * Call a function with each tile coordinate for a given extent and zoom level.\n     *\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} zoom Integer zoom level.\n     * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n     * @api\n     */\n    TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {\n        var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n        for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n            for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n                callback([zoom, i, j]);\n            }\n        }\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n     * @param {import(\"../TileRange.js\").default=} opt_tileRange Temporary import(\"../TileRange.js\").default object.\n     * @param {import(\"../extent.js\").Extent=} opt_extent Temporary import(\"../extent.js\").Extent object.\n     * @return {boolean} Callback succeeded.\n     */\n    TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {\n        var tileRange, x, y;\n        var tileCoordExtent = null;\n        var z = tileCoord[0] - 1;\n        if (this.zoomFactor_ === 2) {\n            x = tileCoord[1];\n            y = tileCoord[2];\n        }\n        else {\n            tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n        }\n        while (z >= this.minZoom) {\n            if (this.zoomFactor_ === 2) {\n                x = Math.floor(x / 2);\n                y = Math.floor(y / 2);\n                tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n            }\n            else {\n                tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n            }\n            if (callback(z, tileRange)) {\n                return true;\n            }\n            --z;\n        }\n        return false;\n    };\n    /**\n     * Get the extent for this tile grid, if it was configured.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    TileGrid.prototype.getExtent = function () {\n        return this.extent_;\n    };\n    /**\n     * Get the maximum zoom level for the grid.\n     * @return {number} Max zoom.\n     * @api\n     */\n    TileGrid.prototype.getMaxZoom = function () {\n        return this.maxZoom;\n    };\n    /**\n     * Get the minimum zoom level for the grid.\n     * @return {number} Min zoom.\n     * @api\n     */\n    TileGrid.prototype.getMinZoom = function () {\n        return this.minZoom;\n    };\n    /**\n     * Get the origin for the grid at the given zoom level.\n     * @param {number} z Integer zoom level.\n     * @return {import(\"../coordinate.js\").Coordinate} Origin.\n     * @api\n     */\n    TileGrid.prototype.getOrigin = function (z) {\n        if (this.origin_) {\n            return this.origin_;\n        }\n        else {\n            return this.origins_[z];\n        }\n    };\n    /**\n     * Get the resolution for the given zoom level.\n     * @param {number} z Integer zoom level.\n     * @return {number} Resolution.\n     * @api\n     */\n    TileGrid.prototype.getResolution = function (z) {\n        return this.resolutions_[z];\n    };\n    /**\n     * Get the list of resolutions for the tile grid.\n     * @return {Array<number>} Resolutions.\n     * @api\n     */\n    TileGrid.prototype.getResolutions = function () {\n        return this.resolutions_;\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../TileRange.js\").default=} opt_tileRange Temporary import(\"../TileRange.js\").default object.\n     * @param {import(\"../extent.js\").Extent=} opt_extent Temporary import(\"../extent.js\").Extent object.\n     * @return {import(\"../TileRange.js\").default} Tile range.\n     */\n    TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {\n        if (tileCoord[0] < this.maxZoom) {\n            if (this.zoomFactor_ === 2) {\n                var minX = tileCoord[1] * 2;\n                var minY = tileCoord[2] * 2;\n                return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, opt_tileRange);\n            }\n            var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n            return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);\n        }\n        return null;\n    };\n    /**\n     * Get the extent for a tile range.\n     * @param {number} z Integer zoom level.\n     * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n     * @param {import(\"../extent.js\").Extent=} opt_extent Temporary import(\"../extent.js\").Extent object.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     */\n    TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {\n        var origin = this.getOrigin(z);\n        var resolution = this.getResolution(z);\n        var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n        var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n        var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n        var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n        var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n        return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n    };\n    /**\n     * Get a tile range for the given extent and integer zoom level.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} z Integer zoom level.\n     * @param {import(\"../TileRange.js\").default=} opt_tileRange Temporary tile range object.\n     * @return {import(\"../TileRange.js\").default} Tile range.\n     */\n    TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {\n        var tileCoord = tmpTileCoord;\n        this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n        var minX = tileCoord[1];\n        var minY = tileCoord[2];\n        this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n        return createOrUpdateTileRange(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n     */\n    TileGrid.prototype.getTileCoordCenter = function (tileCoord) {\n        var origin = this.getOrigin(tileCoord[0]);\n        var resolution = this.getResolution(tileCoord[0]);\n        var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n        return [\n            origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n            origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n        ];\n    };\n    /**\n     * Get the extent of a tile coordinate.\n     *\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../extent.js\").Extent=} opt_extent Temporary extent object.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {\n        var origin = this.getOrigin(tileCoord[0]);\n        var resolution = this.getResolution(tileCoord[0]);\n        var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n        var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n        var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n        var maxX = minX + tileSize[0] * resolution;\n        var maxY = minY + tileSize[1] * resolution;\n        return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n    };\n    /**\n     * Get the tile coordinate for the given map coordinate and resolution.  This\n     * method considers that coordinates that intersect tile boundaries should be\n     * assigned the higher tile coordinate.\n     *\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {number} resolution Resolution.\n     * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Destination import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @api\n     */\n    TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {\n        return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n    };\n    /**\n     * Note that this method should not be called for resolutions that correspond\n     * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {number} resolution Resolution (for a non-integer zoom level).\n     * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n     *     intersections go to the higher tile coordinate, let edge intersections\n     *     go to the lower tile coordinate.\n     * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Temporary import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @private\n     */\n    TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n        var z = this.getZForResolution(resolution);\n        var scale = resolution / this.getResolution(z);\n        var origin = this.getOrigin(z);\n        var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n        var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n        var adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n        var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n        var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n        var tileCoordX = (scale * xFromOrigin) / tileSize[0];\n        var tileCoordY = (scale * yFromOrigin) / tileSize[1];\n        if (reverseIntersectionPolicy) {\n            tileCoordX = Math.ceil(tileCoordX) - 1;\n            tileCoordY = Math.ceil(tileCoordY) - 1;\n        }\n        else {\n            tileCoordX = Math.floor(tileCoordX);\n            tileCoordY = Math.floor(tileCoordY);\n        }\n        return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n    };\n    /**\n     * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n     * they should have separate implementations.  This method is for integer zoom\n     * levels.  The other method should only be called for resolutions corresponding\n     * to non-integer zoom levels.\n     * @param {number} x Map x coordinate.\n     * @param {number} y Map y coordinate.\n     * @param {number} z Integer zoom level.\n     * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n     *     intersections go to the higher tile coordinate, let edge intersections\n     *     go to the lower tile coordinate.\n     * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Temporary import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @private\n     */\n    TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n        var origin = this.getOrigin(z);\n        var resolution = this.getResolution(z);\n        var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n        var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n        var adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n        var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n        var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n        var tileCoordX = xFromOrigin / tileSize[0];\n        var tileCoordY = yFromOrigin / tileSize[1];\n        if (reverseIntersectionPolicy) {\n            tileCoordX = Math.ceil(tileCoordX) - 1;\n            tileCoordY = Math.ceil(tileCoordY) - 1;\n        }\n        else {\n            tileCoordX = Math.floor(tileCoordX);\n            tileCoordY = Math.floor(tileCoordY);\n        }\n        return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n    };\n    /**\n     * Get a tile coordinate given a map coordinate and zoom level.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {number} z Zoom level.\n     * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Destination import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @api\n     */\n    TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {\n        return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n    };\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {number} Tile resolution.\n     */\n    TileGrid.prototype.getTileCoordResolution = function (tileCoord) {\n        return this.resolutions_[tileCoord[0]];\n    };\n    /**\n     * Get the tile size for a zoom level. The type of the return value matches the\n     * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n     * get an `import(\"../size.js\").Size`, run the result through `import(\"../size.js\").Size.toSize()`.\n     * @param {number} z Z.\n     * @return {number|import(\"../size.js\").Size} Tile size.\n     * @api\n     */\n    TileGrid.prototype.getTileSize = function (z) {\n        if (this.tileSize_) {\n            return this.tileSize_;\n        }\n        else {\n            return this.tileSizes_[z];\n        }\n    };\n    /**\n     * @param {number} z Zoom level.\n     * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n     */\n    TileGrid.prototype.getFullTileRange = function (z) {\n        if (!this.fullTileRanges_) {\n            return this.extent_\n                ? this.getTileRangeForExtentAndZ(this.extent_, z)\n                : null;\n        }\n        else {\n            return this.fullTileRanges_[z];\n        }\n    };\n    /**\n     * @param {number} resolution Resolution.\n     * @param {number=} opt_direction If 0, the nearest resolution will be used.\n     *     If 1, the nearest lower resolution will be used. If -1, the nearest\n     *     higher resolution will be used. Default is 0.\n     * @return {number} Z.\n     * @api\n     */\n    TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {\n        var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n        return clamp(z, this.minZoom, this.maxZoom);\n    };\n    /**\n     * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n     * @private\n     */\n    TileGrid.prototype.calculateTileRanges_ = function (extent) {\n        var length = this.resolutions_.length;\n        var fullTileRanges = new Array(length);\n        for (var z = this.minZoom; z < length; ++z) {\n            fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n        }\n        this.fullTileRanges_ = fullTileRanges;\n    };\n    return TileGrid;\n}());\nexport default TileGrid;\n//# sourceMappingURL=TileGrid.js.map","/**\n * @module ol/tilegrid/common\n */\n/**\n * Default maximum zoom for default tile grids.\n * @type {number}\n */\nexport var DEFAULT_MAX_ZOOM = 42;\n/**\n * Default tile size.\n * @type {number}\n */\nexport var DEFAULT_TILE_SIZE = 256;\n//# sourceMappingURL=common.js.map","/**\n * @module ol/util\n */\n/**\n * @return {?} Any return.\n */\nexport function abstract() {\n    return /** @type {?} */ ((function () {\n        throw new Error('Unimplemented abstract method.');\n    })());\n}\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nvar uidCounter_ = 0;\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n    return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport var VERSION = '6.5.0';\n//# sourceMappingURL=util.js.map","import {toPoint, forward} from 'mgrs';\n\nfunction Point(x, y, z) {\n  if (!(this instanceof Point)) {\n    return new Point(x, y, z);\n  }\n  if (Array.isArray(x)) {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2] || 0.0;\n  } else if(typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z || 0.0;\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\n    var coords = x.split(',');\n    this.x = parseFloat(coords[0], 10);\n    this.y = parseFloat(coords[1], 10);\n    this.z = parseFloat(coords[2], 10) || 0.0;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z || 0.0;\n  }\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n}\n\nPoint.fromMGRS = function(mgrsStr) {\n  return new Point(toPoint(mgrsStr));\n};\nPoint.prototype.toMGRS = function(accuracy) {\n  return forward([this.x, this.y], accuracy);\n};\nexport default Point;\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\nimport {getNadgrids} from \"./nadgrid\";\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\n\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var nadgrids = getNadgrids(json.nadgrids);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,\n    nadgrids);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calulated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      if (\"ew\".indexOf(crs.axis[i]) !== -1) {\n        t = 'x';\n      } else {\n        t = 'y';\n      }\n\n    }\n    else if (i === 1) {\n      v = yin;\n      if (\"ns\".indexOf(crs.axis[i]) !== -1) {\n        t = 'y';\n      } else {\n        t = 'x';\n      }\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n","\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n","import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n","import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n","export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}","export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n","import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}","export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}","export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}","export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}","export default function(x) {\n  return (x * x * x * (35 / 3072));\n}","export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}","export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n","export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n","export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n","export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n","export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}","export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n","var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}","import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n","export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}","export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}","export default function(x) {\n  return x<0 ? -1 : 1;\n}","export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}","export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n","var exports = {};\nexport {exports as default};\nexports.wgs84 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"WGS84\",\n  datumName: \"WGS84\"\n};\n\nexports.ch1903 = {\n  towgs84: \"674.374,15.056,405.346\",\n  ellipse: \"bessel\",\n  datumName: \"swiss\"\n};\n\nexports.ggrs87 = {\n  towgs84: \"-199.87,74.79,246.62\",\n  ellipse: \"GRS80\",\n  datumName: \"Greek_Geodetic_Reference_System_1987\"\n};\n\nexports.nad83 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"GRS80\",\n  datumName: \"North_American_Datum_1983\"\n};\n\nexports.nad27 = {\n  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n  ellipse: \"clrk66\",\n  datumName: \"North_American_Datum_1927\"\n};\n\nexports.potsdam = {\n  towgs84: \"606.0,23.0,413.0\",\n  ellipse: \"bessel\",\n  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n};\n\nexports.carthage = {\n  towgs84: \"-263.0,6.0,431.0\",\n  ellipse: \"clark80\",\n  datumName: \"Carthage 1934 Tunisia\"\n};\n\nexports.hermannskogel = {\n  towgs84: \"653.0,-212.0,449.0\",\n  ellipse: \"bessel\",\n  datumName: \"Hermannskogel\"\n};\n\nexports.osni52 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"airy\",\n  datumName: \"Irish National\"\n};\n\nexports.ire65 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"mod_airy\",\n  datumName: \"Ireland 1965\"\n};\n\nexports.rassadiran = {\n  towgs84: \"-133.63,-157.5,-158.62\",\n  ellipse: \"intl\",\n  datumName: \"Rassadiran\"\n};\n\nexports.nzgd49 = {\n  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n  ellipse: \"intl\",\n  datumName: \"New Zealand Geodetic Datum 1949\"\n};\n\nexports.osgb36 = {\n  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n  ellipse: \"airy\",\n  datumName: \"Airy 1830\"\n};\n\nexports.s_jtsk = {\n  towgs84: \"589,76,480\",\n  ellipse: 'bessel',\n  datumName: 'S-JTSK (Ferro)'\n};\n\nexports.beduaram = {\n  towgs84: '-106,-87,188',\n  ellipse: 'clrk80',\n  datumName: 'Beduaram'\n};\n\nexports.gunung_segara = {\n  towgs84: '-403,684,41',\n  ellipse: 'bessel',\n  datumName: 'Gunung Segara Jakarta'\n};\n\nexports.rnb72 = {\n  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n  ellipse: \"intl\",\n  datumName: \"Reseau National Belge 1972\"\n};\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","var exports = {};\nexport {exports as default};\n\nexports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n","export default {\n  ft: {to_meter: 0.3048},\n  'us-ft': {to_meter: 1200 / 3937}\n};\n","export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_GRIDSHIFT = 3;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SRS_WGS84_SEMIMAJOR = 6378137.0;  // only used in grid shift transforms\nexport var SRS_WGS84_SEMIMINOR = 6356752.314;  // only used in grid shift transforms\nexport var SRS_WGS84_ESQUARED = 0.0066943799901413165; // only used in grid shift transforms\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords) || {x: NaN, y: NaN};\n    if (coords.length > 2) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (typeof transformedArray.z === 'number') {\n          return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.splice(3));\n        } else {\n          return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.splice(3));\n        }\n      } else {\n        return [transformedArray.x, transformedArray.y].concat(coords.splice(2));\n      }\n    } else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  } else {\n    out = transform(from, to, coords);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (key === 'x' || key === 'y' || key === 'z') {\n          return;\n        }\n      } else {\n        if (key === 'x' || key === 'y') {\n          return;\n        }\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\n\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  } else {\n    obj = {\n      forward: function (coords) {\n        return transformer(fromProj, toProj, coords);\n      },\n      inverse: function (coords) {\n        return transformer(toProj, fromProj, coords);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;","import {PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  if (nadgrids) {\n    out.datum_type = PJD_GRIDSHIFT;\n    out.grids = nadgrids;\n  }\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","import {\n  PJD_3PARAM,\n  PJD_7PARAM,\n  PJD_GRIDSHIFT,\n  PJD_NODATUM,\n  R2D,\n  SRS_WGS84_ESQUARED,\n  SRS_WGS84_SEMIMAJOR, SRS_WGS84_SEMIMINOR\n} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nimport adjust_lon from \"./common/adjust_lon\";\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n  var source_a = source.a;\n  var source_es = source.es;\n  if (source.datum_type === PJD_GRIDSHIFT) {\n    var gridShiftCode = applyGridShift(source, false, point);\n    if (gridShiftCode !== 0) {\n      return undefined;\n    }\n    source_a = SRS_WGS84_SEMIMAJOR;\n    source_es = SRS_WGS84_ESQUARED;\n  }\n\n  var dest_a = dest.a;\n  var dest_b = dest.b;\n  var dest_es = dest.es;\n  if (dest.datum_type === PJD_GRIDSHIFT) {\n    dest_a = SRS_WGS84_SEMIMAJOR;\n    dest_b = SRS_WGS84_SEMIMINOR;\n    dest_es = SRS_WGS84_ESQUARED;\n  }\n\n  // Do we need to go through geocentric coordinates?\n  if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source_es, source_a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  point = geocentricToGeodetic(point, dest_es, dest_a, dest_b);\n\n  if (dest.datum_type === PJD_GRIDSHIFT) {\n    var destGridShiftResult = applyGridShift(dest, true, point);\n    if (destGridShiftResult !== 0) {\n      return undefined;\n    }\n  }\n\n  return point;\n}\n\nexport function applyGridShift(source, inverse, point) {\n  if (source.grids === null || source.grids.length === 0) {\n    console.log('Grid shift grids not found');\n    return -1;\n  }\n  var input = {x: -point.x, y: point.y};\n  var output = {x: Number.NaN, y: Number.NaN};\n  var onlyMandatoryGrids = false;\n  var attemptedGrids = [];\n  for (var i = 0; i < source.grids.length; i++) {\n    var grid = source.grids[i];\n    attemptedGrids.push(grid.name);\n    if (grid.isNull) {\n      output = input;\n      break;\n    }\n    onlyMandatoryGrids = grid.mandatory;\n    if (grid.grid === null) {\n      if (grid.mandatory) {\n        console.log(\"Unable to find mandatory grid '\" + grid.name + \"'\");\n        return -1;\n      }\n      continue;\n    }\n    var subgrid = grid.grid.subgrids[0];\n    // skip tables that don't match our point at all\n    var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 10000.0;\n    var minX = subgrid.ll[0] - epsilon;\n    var minY = subgrid.ll[1] - epsilon;\n    var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;\n    var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;\n    if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x ) {\n      continue;\n    }\n    output = applySubgridShift(input, inverse, subgrid);\n    if (!isNaN(output.x)) {\n      break;\n    }\n  }\n  if (isNaN(output.x)) {\n    console.log(\"Failed to find a grid shift table for location '\"+\n      -input.x * R2D + \" \" + input.y * R2D + \" tried: '\" + attemptedGrids + \"'\");\n    return -1;\n  }\n  point.x = -output.x;\n  point.y = output.y;\n  return 0;\n}\n\nfunction applySubgridShift(pin, inverse, ct) {\n  var val = {x: Number.NaN, y: Number.NaN};\n  if (isNaN(pin.x)) { return val; }\n  var tb = {x: pin.x, y: pin.y};\n  tb.x -= ct.ll[0];\n  tb.y -= ct.ll[1];\n  tb.x = adjust_lon(tb.x - Math.PI) + Math.PI;\n  var t = nadInterpolate(tb, ct);\n  if (inverse) {\n    if (isNaN(t.x)) {\n      return val;\n    }\n    t.x = tb.x - t.x;\n    t.y = tb.y - t.y;\n    var i = 9, tol = 1e-12;\n    var dif, del;\n    do {\n      del = nadInterpolate(t, ct);\n      if (isNaN(del.x)) {\n        console.log(\"Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.\");\n        break;\n      }\n      dif = {x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y)};\n      t.x += dif.x;\n      t.y += dif.y;\n    } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);\n    if (i < 0) {\n      console.log(\"Inverse grid shift iterator failed to converge.\");\n      return val;\n    }\n    val.x = adjust_lon(t.x + ct.ll[0]);\n    val.y = t.y + ct.ll[1];\n  } else {\n    if (!isNaN(t.x)) {\n      val.x = pin.x + t.x;\n      val.y = pin.y + t.y;\n    }\n  }\n  return val;\n}\n\nfunction nadInterpolate(pin, ct) {\n  var t = {x: pin.x / ct.del[0], y: pin.y / ct.del[1]};\n  var indx = {x: Math.floor(t.x), y: Math.floor(t.y)};\n  var frct = {x: t.x - 1.0 * indx.x, y: t.y - 1.0 * indx.y};\n  var val= {x: Number.NaN, y: Number.NaN};\n  var inx;\n  if (indx.x < 0 || indx.x >= ct.lim[0]) {\n    return val;\n  }\n  if (indx.y < 0 || indx.y >= ct.lim[1]) {\n    return val;\n  }\n  inx = (indx.y * ct.lim[0]) + indx.x;\n  var f00 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx++;\n  var f10= {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx += ct.lim[0];\n  var f11 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx--;\n  var f01 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  var m11 = frct.x * frct.y, m10 = frct.x * (1.0 - frct.y),\n    m00 = (1.0 - frct.x) * (1.0 - frct.y), m01 = (1.0 - frct.x) * frct.y;\n  val.x = (m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x);\n  val.y = (m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y);\n  return val;\n}\n","import globals from './global';\nimport parseProj from './projString';\nimport wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nexport default defs;\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","export default function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n}\n","import proj4 from './core';\nimport Proj from \"./Proj\";\nimport Point from \"./Point\";\nimport common from \"./common/toPoint\";\nimport defs from \"./defs\";\nimport nadgrid from \"./nadgrid\";\nimport transform from \"./transform\";\nimport mgrs from \"mgrs\";\nimport includedProjections from \"../projs\";\n\nproj4.defaultDatum = 'WGS84'; //default datum\nproj4.Proj = Proj;\nproj4.WGS84 = new proj4.Proj('WGS84');\nproj4.Point = Point;\nproj4.toPoint = common;\nproj4.defs = defs;\nproj4.nadgrid = nadgrid;\nproj4.transform = transform;\nproj4.mgrs = mgrs;\nproj4.version = '__VERSION__';\nincludedProjections(proj4);\nexport default proj4;\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\n\nvar loadedNadgrids = {};\n\n/**\n * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer.\n */\nexport default function nadgrid(key, data) {\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n  if (header.nSubgrids > 1) {\n    console.log('Only single NTv2 subgrids are currently supported, subsequent sub grids are ignored');\n  }\n  var subgrids = readSubgrids(view, header, isLittleEndian);\n  var nadgrid = {header: header, subgrids: subgrids};\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\n\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) { return null; }\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\n\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n  var optional = value[0] === '@';\n  if (optional) {\n    value = value.slice(1);\n  }\n  if (value === 'null') {\n    return {name: 'null', mandatory: !optional, grid: null, isNull: true};\n  }\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\n\nfunction secondsToRadians(seconds) {\n  return (seconds / 3600) * Math.PI / 180;\n}\n\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n  if (nFields === 11) {\n    return false;\n  }\n  nFields = view.getInt32(8, true);\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n  return true;\n}\n\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian),\n  };\n}\n\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\n\nfunction readSubgrids(view, header, isLittleEndian) {\n  var gridOffset = 176;\n  var grids = [];\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\n    var lngColumnCount = Math.round(\n      1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(\n      1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n  }\n  return grids;\n}\n\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});\n}\n\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\n\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n  var gridShiftRecords = [];\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\n      latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\n      longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),\n    };\n    gridShiftRecords.push(record);\n  }\n  return gridShiftRecords;\n}\n","import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\nvar codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    gamma: function(v) {\n      self.rectified_grid_angle = parseFloat(v);\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    },\n    approx: function() {\n      self.approx = true;\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n","import merc from \"./projections/merc\";\nimport longlat from \"./projections/longlat\";\nvar projs = [merc, longlat];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexport {add};\n\nexport function get(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n}\n\nexport function start() {\n  projs.forEach(add);\n}\nexport default {\n  start: start,\n  add: add,\n  get: get\n};\n","import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n","import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c ? c / Math.sin(c) : 1;\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      sinpsi = Math.sin(psi);\n      lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport tmerc from '../projections/tmerc';\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (!this.approx && (isNaN(this.es) || this.es <= 0)) {\n    throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION[\"Fast_Transverse_Mercator\"] in the WKT.');\n  }\n  if (this.approx) {\n    // When '+approx' is set, use tmerc instead\n    tmerc.init.apply(this);\n    this.forward = tmerc.forward;\n    this.inverse = tmerc.inverse;\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\", \"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {\n    geodeticToGeocentric,\n    geocentricToGeodetic\n} from '../datumUtils';\n\nexport function init() {\n    this.name = 'geocent';\n\n}\n\nexport function forward(p) {\n    var point = geodeticToGeocentric(p, this.es, this.a);\n    return point;\n}\n\nexport function inverse(p) {\n    var point = geocentricToGeodetic(p, this.es, this.a, this.b);\n    return point;\n}\n\nexport var names = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names\n};","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.lat0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n","import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n\n  // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north\n  //double c_lat;                   /* center latitude                      */\n  //double c_lon;                   /* center longitude                     */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\n  \"Lambert Tangential Conformal Conic Projection\",\n  \"Lambert_Conformal_Conic\",\n  \"Lambert_Conformal_Conic_1SP\",\n  \"Lambert_Conformal_Conic_2SP\",\n  \"lcc\"\n];\n\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export function init() {\n  //no-op for longlat\n}\n\nfunction identity(pt) {\n  return pt;\n}\nexport {identity as forward};\nexport {identity as inverse};\nexport var names = [\"longlat\", \"identity\"];\nexport default {\n  init: init,\n  forward: identity,\n  inverse: identity,\n  names: names\n};\n","import msfnz from '../common/msfnz';\n\nimport adjust_lon from '../common/adjust_lon';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\nexport function init() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n}\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n}\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexport function inverse(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport { D2R, EPSLN, HALF_PI, TWO_PI, FORTPI } from '../constants/values';\n\nvar TOL = 1e-7;\n\nfunction isTypeA(P) {\n  var typeAProjections = ['Hotine_Oblique_Mercator','Hotine_Oblique_Mercator_Azimuth_Natural_Origin'];\n  var projectionName = typeof P.PROJECTION === \"object\" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;\n  \n  return 'no_uoff' in P || 'no_off' in P || typeAProjections.indexOf(projectionName) !== -1;\n}\n\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {  \n  var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0,\n    gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0, AB;\n  \n  // only Type A uses the no_off or no_uoff property\n  // https://github.com/OSGeo/proj.4/issues/104\n  this.no_off = isTypeA(this);\n  this.no_rot = 'no_rot' in this;\n  \n  var alp = false;\n  if (\"alpha\" in this) {\n    alp = true;\n  }\n\n  var gam = false;\n  if (\"rectified_grid_angle\" in this) {\n    gam = true;\n  }\n\n  if (alp) {\n    alpha_c = this.alpha;\n  }\n  \n  if (gam) {\n    gamma = (this.rectified_grid_angle * D2R);\n  }\n  \n  if (alp || gam) {\n    lamc = this.longc;\n  } else {\n    lam1 = this.long1;\n    phi1 = this.lat1;\n    lam2 = this.long2;\n    phi2 = this.lat2;\n    \n    if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL ||\n        Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL ||\n        Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {\n      throw new Error();\n    }\n  }\n  \n  var one_es = 1.0 - this.es;\n  com = Math.sqrt(one_es);\n  \n  if (Math.abs(this.lat0) > EPSLN) {\n    sinph0 = Math.sin(this.lat0);\n    cosph0 = Math.cos(this.lat0);\n    con = 1 - this.es * sinph0 * sinph0;\n    this.B = cosph0 * cosph0;\n    this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);\n    this.A = this.B * this.k0 * com / con;\n    D = this.B * com / (cosph0 * Math.sqrt(con));\n    F = D * D -1;\n    \n    if (F <= 0) {\n      F = 0;\n    } else {\n      F = Math.sqrt(F);\n      if (this.lat0 < 0) {\n        F = -F;\n      }\n    }\n    \n    this.E = F += D;\n    this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);\n  } else {\n    this.B = 1 / com;\n    this.A = this.k0;\n    this.E = D = F = 1;\n  }\n  \n  if (alp || gam) {\n    if (alp) {\n      gamma0 = Math.asin(Math.sin(alpha_c) / D);\n      if (!gam) {\n        gamma = alpha_c;\n      }\n    } else {\n      gamma0 = gamma;\n      alpha_c = Math.asin(D * Math.sin(gamma0));\n    }\n    this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;\n  } else {\n    H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);\n    L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);\n    F = this.E / H;\n    p = (L - H) / (L + H);\n    J = this.E * this.E;\n    J = (J - L * H) / (J + L * H);\n    con = lam1 - lam2;\n    \n    if (con < -Math.pi) {\n      lam2 -=TWO_PI;\n    } else if (con > Math.pi) {\n      lam2 += TWO_PI;\n    }\n    \n    this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);\n    gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));\n    gamma = alpha_c = Math.asin(D * Math.sin(gamma0));\n  }\n  \n  this.singam = Math.sin(gamma0);\n  this.cosgam = Math.cos(gamma0);\n  this.sinrot = Math.sin(gamma);\n  this.cosrot = Math.cos(gamma);\n  \n  this.rB = 1 / this.B;\n  this.ArB = this.A * this.rB;\n  this.BrA = 1 / this.ArB;\n  AB = this.A * this.B;\n  \n  if (this.no_off) {\n    this.u_0 = 0;\n  } else {\n    this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));\n    \n    if (this.lat0 < 0) {\n      this.u_0 = - this.u_0;\n    }  \n  }\n    \n  F = 0.5 * gamma0;\n  this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));\n  this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));\n}\n\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var coords = {};\n  var S, T, U, V, W, temp, u, v;\n  p.x = p.x - this.lam0;\n  \n  if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {\n    W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);\n    \n    temp = 1 / W;\n    S = 0.5 * (W - temp);\n    T = 0.5 * (W + temp);\n    V = Math.sin(this.B * p.x);\n    U = (S * this.singam - V * this.cosgam) / T;\n        \n    if (Math.abs(Math.abs(U) - 1.0) < EPSLN) {\n      throw new Error();\n    }\n    \n    v = 0.5 * this.ArB * Math.log((1 - U)/(1 + U));\n    temp = Math.cos(this.B * p.x);\n    \n    if (Math.abs(temp) < TOL) {\n      u = this.A * p.x;\n    } else {\n      u = this.ArB * Math.atan2((S * this.cosgam + V * this.singam), temp);\n    }    \n  } else {\n    v = p.y > 0 ? this.v_pole_n : this.v_pole_s;\n    u = this.ArB * p.y;\n  }\n     \n  if (this.no_rot) {\n    coords.x = u;\n    coords.y = v;\n  } else {\n    u -= this.u_0;\n    coords.x = v * this.cosrot + u * this.sinrot;\n    coords.y = u * this.cosrot - v * this.sinrot;\n  }\n  \n  coords.x = (this.a * coords.x + this.x0);\n  coords.y = (this.a * coords.y + this.y0);\n  \n  return coords;\n}\n\nexport function inverse(p) {\n  var u, v, Qp, Sp, Tp, Vp, Up;\n  var coords = {};\n  \n  p.x = (p.x - this.x0) * (1.0 / this.a);\n  p.y = (p.y - this.y0) * (1.0 / this.a);\n\n  if (this.no_rot) {\n    v = p.y;\n    u = p.x;\n  } else {\n    v = p.x * this.cosrot - p.y * this.sinrot;\n    u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;\n  }\n  \n  Qp = Math.exp(-this.BrA * v);\n  Sp = 0.5 * (Qp - 1 / Qp);\n  Tp = 0.5 * (Qp + 1 / Qp);\n  Vp = Math.sin(this.BrA * u);\n  Up = (Vp * this.cosgam + Sp * this.singam) / Tp;\n  \n  if (Math.abs(Math.abs(Up) - 1) < EPSLN) {\n    coords.x = 0;\n    coords.y = Up < 0 ? -HALF_PI : HALF_PI;\n  } else {\n    coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));\n    coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));\n    \n    if (coords.y === Infinity) {\n      throw new Error();\n    }\n        \n    coords.x = -this.rB * Math.atan2((Sp * this.cosgam - Vp * this.singam), Math.cos(this.BrA * u));\n  }\n  \n  coords.x += this.lam0;\n  \n  return coords;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"Oblique_Mercator\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n","// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n","import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Fast_Transverse_Mercator\", \"Fast Transverse Mercator\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","\nvar mode = {\n  N_POLE: 0,\n  S_POLE: 1,\n  EQUIT: 2,\n  OBLIQ: 3\n};\n\nimport { D2R, HALF_PI, EPSLN } from \"../constants/values\";\nimport hypot from \"../common/hypot\";\n\nvar params = {\n  h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7\n  azi:   { def: 0, num: true, degrees: true }, // default is North\n  tilt:  { def: 0, num: true, degrees: true }, // default is Nadir\n  long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic\n  lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic\n};\n\nexport function init() {\n  Object.keys(params).forEach(function (p) {\n    if (typeof this[p] === \"undefined\") {\n      this[p] = params[p].def;\n    } else if (params[p].num && isNaN(this[p])) {\n      throw new Error(\"Invalid parameter value, must be numeric \" + p + \" = \" + this[p]);\n    } else if (params[p].num) {\n      this[p] = parseFloat(this[p]);\n    }\n    if (params[p].degrees) {\n      this[p] = this[p] * D2R;\n    }\n  }.bind(this));\n\n  if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {\n    this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;\n  } else if (Math.abs(this.lat0) < EPSLN) {\n    this.mode = mode.EQUIT;\n  } else {\n    this.mode = mode.OBLIQ;\n    this.sinph0 = Math.sin(this.lat0);\n    this.cosph0 = Math.cos(this.lat0);\n  }\n\n  this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius\n\n  if (this.pn1 <= 0 || this.pn1 > 1e10) {\n    throw new Error(\"Invalid height\");\n  }\n  \n  this.p = 1 + this.pn1;\n  this.rp = 1 / this.p;\n  this.h1 = 1 / this.pn1;\n  this.pfact = (this.p + 1) * this.h1;\n  this.es = 0;\n\n  var omega = this.tilt;\n  var gamma = this.azi;\n  this.cg = Math.cos(gamma);\n  this.sg = Math.sin(gamma);\n  this.cw = Math.cos(omega);\n  this.sw = Math.sin(omega);\n}\n\nexport function forward(p) {\n  p.x -= this.long0;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var coslam = Math.cos(p.x);\n  var x, y;\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y = cosphi * coslam;\n      break;\n    case mode.S_POLE:\n      y = -sinphi;\n      break;\n    case mode.N_POLE:\n      y = sinphi;\n      break;\n  }\n  y = this.pn1 / (this.p - y);\n  x = y * cosphi * Math.sin(p.x);\n\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y *= sinphi;\n      break;\n    case mode.N_POLE:\n      y *= -(cosphi * coslam);\n      break;\n    case mode.S_POLE:\n      y *= cosphi * coslam;\n      break;\n  }\n\n  // Tilt \n  var yt, ba;\n  yt = y * this.cg + x * this.sg;\n  ba = 1 / (yt * this.sw * this.h1 + this.cw);\n  x = (x * this.cg - y * this.sg) * this.cw * ba;\n  y = yt * ba;\n\n  p.x = x * this.a;\n  p.y = y * this.a;\n  return p;\n}\n\nexport function inverse(p) {\n  p.x /= this.a;\n  p.y /= this.a;\n  var r = { x: p.x, y: p.y };\n\n  // Un-Tilt\n  var bm, bq, yt;\n  yt = 1 / (this.pn1 - p.y * this.sw);\n  bm = this.pn1 * p.x * yt;\n  bq = this.pn1 * p.y * this.cw * yt;\n  p.x = bm * this.cg + bq * this.sg;\n  p.y = bq * this.cg - bm * this.sg;\n\n  var rh = hypot(p.x, p.y);\n  if (Math.abs(rh) < EPSLN) {\n    r.x = 0;\n    r.y = p.y;\n  } else {\n    var cosz, sinz;\n    sinz = 1 - rh * rh * this.pfact;\n    sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);\n    cosz = Math.sqrt(1 - sinz * sinz);\n    switch (this.mode) {\n      case mode.OBLIQ:\n        r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);\n        p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;\n        p.x *= sinz * this.cosph0;\n        break;\n      case mode.EQUIT:\n        r.y = Math.asin(p.y * sinz / rh);\n        p.y = cosz * rh;\n        p.x *= sinz;\n        break;\n      case mode.N_POLE:\n        r.y = Math.asin(cosz);\n        p.y = -p.y;\n        break;\n      case mode.S_POLE:\n        r.y = -Math.asin(cosz);\n        break;\n    }\n    r.x = Math.atan2(p.x, p.y);\n  }\n\n  p.x = r.x + this.long0;\n  p.y = r.y;\n  return p;\n}\n\nexport var names = [\"Tilted_Perspective\", \"tpers\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n","import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  }\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R,\n      z: point.z || 0\n    };\n  } else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter,\n        z: point.z || 0\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n    if (!point) {\n      return;\n    }\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n  if (!point) {\n    return;\n  }\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y,\n      z: point.z || 0\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D,\n      z: point.z || 0\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter,\n        z: point.z || 0\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  return point;\n}\n","import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nimport geocent from './lib/projections/geocent';\nimport tpers from './lib/projections/tpers';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n  proj4.Proj.projections.add(geocent);\n  proj4.Proj.projections.add(tpers);\n}","var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport {sExpr} from './process';\n\n\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.AXIS) {\n    var axisOrder = '';\n    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n      var axis = wkt.AXIS[i];\n      var descriptor = axis[0].toLowerCase();\n      if (descriptor.indexOf('north') !== -1) {\n        axisOrder += 'n';\n      } else if (descriptor.indexOf('south') !== -1) {\n        axisOrder += 's';\n      } else if (descriptor.indexOf('east') !== -1) {\n        axisOrder += 'e';\n      } else if (descriptor.indexOf('west') !== -1) {\n        axisOrder += 'w';\n      }\n    }\n    if (axisOrder.length === 2) {\n      axisOrder += 'u';\n    }\n    if (axisOrder.length === 3) {\n      wkt.axis = axisOrder;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['false_easting', 'False_Easting'],\n    ['false_northing', 'False_Northing'],\n    ['central_meridian', 'Central_Meridian'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  }\n}\nexport default function(wkt) {\n  var lisp = parser(wkt);\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj;\n}\n","export default parseString;\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n","\n\nfunction mapit(obj, key, value) {\n  if (Array.isArray(key)) {\n    value.unshift(key);\n    key = null;\n  }\n  var thing = key ? {} : obj;\n\n  var out = value.reduce(function(newObj, item) {\n    sExpr(item, newObj);\n    return newObj\n  }, thing);\n  if (key) {\n    obj[key] = out;\n  }\n}\n\nexport function sExpr(v, obj) {\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  var key = v.shift();\n  if (key === 'PARAMETER') {\n    key = v.shift();\n  }\n  if (v.length === 1) {\n    if (Array.isArray(v[0])) {\n      obj[key] = {};\n      sExpr(v[0], obj[key]);\n      return;\n    }\n    obj[key] = v[0];\n    return;\n  }\n  if (!v.length) {\n    obj[key] = true;\n    return;\n  }\n  if (key === 'TOWGS84') {\n    obj[key] = v;\n    return;\n  }\n  if (key === 'AXIS') {\n    if (!(key in obj)) {\n      obj[key] = [];\n    }\n    obj[key].push(v);\n    return;\n  }\n  if (!Array.isArray(key)) {\n    obj[key] = {};\n  }\n\n  var i;\n  switch (key) {\n    case 'UNIT':\n    case 'PRIMEM':\n    case 'VERT_DATUM':\n      obj[key] = {\n        name: v[0].toLowerCase(),\n        convert: v[1]\n      };\n      if (v.length === 3) {\n        sExpr(v[2], obj[key]);\n      }\n      return;\n    case 'SPHEROID':\n    case 'ELLIPSOID':\n      obj[key] = {\n        name: v[0],\n        a: v[1],\n        rf: v[2]\n      };\n      if (v.length === 4) {\n        sExpr(v[3], obj[key]);\n      }\n      return;\n    case 'PROJECTEDCRS':\n    case 'PROJCRS':\n    case 'GEOGCS':\n    case 'GEOCCS':\n    case 'PROJCS':\n    case 'LOCAL_CS':\n    case 'GEODCRS':\n    case 'GEODETICCRS':\n    case 'GEODETICDATUM':\n    case 'EDATUM':\n    case 'ENGINEERINGDATUM':\n    case 'VERT_CS':\n    case 'VERTCRS':\n    case 'VERTICALCRS':\n    case 'COMPD_CS':\n    case 'COMPOUNDCRS':\n    case 'ENGINEERINGCRS':\n    case 'ENGCRS':\n    case 'FITTED_CS':\n    case 'LOCAL_DATUM':\n    case 'DATUM':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      return;\n    default:\n      i = -1;\n      while (++i < v.length) {\n        if (!Array.isArray(v[i])) {\n          return sExpr(v, obj[key]);\n        }\n      }\n      return mapit(obj, key, v);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import dddviewer from \"../../../dist/ddd-viewer.esm\";\r\n\r\nimport \"../styles/main.css\";\r\n\r\n\r\nfunction initViewer() {\r\n\r\n    const dddConfig = {\r\n\r\n        \"productionTip\": false,\r\n        \"tileUrlBase\": \"https://3dsmaps.com/cache/ddd_http/\",\r\n        \"showDevelLinks\": true,\r\n        \"analyticsTag\": null,\r\n        \"sceneGroundLayers\": {},\r\n        \"sceneMaterials\": [\r\n            { \"value\": \"defaultsplat256\", \"text\": \"Default Set and Splatmaps (256x256)\", \"textures\": \"default256\", \"splatmap\": 256 },\r\n            { \"value\": \"defaultsplat512\", \"text\": \"Default Set and Splatmaps (512x512)\", \"textures\": \"default512\", \"splatmap\": 512 },\r\n            { \"value\": \"default256\", \"text\": \"Default Set (256x256)\", \"textures\": \"default256\", \"splatmap\": null },\r\n            { \"value\": \"default512\", \"text\": \"Default Set (512x512)\", \"textures\": \"default512\", \"splatmap\": null },\r\n            { \"value\": \"minimal\", \"text\": \"Minimal Set\", \"textures\": \"minimal\", \"splatmap\": null },\r\n            { \"value\": null, \"text\": \"None\", \"textures\": null, \"splatmap\": null }\r\n        ],\r\n\r\n        \"defaultCoords\": [ -8.723, 42.238 ],\r\n\r\n        \"dddHttpApiUrlBase\": \"https://{{hostname}}:8000/api/\",\r\n\r\n        \"geolocation\": false\r\n\r\n    };\r\n\r\n    const canvas = document.getElementById(\"ddd-scene\");\r\n\r\n    const viewerState = new dddviewer.ViewerState(); // this.getViewerState();\r\n    viewerState.positionWGS84 = [ -8.723, 42.238, 0 ];\r\n    viewerState.dddConfig = dddConfig;\r\n\r\n    const sceneViewer = new dddviewer.SceneViewer(canvas, viewerState);\r\n\r\n    const layerDddOsm3d = new dddviewer.GeoTile3DLayer();\r\n    sceneViewer.layerManager.addLayer(\"ddd-osm-3d\", layerDddOsm3d);\r\n}\r\n\r\nwindow.addEventListener(\"load\", () => {\r\n    initViewer();\r\n});"],"sourceRoot":""}